{"ast":null,"code":"/* global performance */\nvar perf = typeof performance !== 'undefined' && performance;\nvar now = perf && perf.now ? function () {\n  return perf.now();\n} : function () {\n  return Date.now();\n};\n\nfunction throwIfEmpty(name) {\n  if (!name) {\n    throw new Error('name must be non-empty');\n  }\n} // simple binary sort insertion\n\n\nfunction insertSorted(arr, item) {\n  var low = 0;\n  var high = arr.length;\n  var mid;\n\n  while (low < high) {\n    mid = low + high >>> 1; // like (num / 2) but faster\n\n    if (arr[mid].startTime < item.startTime) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n\n  arr.splice(low, 0, item);\n}\n\nvar mark;\nvar stop;\nvar getEntries;\nvar clear;\n\nif (perf && perf.mark && perf.getEntriesByName && perf.getEntriesByType && perf.clearMeasures) {\n  mark = function mark(name) {\n    throwIfEmpty(name);\n    perf.mark(\"start \" + name);\n  };\n\n  stop = function stop(name) {\n    throwIfEmpty(name);\n    perf.mark(\"end \" + name);\n    perf.measure(name, \"start \" + name, \"end \" + name);\n    var entries = perf.getEntriesByName(name);\n    return entries[entries.length - 1];\n  };\n\n  getEntries = function getEntries() {\n    return perf.getEntriesByType('measure');\n  };\n\n  clear = function clear() {\n    perf.clearMarks();\n    perf.clearMeasures();\n  };\n} else {\n  var marks = {};\n  var entries = [];\n\n  mark = function mark(name) {\n    throwIfEmpty(name);\n    var startTime = now();\n    marks['$' + name] = startTime;\n  };\n\n  stop = function stop(name) {\n    throwIfEmpty(name);\n    var endTime = now();\n    var startTime = marks['$' + name];\n\n    if (!startTime) {\n      throw new Error(\"no known mark: \" + name);\n    }\n\n    var entry = {\n      startTime: startTime,\n      name: name,\n      duration: endTime - startTime,\n      entryType: 'measure'\n    }; // per the spec this should be at least 150:\n    // https://www.w3.org/TR/resource-timing-1/#extensions-performance-interface\n    // we just have no limit, per Chrome and Edge's de-facto behavior\n\n    insertSorted(entries, entry);\n    return entry;\n  };\n\n  getEntries = function getEntries() {\n    return entries;\n  };\n\n  clear = function clear() {\n    marks = {};\n    entries = [];\n  };\n}\n\nexport { clear, getEntries, mark, stop };","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}