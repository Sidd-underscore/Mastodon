{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/* linting temp disabled while working on updates */\n\n/* eslint-disable */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _stackedNotification = require('./stackedNotification');\n\nvar _stackedNotification2 = _interopRequireDefault(_stackedNotification);\n\nvar _defaultPropTypes = require('./defaultPropTypes');\n\nvar _defaultPropTypes2 = _interopRequireDefault(_defaultPropTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction defaultBarStyleFactory(index, style) {\n  return _extends({}, style, {\n    bottom: 2 + index * 4 + 'rem'\n  });\n}\n\nfunction defaultActionStyleFactory(index, style) {\n  return _extends({}, style, {});\n}\n/**\n* The notification list does not have any state, so use a\n* pure function here. It just needs to return the stacked array\n* of notification components.\n*/\n\n\nvar NotificationStack = function NotificationStack(props) {\n  return _react2.default.createElement('div', {\n    className: 'notification-list'\n  }, props.notifications.map(function (notification, index) {\n    var isLast = index === 0 && props.notifications.length === 1;\n    var dismissNow = isLast || !props.dismissInOrder; // Handle styles\n\n    var barStyle = props.barStyleFactory(index, notification.barStyle, notification);\n    var actionStyle = props.actionStyleFactory(index, notification.actionStyle, notification);\n    var activeBarStyle = props.activeBarStyleFactory(index, notification.activeBarStyle, notification); // Allow onClick from notification stack or individual notifications\n\n    var onClick = notification.onClick || props.onClick;\n    var onDismiss = props.onDismiss;\n    var dismissAfter = notification.dismissAfter;\n\n    if (dismissAfter !== false) {\n      if (dismissAfter == null) dismissAfter = props.dismissAfter;\n      if (!dismissNow) dismissAfter += index * 1000;\n    }\n\n    return _react2.default.createElement(_stackedNotification2.default, _extends({}, notification, {\n      key: notification.key,\n      isLast: isLast,\n      action: notification.action || props.action,\n      dismissAfter: dismissAfter,\n      onDismiss: onDismiss.bind(undefined, notification),\n      onClick: onClick.bind(undefined, notification),\n      activeBarStyle: activeBarStyle,\n      barStyle: barStyle,\n      actionStyle: actionStyle\n    }));\n  }));\n};\n/* eslint-disable react/no-unused-prop-types, react/forbid-prop-types */\n\n\nNotificationStack.propTypes = {\n  activeBarStyleFactory: _propTypes2.default.func,\n  barStyleFactory: _propTypes2.default.func,\n  actionStyleFactory: _propTypes2.default.func,\n  dismissInOrder: _propTypes2.default.bool,\n  notifications: _propTypes2.default.array.isRequired,\n  onDismiss: _propTypes2.default.func.isRequired,\n  onClick: _propTypes2.default.func,\n  action: _defaultPropTypes2.default.action\n};\nNotificationStack.defaultProps = {\n  activeBarStyleFactory: defaultBarStyleFactory,\n  barStyleFactory: defaultBarStyleFactory,\n  actionStyleFactory: defaultActionStyleFactory,\n  dismissInOrder: true,\n  dismissAfter: 1000,\n  onClick: function onClick() {}\n};\n/* eslint-enable no-alert, no-console */\n\nexports.default = NotificationStack;","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}