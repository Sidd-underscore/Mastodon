{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar base83_1 = require(\"./base83\");\n\nvar utils_1 = require(\"./utils\");\n\nvar error_1 = require(\"./error\");\n\nvar bytesPerPixel = 4;\n\nvar multiplyBasisFunction = function multiplyBasisFunction(pixels, width, height, basisFunction) {\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var bytesPerRow = width * bytesPerPixel;\n\n  for (var x = 0; x < width; x++) {\n    for (var y = 0; y < height; y++) {\n      var basis = basisFunction(x, y);\n      r += basis * utils_1.sRGBToLinear(pixels[bytesPerPixel * x + 0 + y * bytesPerRow]);\n      g += basis * utils_1.sRGBToLinear(pixels[bytesPerPixel * x + 1 + y * bytesPerRow]);\n      b += basis * utils_1.sRGBToLinear(pixels[bytesPerPixel * x + 2 + y * bytesPerRow]);\n    }\n  }\n\n  var scale = 1 / (width * height);\n  return [r * scale, g * scale, b * scale];\n};\n\nvar encodeDC = function encodeDC(value) {\n  var roundedR = utils_1.linearTosRGB(value[0]);\n  var roundedG = utils_1.linearTosRGB(value[1]);\n  var roundedB = utils_1.linearTosRGB(value[2]);\n  return (roundedR << 16) + (roundedG << 8) + roundedB;\n};\n\nvar encodeAC = function encodeAC(value, maximumValue) {\n  var quantR = Math.floor(Math.max(0, Math.min(18, Math.floor(utils_1.signPow(value[0] / maximumValue, 0.5) * 9 + 9.5))));\n  var quantG = Math.floor(Math.max(0, Math.min(18, Math.floor(utils_1.signPow(value[1] / maximumValue, 0.5) * 9 + 9.5))));\n  var quantB = Math.floor(Math.max(0, Math.min(18, Math.floor(utils_1.signPow(value[2] / maximumValue, 0.5) * 9 + 9.5))));\n  return quantR * 19 * 19 + quantG * 19 + quantB;\n};\n\nvar encode = function encode(pixels, width, height, componentX, componentY) {\n  if (componentX < 1 || componentX > 9 || componentY < 1 || componentY > 9) {\n    throw new error_1.ValidationError(\"BlurHash must have between 1 and 9 components\");\n  }\n\n  if (width * height * 4 !== pixels.length) {\n    throw new error_1.ValidationError(\"Width and height must match the pixels array\");\n  }\n\n  var factors = [];\n\n  var _loop_1 = function _loop_1(y) {\n    var _loop_2 = function _loop_2(x) {\n      var normalisation = x == 0 && y == 0 ? 1 : 2;\n      var factor = multiplyBasisFunction(pixels, width, height, function (i, j) {\n        return normalisation * Math.cos(Math.PI * x * i / width) * Math.cos(Math.PI * y * j / height);\n      });\n      factors.push(factor);\n    };\n\n    for (var x = 0; x < componentX; x++) {\n      _loop_2(x);\n    }\n  };\n\n  for (var y = 0; y < componentY; y++) {\n    _loop_1(y);\n  }\n\n  var dc = factors[0];\n  var ac = factors.slice(1);\n  var hash = \"\";\n  var sizeFlag = componentX - 1 + (componentY - 1) * 9;\n  hash += base83_1.encode83(sizeFlag, 1);\n  var maximumValue;\n\n  if (ac.length > 0) {\n    var actualMaximumValue = Math.max.apply(Math, ac.map(function (val) {\n      return Math.max.apply(Math, val);\n    }));\n    var quantisedMaximumValue = Math.floor(Math.max(0, Math.min(82, Math.floor(actualMaximumValue * 166 - 0.5))));\n    maximumValue = (quantisedMaximumValue + 1) / 166;\n    hash += base83_1.encode83(quantisedMaximumValue, 1);\n  } else {\n    maximumValue = 1;\n    hash += base83_1.encode83(0, 1);\n  }\n\n  hash += base83_1.encode83(encodeDC(dc), 4);\n  ac.forEach(function (factor) {\n    hash += base83_1.encode83(encodeAC(factor, maximumValue), 2);\n  });\n  return hash;\n};\n\nexports.default = encode;","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}