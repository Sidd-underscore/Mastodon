{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport PropTypes from 'prop-types';\nimport isEqual from 'lodash.isequal';\nexport default function HotKeyMapMixin() {\n  var hotKeyMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    contextTypes: {\n      hotKeyMap: PropTypes.object\n    },\n    childContextTypes: {\n      hotKeyMap: PropTypes.object\n    },\n    getChildContext: function getChildContext() {\n      return {\n        hotKeyMap: this.__hotKeyMap__\n      };\n    },\n    componentWillMount: function componentWillMount() {\n      this.updateMap();\n    },\n    updateMap: function updateMap() {\n      var newMap = this.buildMap();\n\n      if (!isEqual(newMap, this.__hotKeyMap__)) {\n        this.__hotKeyMap__ = newMap;\n        return true;\n      }\n\n      return false;\n    },\n    buildMap: function buildMap() {\n      var parentMap = this.context.hotKeyMap || {};\n      var thisMap = this.props.keyMap || {};\n      return _extends({}, parentMap, hotKeyMap, thisMap);\n    },\n    getMap: function getMap() {\n      return this.__hotKeyMap__;\n    }\n  };\n}","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}