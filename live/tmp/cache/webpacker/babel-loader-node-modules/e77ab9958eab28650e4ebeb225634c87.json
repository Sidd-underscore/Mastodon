{"ast":null,"code":"'use strict';\n\nvar requirePromise = require('./requirePromise');\n\nrequirePromise();\n\nvar IsCallable = require('es-abstract/2018/IsCallable');\n\nvar SpeciesConstructor = require('es-abstract/2018/SpeciesConstructor');\n\nvar Type = require('es-abstract/2018/Type');\n\nvar promiseResolve = function PromiseResolve(C, value) {\n  return new C(function (resolve) {\n    resolve(value);\n  });\n};\n\nvar OriginalPromise = Promise;\n\nvar createThenFinally = function CreateThenFinally(C, onFinally) {\n  return function (value) {\n    var result = onFinally();\n    var promise = promiseResolve(C, result);\n\n    var valueThunk = function valueThunk() {\n      return value;\n    };\n\n    return promise.then(valueThunk);\n  };\n};\n\nvar createCatchFinally = function CreateCatchFinally(C, onFinally) {\n  return function (reason) {\n    var result = onFinally();\n    var promise = promiseResolve(C, result);\n\n    var thrower = function thrower() {\n      throw reason;\n    };\n\n    return promise.then(thrower);\n  };\n};\n\nvar promiseFinally = function finally_(onFinally) {\n  /* eslint no-invalid-this: 0 */\n  var promise = this;\n\n  if (Type(promise) !== 'Object') {\n    throw new TypeError('receiver is not an Object');\n  }\n\n  var C = SpeciesConstructor(promise, OriginalPromise); // may throw\n\n  var thenFinally = onFinally;\n  var catchFinally = onFinally;\n\n  if (IsCallable(onFinally)) {\n    thenFinally = createThenFinally(C, onFinally);\n    catchFinally = createCatchFinally(C, onFinally);\n  }\n\n  return promise.then(thenFinally, catchFinally);\n};\n\nif (Object.getOwnPropertyDescriptor) {\n  var descriptor = Object.getOwnPropertyDescriptor(promiseFinally, 'name');\n\n  if (descriptor && descriptor.configurable) {\n    Object.defineProperty(promiseFinally, 'name', {\n      configurable: true,\n      value: 'finally'\n    });\n  }\n}\n\nmodule.exports = promiseFinally;","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}