{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // @ts-ignore\n\nvar char_regex_1 = __importDefault(require(\"char-regex\"));\n/**\n * Converts a string to an array of string chars\n * @param {string} str The string to turn into array\n * @returns {string[]}\n */\n\n\nfunction toArray(str) {\n  if (typeof str !== 'string') {\n    throw new Error('A string is expected as input');\n  }\n\n  return str.match(char_regex_1.default()) || [];\n}\n\nexports.toArray = toArray;\n/**\n * Returns the length of a string\n *\n * @export\n * @param {string} str\n * @returns {number}\n */\n\nfunction length(str) {\n  // Check for input\n  if (typeof str !== 'string') {\n    throw new Error('Input must be a string');\n  }\n\n  var match = str.match(char_regex_1.default());\n  return match === null ? 0 : match.length;\n}\n\nexports.length = length;\n/**\n * Returns a substring by providing start and end position\n *\n * @export\n * @param {string} str\n * @param {number} [begin=0] Starting position\n * @param {number} end End position\n * @returns {string}\n */\n\nfunction substring(str, begin, end) {\n  if (begin === void 0) {\n    begin = 0;\n  } // Check for input\n\n\n  if (typeof str !== 'string') {\n    throw new Error('Input must be a string');\n  } // Even though negative numbers work here, theyre not in the spec\n\n\n  if (typeof begin !== 'number' || begin < 0) {\n    begin = 0;\n  }\n\n  if (typeof end === 'number' && end < 0) {\n    end = 0;\n  }\n\n  var match = str.match(char_regex_1.default());\n  if (!match) return '';\n  return match.slice(begin, end).join('');\n}\n\nexports.substring = substring;\n/**\n * Returns a substring by providing start position and length\n *\n * @export\n * @param {string} str\n * @param {number} [begin=0] Starting position\n * @param {number} len Desired length\n * @returns {string}\n */\n\nfunction substr(str, begin, len) {\n  if (begin === void 0) {\n    begin = 0;\n  } // Check for input\n\n\n  if (typeof str !== 'string') {\n    throw new Error('Input must be a string');\n  }\n\n  var strLength = length(str); // Fix type\n\n  if (typeof begin !== 'number') {\n    begin = parseInt(begin, 10);\n  } // Return zero-length string if got oversize number.\n\n\n  if (begin >= strLength) {\n    return '';\n  } // Calculating postive version of negative value.\n\n\n  if (begin < 0) {\n    begin += strLength;\n  }\n\n  var end;\n\n  if (typeof len === 'undefined') {\n    end = strLength;\n  } else {\n    // Fix type\n    if (typeof len !== 'number') {\n      len = parseInt(len, 10);\n    }\n\n    end = len >= 0 ? len + begin : begin;\n  }\n\n  var match = str.match(char_regex_1.default());\n  if (!match) return '';\n  return match.slice(begin, end).join('');\n}\n\nexports.substr = substr;\n/**\n * Enforces a string to be a certain length by\n * adding or removing characters\n *\n * @export\n * @param {string} str\n * @param {number} [limit=16] Limit\n * @param {string} [padString='#'] The Pad String\n * @param {string} [padPosition='right'] The Pad Position\n * @returns {string}\n */\n\nfunction limit(str, limit, padString, padPosition) {\n  if (limit === void 0) {\n    limit = 16;\n  }\n\n  if (padString === void 0) {\n    padString = '#';\n  }\n\n  if (padPosition === void 0) {\n    padPosition = 'right';\n  } // Input should be a string, limit should be a number\n\n\n  if (typeof str !== 'string' || typeof limit !== 'number') {\n    throw new Error('Invalid arguments specified');\n  } // Pad position should be either left or right\n\n\n  if (['left', 'right'].indexOf(padPosition) === -1) {\n    throw new Error('Pad position should be either left or right');\n  } // Pad string can be anything, we convert it to string\n\n\n  if (typeof padString !== 'string') {\n    padString = String(padString);\n  } // Calculate string length considering astral code points\n\n\n  var strLength = length(str);\n\n  if (strLength > limit) {\n    return substring(str, 0, limit);\n  } else if (strLength < limit) {\n    var padRepeats = padString.repeat(limit - strLength);\n    return padPosition === 'left' ? padRepeats + str : str + padRepeats;\n  }\n\n  return str;\n}\n\nexports.limit = limit;\n/**\n * Returns the index of the first occurrence of a given string\n *\n * @export\n * @param {string} str\n * @param {string} [searchStr] the string to search\n * @param {number} [pos] starting position\n * @returns {number}\n */\n\nfunction indexOf(str, searchStr, pos) {\n  if (pos === void 0) {\n    pos = 0;\n  }\n\n  if (typeof str !== 'string') {\n    throw new Error('Input must be a string');\n  }\n\n  if (str === '') {\n    if (searchStr === '') {\n      return 0;\n    }\n\n    return -1;\n  } // fix type\n\n\n  pos = Number(pos);\n  pos = isNaN(pos) ? 0 : pos;\n  searchStr = String(searchStr);\n  var strArr = toArray(str);\n\n  if (pos >= strArr.length) {\n    if (searchStr === '') {\n      return strArr.length;\n    }\n\n    return -1;\n  }\n\n  if (searchStr === '') {\n    return pos;\n  }\n\n  var searchArr = toArray(searchStr);\n  var finded = false;\n  var index;\n\n  for (index = pos; index < strArr.length; index += 1) {\n    var searchIndex = 0;\n\n    while (searchIndex < searchArr.length && searchArr[searchIndex] === strArr[index + searchIndex]) {\n      searchIndex += 1;\n    }\n\n    if (searchIndex === searchArr.length && searchArr[searchIndex - 1] === strArr[index + searchIndex - 1]) {\n      finded = true;\n      break;\n    }\n  }\n\n  return finded ? index : -1;\n}\n\nexports.indexOf = indexOf;","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}