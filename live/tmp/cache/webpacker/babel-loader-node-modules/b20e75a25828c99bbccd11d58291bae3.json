{"ast":null,"code":"'use strict';\n\nvar ToInteger = require('es-abstract/2020/ToInteger');\n\nvar ToLength = require('es-abstract/2020/ToLength');\n\nvar ToObject = require('es-abstract/2020/ToObject');\n\nvar SameValueZero = require('es-abstract/2020/SameValueZero');\n\nvar $isNaN = require('es-abstract/helpers/isNaN');\n\nvar $isFinite = require('es-abstract/helpers/isFinite');\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar isString = require('is-string');\n\nvar $charAt = callBound('String.prototype.charAt');\nvar $indexOf = GetIntrinsic('%Array.prototype.indexOf%'); // TODO: use callBind.apply without breaking IE 8\n\nmodule.exports = function includes(searchElement) {\n  var fromIndex = arguments.length > 1 ? ToInteger(arguments[1]) : 0;\n\n  if ($indexOf && !$isNaN(searchElement) && $isFinite(fromIndex) && typeof searchElement !== 'undefined') {\n    return $indexOf.apply(this, arguments) > -1;\n  }\n\n  var O = ToObject(this);\n  var length = ToLength(O.length);\n\n  if (length === 0) {\n    return false;\n  }\n\n  var k = fromIndex >= 0 ? fromIndex : Math.max(0, length + fromIndex);\n\n  while (k < length) {\n    if (SameValueZero(searchElement, isString(O) ? $charAt(O, k) : O[k])) {\n      return true;\n    }\n\n    k += 1;\n  }\n\n  return false;\n};","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}