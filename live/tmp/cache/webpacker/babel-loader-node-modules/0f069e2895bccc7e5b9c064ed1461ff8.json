{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar base83_1 = require(\"./base83\");\n\nvar utils_1 = require(\"./utils\");\n\nvar error_1 = require(\"./error\");\n/**\n * Returns an error message if invalid or undefined if valid\n * @param blurhash\n */\n\n\nvar validateBlurhash = function validateBlurhash(blurhash) {\n  if (!blurhash || blurhash.length < 6) {\n    throw new error_1.ValidationError(\"The blurhash string must be at least 6 characters\");\n  }\n\n  var sizeFlag = base83_1.decode83(blurhash[0]);\n  var numY = Math.floor(sizeFlag / 9) + 1;\n  var numX = sizeFlag % 9 + 1;\n\n  if (blurhash.length !== 4 + 2 * numX * numY) {\n    throw new error_1.ValidationError(\"blurhash length mismatch: length is \" + blurhash.length + \" but it should be \" + (4 + 2 * numX * numY));\n  }\n};\n\nexports.isBlurhashValid = function (blurhash) {\n  try {\n    validateBlurhash(blurhash);\n  } catch (error) {\n    return {\n      result: false,\n      errorReason: error.message\n    };\n  }\n\n  return {\n    result: true\n  };\n};\n\nvar decodeDC = function decodeDC(value) {\n  var intR = value >> 16;\n  var intG = value >> 8 & 255;\n  var intB = value & 255;\n  return [utils_1.sRGBToLinear(intR), utils_1.sRGBToLinear(intG), utils_1.sRGBToLinear(intB)];\n};\n\nvar decodeAC = function decodeAC(value, maximumValue) {\n  var quantR = Math.floor(value / (19 * 19));\n  var quantG = Math.floor(value / 19) % 19;\n  var quantB = value % 19;\n  var rgb = [utils_1.signPow((quantR - 9) / 9, 2.0) * maximumValue, utils_1.signPow((quantG - 9) / 9, 2.0) * maximumValue, utils_1.signPow((quantB - 9) / 9, 2.0) * maximumValue];\n  return rgb;\n};\n\nvar decode = function decode(blurhash, width, height, punch) {\n  validateBlurhash(blurhash);\n  punch = punch | 1;\n  var sizeFlag = base83_1.decode83(blurhash[0]);\n  var numY = Math.floor(sizeFlag / 9) + 1;\n  var numX = sizeFlag % 9 + 1;\n  var quantisedMaximumValue = base83_1.decode83(blurhash[1]);\n  var maximumValue = (quantisedMaximumValue + 1) / 166;\n  var colors = new Array(numX * numY);\n\n  for (var i = 0; i < colors.length; i++) {\n    if (i === 0) {\n      var value = base83_1.decode83(blurhash.substring(2, 6));\n      colors[i] = decodeDC(value);\n    } else {\n      var value = base83_1.decode83(blurhash.substring(4 + i * 2, 6 + i * 2));\n      colors[i] = decodeAC(value, maximumValue * punch);\n    }\n  }\n\n  var bytesPerRow = width * 4;\n  var pixels = new Uint8ClampedArray(bytesPerRow * height);\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var r = 0;\n      var g = 0;\n      var b = 0;\n\n      for (var j = 0; j < numY; j++) {\n        for (var i = 0; i < numX; i++) {\n          var basis = Math.cos(Math.PI * x * i / width) * Math.cos(Math.PI * y * j / height);\n          var color = colors[i + j * numX];\n          r += color[0] * basis;\n          g += color[1] * basis;\n          b += color[2] * basis;\n        }\n      }\n\n      var intR = utils_1.linearTosRGB(r);\n      var intG = utils_1.linearTosRGB(g);\n      var intB = utils_1.linearTosRGB(b);\n      pixels[4 * x + 0 + y * bytesPerRow] = intR;\n      pixels[4 * x + 1 + y * bytesPerRow] = intG;\n      pixels[4 * x + 2 + y * bytesPerRow] = intB;\n      pixels[4 * x + 3 + y * bytesPerRow] = 255; // alpha\n    }\n  }\n\n  return pixels;\n};\n\nexports.default = decode;","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}