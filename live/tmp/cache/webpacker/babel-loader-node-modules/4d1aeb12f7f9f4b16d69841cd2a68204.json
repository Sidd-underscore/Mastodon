{"ast":null,"code":"import React from 'react';\nimport { is } from 'immutable';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nvar NOT_SET = {};\n\nfunction isMapLike(collection) {\n  return collection !== null && _typeof(collection) === 'object' && typeof collection.get === 'function' && typeof collection.has === 'function';\n}\n\nfunction isInvalid(collection) {\n  return collection === null || collection === undefined;\n}\n\nfunction get(collection, key, notSetValue) {\n  if (isInvalid(collection)) {\n    return notSetValue;\n  }\n\n  if (isMapLike(collection)) {\n    return collection.has(key) ? collection.get(key) : notSetValue;\n  }\n\n  return hasOwnProperty.call(collection, key) ? collection[key] : notSetValue;\n}\n\nfunction getIn(collection, keyPath, notSetValue) {\n  var i = 0;\n\n  while (i !== keyPath.length) {\n    collection = get(collection, keyPath[i++], NOT_SET);\n\n    if (collection === NOT_SET) {\n      return notSetValue;\n    }\n  }\n\n  return collection;\n}\n\nfunction check(config) {\n  var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var checkItem = createChecker(prev, next);\n  var checklist = config || Object.keys(_objectSpread2({}, next, {}, prev));\n  return checklist.every(checkItem);\n}\n\nfunction createChecker(prev, next) {\n  return function (name) {\n    if (typeof name === 'string') {\n      return is(next[name], prev[name]);\n    } else if (Array.isArray(name)) {\n      return is(getIn(next, name), getIn(prev, name));\n    }\n\n    throw new TypeError('Invalid key: expected Array or string: ' + name);\n  };\n}\n\nvar ImmutablePureComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ImmutablePureComponent, _React$Component);\n\n  function ImmutablePureComponent() {\n    _classCallCheck(this, ImmutablePureComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImmutablePureComponent).apply(this, arguments));\n  }\n\n  _createClass(ImmutablePureComponent, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var nextState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return !check(this.updateOnProps, this.props, nextProps, 'updateOnProps') || !check(this.updateOnStates, this.state, nextState, 'updateOnStates');\n    }\n  }]);\n\n  return ImmutablePureComponent;\n}(React.Component);\n\nfunction immutableMemo(Component, updateOnProps) {\n  return /*#__PURE__*/React.memo(Component, function (prev, next) {\n    return check(updateOnProps, prev, next, 'immutableMemo');\n  });\n}\n\nexport default ImmutablePureComponent;\nexport { ImmutablePureComponent, immutableMemo };","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}