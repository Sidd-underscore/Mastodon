{"ast":null,"code":"'use strict';\n\nvar COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i;\nvar WS_TRIM_PATTERN = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\nvar WS_CHAR_PATTERN = /\\s|\\uFEFF|\\xA0/;\nvar WS_FOLD_PATTERN = /\\r?\\n[\\x20\\x09]+/g;\nvar DELIMITER_PATTERN = /[;,\"]/;\nvar WS_DELIMITER_PATTERN = /[;,\"]|\\s/;\n/**\n * Token character pattern\n * @type {RegExp}\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\n\nvar TOKEN_PATTERN = /^[!#$%&'*+\\-\\.^_`|~\\da-zA-Z]+$/;\nvar STATE = {\n  IDLE: 1 << 0,\n  URI: 1 << 1,\n  ATTR: 1 << 2\n};\n\nfunction trim(value) {\n  return value.replace(WS_TRIM_PATTERN, '');\n}\n\nfunction hasWhitespace(value) {\n  return WS_CHAR_PATTERN.test(value);\n}\n\nfunction skipWhitespace(value, offset) {\n  while (hasWhitespace(value[offset])) {\n    offset++;\n  }\n\n  return offset;\n}\n\nfunction needsQuotes(value) {\n  return WS_DELIMITER_PATTERN.test(value) || !TOKEN_PATTERN.test(value);\n}\n\nvar Link = /*#__PURE__*/function () {\n  /**\n   * Link\n   * @constructor\n   * @param {String} [value]\n   * @returns {Link}\n   */\n  function Link(value) {\n    /** @type {Array} URI references */\n    this.refs = [];\n\n    if (value) {\n      this.parse(value);\n    }\n  }\n  /**\n   * Get refs with given relation type\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n\n\n  var _proto = Link.prototype;\n\n  _proto.rel = function rel(value) {\n    var links = [];\n    var type = value.toLowerCase();\n\n    for (var i = 0; i < this.refs.length; i++) {\n      if (this.refs[i].rel.toLowerCase() === type) {\n        links.push(this.refs[i]);\n      }\n    }\n\n    return links;\n  }\n  /**\n   * Get refs where given attribute has a given value\n   * @param {String} attr\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  ;\n\n  _proto.get = function get(attr, value) {\n    attr = attr.toLowerCase();\n    var links = [];\n\n    for (var i = 0; i < this.refs.length; i++) {\n      if (this.refs[i][attr] === value) {\n        links.push(this.refs[i]);\n      }\n    }\n\n    return links;\n  };\n\n  _proto.set = function set(link) {\n    this.refs.push(link);\n    return this;\n  };\n\n  _proto.has = function has(attr, value) {\n    attr = attr.toLowerCase();\n\n    for (var i = 0; i < this.refs.length; i++) {\n      if (this.refs[i][attr] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  _proto.parse = function parse(value, offset) {\n    offset = offset || 0;\n    value = offset ? value.slice(offset) : value; // Trim & unfold folded lines\n\n    value = trim(value).replace(WS_FOLD_PATTERN, '');\n    var state = STATE.IDLE;\n    var length = value.length;\n    var offset = 0;\n    var ref = null;\n\n    while (offset < length) {\n      if (state === STATE.IDLE) {\n        if (hasWhitespace(value[offset])) {\n          offset++;\n          continue;\n        } else if (value[offset] === '<') {\n          if (ref != null) {\n            var _this$refs;\n\n            ref.rel != null ? (_this$refs = this.refs).push.apply(_this$refs, Link.expandRelations(ref)) : this.refs.push(ref);\n          }\n\n          var end = value.indexOf('>', offset);\n          if (end === -1) throw new Error('Expected end of URI delimiter at offset ' + offset);\n          ref = {\n            uri: value.slice(offset + 1, end)\n          }; // this.refs.push( ref )\n\n          offset = end;\n          state = STATE.URI;\n        } else {\n          throw new Error('Unexpected character \"' + value[offset] + '\" at offset ' + offset);\n        }\n\n        offset++;\n      } else if (state === STATE.URI) {\n        if (hasWhitespace(value[offset])) {\n          offset++;\n          continue;\n        } else if (value[offset] === ';') {\n          state = STATE.ATTR;\n          offset++;\n        } else if (value[offset] === ',') {\n          state = STATE.IDLE;\n          offset++;\n        } else {\n          throw new Error('Unexpected character \"' + value[offset] + '\" at offset ' + offset);\n        }\n      } else if (state === STATE.ATTR) {\n        if (value[offset] === ';' || hasWhitespace(value[offset])) {\n          offset++;\n          continue;\n        }\n\n        var end = value.indexOf('=', offset);\n        if (end === -1) throw new Error('Expected attribute delimiter at offset ' + offset);\n        var attr = trim(value.slice(offset, end)).toLowerCase();\n        var attrValue = '';\n        offset = end + 1;\n        offset = skipWhitespace(value, offset);\n\n        if (value[offset] === '\"') {\n          offset++;\n\n          while (offset < length) {\n            if (value[offset] === '\"') {\n              offset++;\n              break;\n            }\n\n            if (value[offset] === '\\\\') {\n              offset++;\n            }\n\n            attrValue += value[offset];\n            offset++;\n          }\n        } else {\n          var end = offset + 1;\n\n          while (!DELIMITER_PATTERN.test(value[end]) && end < length) {\n            end++;\n          }\n\n          attrValue = value.slice(offset, end);\n          offset = end;\n        }\n\n        if (ref[attr] && Link.isSingleOccurenceAttr(attr)) {// Ignore multiples of attributes which may only appear once\n        } else if (attr[attr.length - 1] === '*') {\n          ref[attr] = Link.parseExtendedValue(attrValue);\n        } else {\n          attrValue = attr === 'type' ? attrValue.toLowerCase() : attrValue;\n\n          if (ref[attr] != null) {\n            if (Array.isArray(ref[attr])) {\n              ref[attr].push(attrValue);\n            } else {\n              ref[attr] = [ref[attr], attrValue];\n            }\n          } else {\n            ref[attr] = attrValue;\n          }\n        }\n\n        switch (value[offset]) {\n          case ',':\n            state = STATE.IDLE;\n            break;\n\n          case ';':\n            state = STATE.ATTR;\n            break;\n        }\n\n        offset++;\n      } else {\n        throw new Error('Unknown parser state \"' + state + '\"');\n      }\n    }\n\n    if (ref != null) {\n      var _this$refs2;\n\n      ref.rel != null ? (_this$refs2 = this.refs).push.apply(_this$refs2, Link.expandRelations(ref)) : this.refs.push(ref);\n    }\n\n    ref = null;\n    return this;\n  };\n\n  _proto.toString = function toString() {\n    var refs = [];\n    var link = '';\n    var ref = null;\n\n    for (var i = 0; i < this.refs.length; i++) {\n      ref = this.refs[i];\n      link = Object.keys(this.refs[i]).reduce(function (link, attr) {\n        if (attr === 'uri') return link;\n        return link + '; ' + Link.formatAttribute(attr, ref[attr]);\n      }, '<' + ref.uri + '>');\n      refs.push(link);\n    }\n\n    return refs.join(', ');\n  };\n\n  return Link;\n}();\n/**\n * Determines whether an encoding can be\n * natively handled with a `Buffer`\n * @param {String} value\n * @returns {Boolean}\n */\n\n\nLink.isCompatibleEncoding = function (value) {\n  return COMPATIBLE_ENCODING_PATTERN.test(value);\n};\n\nLink.parse = function (value, offset) {\n  return new Link().parse(value, offset);\n};\n\nLink.isSingleOccurenceAttr = function (attr) {\n  return attr === 'rel' || attr === 'type' || attr === 'media' || attr === 'title' || attr === 'title*';\n};\n\nLink.isTokenAttr = function (attr) {\n  return attr === 'rel' || attr === 'type' || attr === 'anchor';\n};\n\nLink.escapeQuotes = function (value) {\n  return value.replace(/\"/g, '\\\\\"');\n};\n\nLink.expandRelations = function (ref) {\n  var rels = ref.rel.split(' ');\n  return rels.map(function (rel) {\n    var value = Object.assign({}, ref);\n    value.rel = rel;\n    return value;\n  });\n};\n/**\n * Parses an extended value and attempts to decode it\n * @internal\n * @param {String} value\n * @return {Object}\n */\n\n\nLink.parseExtendedValue = function (value) {\n  var parts = /([^']+)?(?:'([^']+)')?(.+)/.exec(value);\n  return {\n    language: parts[2].toLowerCase(),\n    encoding: Link.isCompatibleEncoding(parts[1]) ? null : parts[1].toLowerCase(),\n    value: Link.isCompatibleEncoding(parts[1]) ? decodeURIComponent(parts[3]) : parts[3]\n  };\n};\n/**\n * Format a given extended attribute and it's value\n * @param {String} attr\n * @param {Object} data\n * @return {String}\n */\n\n\nLink.formatExtendedAttribute = function (attr, data) {\n  var encoding = (data.encoding || 'utf-8').toUpperCase();\n  var language = data.language || 'en';\n  var encodedValue = '';\n\n  if (Buffer.isBuffer(data.value) && Link.isCompatibleEncoding(encoding)) {\n    encodedValue = data.value.toString(encoding);\n  } else if (Buffer.isBuffer(data.value)) {\n    encodedValue = data.value.toString('hex').replace(/[0-9a-f]{2}/gi, '%$1');\n  } else {\n    encodedValue = encodeURIComponent(data.value);\n  }\n\n  return attr + '=' + encoding + '\\'' + language + '\\'' + encodedValue;\n};\n/**\n * Format a given attribute and it's value\n * @param {String} attr\n * @param {String|Object} value\n * @return {String}\n */\n\n\nLink.formatAttribute = function (attr, value) {\n  if (Array.isArray(value)) {\n    return value.map(function (item) {\n      return Link.formatAttribute(attr, item);\n    }).join('; ');\n  }\n\n  if (attr[attr.length - 1] === '*' || typeof value !== 'string') {\n    return Link.formatExtendedAttribute(attr, value);\n  }\n\n  if (Link.isTokenAttr(attr)) {\n    value = needsQuotes(value) ? '\"' + Link.escapeQuotes(value) + '\"' : Link.escapeQuotes(value);\n  } else if (needsQuotes(value)) {\n    value = encodeURIComponent(value); // We don't need to escape <SP> <,> <;> within quotes\n\n    value = value.replace(/%20/g, ' ').replace(/%2C/g, ',').replace(/%3B/g, ';');\n    value = '\"' + value + '\"';\n  }\n\n  return attr + '=' + value;\n};\n\nmodule.exports = Link;","map":null,"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}