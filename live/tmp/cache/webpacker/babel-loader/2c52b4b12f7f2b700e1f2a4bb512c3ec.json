{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ACCOUNT_IMPORT, ACCOUNTS_IMPORT } from '../actions/importer';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\nvar initialState = ImmutableMap();\n\nvar normalizeAccount = function normalizeAccount(state, account) {\n  account = _extends({}, account);\n  delete account.followers_count;\n  delete account.following_count;\n  delete account.statuses_count;\n  return state.set(account.id, fromJS(account));\n};\n\nvar normalizeAccounts = function normalizeAccounts(state, accounts) {\n  accounts.forEach(function (account) {\n    state = normalizeAccount(state, account);\n  });\n  return state;\n};\n\nexport default function accounts(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case ACCOUNT_IMPORT:\n      return normalizeAccount(state, action.account);\n\n    case ACCOUNTS_IMPORT:\n      return normalizeAccounts(state, action.accounts);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/accounts.js"],"names":["ACCOUNT_IMPORT","ACCOUNTS_IMPORT","Map","ImmutableMap","fromJS","initialState","normalizeAccount","state","account","followers_count","following_count","statuses_count","set","id","normalizeAccounts","accounts","forEach","action","type"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,qBAAhD;AACA,SAASC,GAAG,IAAIC,YAAhB,EAA8BC,MAA9B,QAA4C,WAA5C;AAEA,IAAMC,YAAY,GAAGF,YAAY,EAAjC;;AAEA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQC,OAAR,EAAoB;AAC3CA,EAAAA,OAAO,gBAAQA,OAAR,CAAP;AAEA,SAAOA,OAAO,CAACC,eAAf;AACA,SAAOD,OAAO,CAACE,eAAf;AACA,SAAOF,OAAO,CAACG,cAAf;AAEA,SAAOJ,KAAK,CAACK,GAAN,CAAUJ,OAAO,CAACK,EAAlB,EAAsBT,MAAM,CAACI,OAAD,CAA5B,CAAP;AACD,CARD;;AAUA,IAAMM,iBAAiB,GAAG,SAApBA,iBAAoB,CAACP,KAAD,EAAQQ,QAAR,EAAqB;AAC7CA,EAAAA,QAAQ,CAACC,OAAT,CAAiB,UAAAR,OAAO,EAAI;AAC1BD,IAAAA,KAAK,GAAGD,gBAAgB,CAACC,KAAD,EAAQC,OAAR,CAAxB;AACD,GAFD;AAIA,SAAOD,KAAP;AACD,CAND;;AAQA,eAAe,SAASQ,QAAT,CAAkBR,KAAlB,EAAwCU,MAAxC,EAAgD;AAAA,MAA9BV,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBF,YAAsB;AAAA;;AAC7D,UAAOY,MAAM,CAACC,IAAd;AACA,SAAKlB,cAAL;AACE,aAAOM,gBAAgB,CAACC,KAAD,EAAQU,MAAM,CAACT,OAAf,CAAvB;;AACF,SAAKP,eAAL;AACE,aAAOa,iBAAiB,CAACP,KAAD,EAAQU,MAAM,CAACF,QAAf,CAAxB;;AACF;AACE,aAAOR,KAAP;AANF;AAQD;AAAA","sourcesContent":["import { ACCOUNT_IMPORT, ACCOUNTS_IMPORT } from '../actions/importer';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nconst initialState = ImmutableMap();\n\nconst normalizeAccount = (state, account) => {\n  account = { ...account };\n\n  delete account.followers_count;\n  delete account.following_count;\n  delete account.statuses_count;\n\n  return state.set(account.id, fromJS(account));\n};\n\nconst normalizeAccounts = (state, accounts) => {\n  accounts.forEach(account => {\n    state = normalizeAccount(state, account);\n  });\n\n  return state;\n};\n\nexport default function accounts(state = initialState, action) {\n  switch(action.type) {\n  case ACCOUNT_IMPORT:\n    return normalizeAccount(state, action.account);\n  case ACCOUNTS_IMPORT:\n    return normalizeAccounts(state, action.accounts);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}