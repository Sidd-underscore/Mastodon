{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/directory/components/account_card.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport Avatar from 'mastodon/components/avatar';\nimport DisplayName from 'mastodon/components/display_name';\nimport Permalink from 'mastodon/components/permalink';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\nimport IconButton from 'mastodon/components/icon_button';\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl';\nimport { autoPlayGif, me, unfollowModal } from 'mastodon/initial_state';\nimport ShortNumber from 'mastodon/components/short_number';\nimport { followAccount, unfollowAccount, blockAccount, unblockAccount, unmuteAccount } from 'mastodon/actions/accounts';\nimport { openModal } from 'mastodon/actions/modal';\nimport { initMuteModal } from 'mastodon/actions/mutes';\nvar messages = defineMessages({\n  follow: {\n    \"id\": \"account.follow\",\n    \"defaultMessage\": \"Follow\"\n  },\n  unfollow: {\n    \"id\": \"account.unfollow\",\n    \"defaultMessage\": \"Unfollow\"\n  },\n  requested: {\n    \"id\": \"account.requested\",\n    \"defaultMessage\": \"Awaiting approval\"\n  },\n  unblock: {\n    \"id\": \"account.unblock\",\n    \"defaultMessage\": \"Unblock @{name}\"\n  },\n  unmute: {\n    \"id\": \"account.unmute\",\n    \"defaultMessage\": \"Unmute @{name}\"\n  },\n  unfollowConfirm: {\n    \"id\": \"confirmations.unfollow.confirm\",\n    \"defaultMessage\": \"Unfollow\"\n  }\n});\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var getAccount = makeGetAccount();\n\n  var mapStateToProps = function mapStateToProps(state, _ref) {\n    var id = _ref.id;\n    return {\n      account: getAccount(state, id)\n    };\n  };\n\n  return mapStateToProps;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref2) {\n  var intl = _ref2.intl;\n  return {\n    onFollow(account) {\n      if (account.getIn(['relationship', 'following']) || account.getIn(['relationship', 'requested'])) {\n        if (unfollowModal) {\n          dispatch(openModal('CONFIRM', {\n            message: /*#__PURE__*/React.createElement(FormattedMessage, {\n              id: \"confirmations.unfollow.message\",\n              defaultMessage: \"Are you sure you want to unfollow {name}?\",\n              values: {\n                name: /*#__PURE__*/React.createElement(\"strong\", {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 60,\n                    columnNumber: 33\n                  }\n                }, \"@\", account.get('acct'))\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 15\n              }\n            }),\n            confirm: intl.formatMessage(messages.unfollowConfirm),\n            onConfirm: function onConfirm() {\n              return dispatch(unfollowAccount(account.get('id')));\n            }\n          }));\n        } else {\n          dispatch(unfollowAccount(account.get('id')));\n        }\n      } else {\n        dispatch(followAccount(account.get('id')));\n      }\n    },\n\n    onBlock(account) {\n      if (account.getIn(['relationship', 'blocking'])) {\n        dispatch(unblockAccount(account.get('id')));\n      } else {\n        dispatch(blockAccount(account.get('id')));\n      }\n    },\n\n    onMute(account) {\n      if (account.getIn(['relationship', 'muting'])) {\n        dispatch(unmuteAccount(account.get('id')));\n      } else {\n        dispatch(initMuteModal(account));\n      }\n    }\n\n  };\n};\n\nvar AccountCard = (_dec = connect(makeMapStateToProps, mapDispatchToProps), injectIntl(_class = _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(AccountCard, _ImmutablePureCompone);\n\n  function AccountCard() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n\n    _this.handleMouseEnter = function (_ref3) {\n      var currentTarget = _ref3.currentTarget;\n\n      if (autoPlayGif) {\n        return;\n      }\n\n      var emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n      for (var i = 0; i < emojis.length; i++) {\n        var emoji = emojis[i];\n        emoji.src = emoji.getAttribute('data-original');\n      }\n    };\n\n    _this.handleMouseLeave = function (_ref4) {\n      var currentTarget = _ref4.currentTarget;\n\n      if (autoPlayGif) {\n        return;\n      }\n\n      var emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n      for (var i = 0; i < emojis.length; i++) {\n        var emoji = emojis[i];\n        emoji.src = emoji.getAttribute('data-static');\n      }\n    };\n\n    _this.handleFollow = function () {\n      _this.props.onFollow(_this.props.account);\n    };\n\n    _this.handleBlock = function () {\n      _this.props.onBlock(_this.props.account);\n    };\n\n    _this.handleMute = function () {\n      _this.props.onMute(_this.props.account);\n    };\n\n    return _this;\n  }\n\n  var _proto = AccountCard.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        account = _this$props.account,\n        intl = _this$props.intl;\n    var buttons;\n\n    if (account.get('id') !== me && account.get('relationship', null) !== null) {\n      var following = account.getIn(['relationship', 'following']);\n      var requested = account.getIn(['relationship', 'requested']);\n      var blocking = account.getIn(['relationship', 'blocking']);\n      var muting = account.getIn(['relationship', 'muting']);\n\n      if (requested) {\n        buttons = /*#__PURE__*/React.createElement(IconButton, {\n          disabled: true,\n          icon: \"hourglass\",\n          title: intl.formatMessage(messages.requested),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }\n        });\n      } else if (blocking) {\n        buttons = /*#__PURE__*/React.createElement(IconButton, {\n          active: true,\n          icon: \"unlock\",\n          title: intl.formatMessage(messages.unblock, {\n            name: account.get('username')\n          }),\n          onClick: this.handleBlock,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 11\n          }\n        });\n      } else if (muting) {\n        buttons = /*#__PURE__*/React.createElement(IconButton, {\n          active: true,\n          icon: \"volume-up\",\n          title: intl.formatMessage(messages.unmute, {\n            name: account.get('username')\n          }),\n          onClick: this.handleMute,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 11\n          }\n        });\n      } else if (!account.get('moved') || following) {\n        buttons = /*#__PURE__*/React.createElement(IconButton, {\n          icon: following ? 'user-times' : 'user-plus',\n          title: intl.formatMessage(following ? messages.unfollow : messages.follow),\n          onClick: this.handleFollow,\n          active: following,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 11\n          }\n        });\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"directory__card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"directory__card__img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: autoPlayGif ? account.get('header') : account.get('header_static'),\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"directory__card__bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Permalink, {\n      className: \"directory__card__bar__name\",\n      href: account.get('url'),\n      to: \"/accounts/\" + account.get('id'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      account: account,\n      size: 48,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DisplayName, {\n      account: account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"directory__card__bar__relationship account__relationship\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }\n    }, buttons)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"directory__card__extra\",\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__content translate\",\n      dangerouslySetInnerHTML: {\n        __html: account.get('note_emojified')\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"directory__card__extra\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"accounts-table__count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ShortNumber, {\n      value: account.get('statuses_count'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"account.posts\",\n      defaultMessage: \"Toots\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"accounts-table__count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ShortNumber, {\n      value: account.get('followers_count'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }\n    }), ' ', /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"account.followers\",\n      defaultMessage: \"Followers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"accounts-table__count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }, account.get('last_status_at') === null ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"account.never_active\",\n      defaultMessage: \"Never\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(RelativeTimestamp, {\n      timestamp: account.get('last_status_at'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 15\n      }\n    }), ' ', /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"account.last_status\",\n      defaultMessage: \"Last active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 15\n      }\n    })))));\n  };\n\n  return AccountCard;\n}(ImmutablePureComponent), _class2.propTypes = {\n  account: ImmutablePropTypes.map.isRequired,\n  intl: PropTypes.object.isRequired,\n  onFollow: PropTypes.func.isRequired,\n  onBlock: PropTypes.func.isRequired,\n  onMute: PropTypes.func.isRequired\n}, _temp)) || _class) || _class);\nexport { AccountCard as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/directory/components/account_card.js"],"names":["React","ImmutablePureComponent","ImmutablePropTypes","PropTypes","connect","makeGetAccount","Avatar","DisplayName","Permalink","RelativeTimestamp","IconButton","FormattedMessage","injectIntl","defineMessages","autoPlayGif","me","unfollowModal","ShortNumber","followAccount","unfollowAccount","blockAccount","unblockAccount","unmuteAccount","openModal","initMuteModal","messages","follow","unfollow","requested","unblock","unmute","unfollowConfirm","makeMapStateToProps","getAccount","mapStateToProps","state","id","account","mapDispatchToProps","dispatch","intl","onFollow","getIn","message","name","get","confirm","formatMessage","onConfirm","onBlock","onMute","AccountCard","handleMouseEnter","currentTarget","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","handleFollow","props","handleBlock","handleMute","render","buttons","following","blocking","muting","__html","propTypes","map","isRequired","object","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport Avatar from 'mastodon/components/avatar';\nimport DisplayName from 'mastodon/components/display_name';\nimport Permalink from 'mastodon/components/permalink';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\nimport IconButton from 'mastodon/components/icon_button';\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl';\nimport { autoPlayGif, me, unfollowModal } from 'mastodon/initial_state';\nimport ShortNumber from 'mastodon/components/short_number';\nimport {\n  followAccount,\n  unfollowAccount,\n  blockAccount,\n  unblockAccount,\n  unmuteAccount,\n} from 'mastodon/actions/accounts';\nimport { openModal } from 'mastodon/actions/modal';\nimport { initMuteModal } from 'mastodon/actions/mutes';\n\nconst messages = defineMessages({\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n  requested: { id: 'account.requested', defaultMessage: 'Awaiting approval' },\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  unfollowConfirm: {\n    id: 'confirmations.unfollow.confirm',\n    defaultMessage: 'Unfollow',\n  },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { id }) => ({\n    account: getAccount(state, id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onFollow(account) {\n    if (\n      account.getIn(['relationship', 'following']) ||\n      account.getIn(['relationship', 'requested'])\n    ) {\n      if (unfollowModal) {\n        dispatch(\n          openModal('CONFIRM', {\n            message: (\n              <FormattedMessage\n                id='confirmations.unfollow.message'\n                defaultMessage='Are you sure you want to unfollow {name}?'\n                values={{ name: <strong>@{account.get('acct')}</strong> }}\n              />\n            ),\n            confirm: intl.formatMessage(messages.unfollowConfirm),\n            onConfirm: () => dispatch(unfollowAccount(account.get('id'))),\n          }),\n        );\n      } else {\n        dispatch(unfollowAccount(account.get('id')));\n      }\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  },\n\n  onBlock(account) {\n    if (account.getIn(['relationship', 'blocking'])) {\n      dispatch(unblockAccount(account.get('id')));\n    } else {\n      dispatch(blockAccount(account.get('id')));\n    }\n  },\n\n  onMute(account) {\n    if (account.getIn(['relationship', 'muting'])) {\n      dispatch(unmuteAccount(account.get('id')));\n    } else {\n      dispatch(initMuteModal(account));\n    }\n  },\n});\n\nexport default\n@injectIntl\n@connect(makeMapStateToProps, mapDispatchToProps)\nclass AccountCard extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    onFollow: PropTypes.func.isRequired,\n    onBlock: PropTypes.func.isRequired,\n    onMute: PropTypes.func.isRequired,\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  handleFollow = () => {\n    this.props.onFollow(this.props.account);\n  };\n\n  handleBlock = () => {\n    this.props.onBlock(this.props.account);\n  };\n\n  handleMute = () => {\n    this.props.onMute(this.props.account);\n  };\n\n  render() {\n    const { account, intl } = this.props;\n\n    let buttons;\n\n    if (\n      account.get('id') !== me &&\n      account.get('relationship', null) !== null\n    ) {\n      const following = account.getIn(['relationship', 'following']);\n      const requested = account.getIn(['relationship', 'requested']);\n      const blocking = account.getIn(['relationship', 'blocking']);\n      const muting = account.getIn(['relationship', 'muting']);\n\n      if (requested) {\n        buttons = (\n          <IconButton\n            disabled\n            icon='hourglass'\n            title={intl.formatMessage(messages.requested)}\n          />\n        );\n      } else if (blocking) {\n        buttons = (\n          <IconButton\n            active\n            icon='unlock'\n            title={intl.formatMessage(messages.unblock, {\n              name: account.get('username'),\n            })}\n            onClick={this.handleBlock}\n          />\n        );\n      } else if (muting) {\n        buttons = (\n          <IconButton\n            active\n            icon='volume-up'\n            title={intl.formatMessage(messages.unmute, {\n              name: account.get('username'),\n            })}\n            onClick={this.handleMute}\n          />\n        );\n      } else if (!account.get('moved') || following) {\n        buttons = (\n          <IconButton\n            icon={following ? 'user-times' : 'user-plus'}\n            title={intl.formatMessage(\n              following ? messages.unfollow : messages.follow,\n            )}\n            onClick={this.handleFollow}\n            active={following}\n          />\n        );\n      }\n    }\n\n    return (\n      <div className='directory__card'>\n        <div className='directory__card__img'>\n          <img\n            src={\n              autoPlayGif ? account.get('header') : account.get('header_static')\n            }\n            alt=''\n          />\n        </div>\n\n        <div className='directory__card__bar'>\n          <Permalink\n            className='directory__card__bar__name'\n            href={account.get('url')}\n            to={`/accounts/${account.get('id')}`}\n          >\n            <Avatar account={account} size={48} />\n            <DisplayName account={account} />\n          </Permalink>\n\n          <div className='directory__card__bar__relationship account__relationship'>\n            {buttons}\n          </div>\n        </div>\n\n        <div className='directory__card__extra' onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n          <div\n            className='account__header__content translate'\n            dangerouslySetInnerHTML={{ __html: account.get('note_emojified') }}\n          />\n        </div>\n\n        <div className='directory__card__extra'>\n          <div className='accounts-table__count'>\n            <ShortNumber value={account.get('statuses_count')} />\n            <small>\n              <FormattedMessage id='account.posts' defaultMessage='Toots' />\n            </small>\n          </div>\n          <div className='accounts-table__count'>\n            <ShortNumber value={account.get('followers_count')} />{' '}\n            <small>\n              <FormattedMessage\n                id='account.followers'\n                defaultMessage='Followers'\n              />\n            </small>\n          </div>\n          <div className='accounts-table__count'>\n            {account.get('last_status_at') === null ? (\n              <FormattedMessage\n                id='account.never_active'\n                defaultMessage='Never'\n              />\n            ) : (\n              <RelativeTimestamp timestamp={account.get('last_status_at')} />\n            )}{' '}\n            <small>\n              <FormattedMessage\n                id='account.last_status'\n                defaultMessage='Last active'\n              />\n            </small>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"account.follow","defaultMessage":"Follow"},{"id":"account.unfollow","defaultMessage":"Unfollow"},{"id":"account.requested","defaultMessage":"Awaiting approval"},{"id":"account.unblock","defaultMessage":"Unblock @{name}"},{"id":"account.unmute","defaultMessage":"Unmute @{name}"},{"id":"confirmations.unfollow.confirm","defaultMessage":"Unfollow"},{"id":"confirmations.unfollow.message","defaultMessage":"Are you sure you want to unfollow {name}?"},{"id":"account.posts","defaultMessage":"Toots"},{"id":"account.followers","defaultMessage":"Followers"},{"id":"account.never_active","defaultMessage":"Never"},{"id":"account.last_status","defaultMessage":"Last active"}]}},"sourceType":"module"}