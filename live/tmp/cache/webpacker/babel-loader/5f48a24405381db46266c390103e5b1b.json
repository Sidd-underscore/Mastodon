{"ast":null,"code":"import { connect } from 'react-redux';\nimport DetailedStatus from '../components/detailed_status';\nimport { makeGetStatus, makeGetPictureInPicture } from '../../../selectors';\nimport { replyCompose, mentionCompose, directCompose } from '../../../actions/compose';\nimport { reblog, favourite, unreblog, unfavourite, pin, unpin } from '../../../actions/interactions';\nimport { muteStatus, unmuteStatus, deleteStatus, hideStatus, revealStatus } from '../../../actions/statuses';\nimport { initMuteModal } from '../../../actions/mutes';\nimport { initBlockModal } from '../../../actions/blocks';\nimport { initBoostModal } from '../../../actions/boosts';\nimport { initReport } from '../../../actions/reports';\nimport { openModal } from '../../../actions/modal';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { boostModal, deleteModal } from '../../../initial_state';\nimport { showAlertForError } from '../../../actions/alerts';\nvar messages = defineMessages({\n  deleteConfirm: {\n    \"id\": \"confirmations.delete.confirm\",\n    \"defaultMessage\": \"Delete\"\n  },\n  deleteMessage: {\n    \"id\": \"confirmations.delete.message\",\n    \"defaultMessage\": \"Are you sure you want to delete this status?\"\n  },\n  redraftConfirm: {\n    \"id\": \"confirmations.redraft.confirm\",\n    \"defaultMessage\": \"Delete & redraft\"\n  },\n  redraftMessage: {\n    \"id\": \"confirmations.redraft.message\",\n    \"defaultMessage\": \"Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.\"\n  },\n  replyConfirm: {\n    \"id\": \"confirmations.reply.confirm\",\n    \"defaultMessage\": \"Reply\"\n  },\n  replyMessage: {\n    \"id\": \"confirmations.reply.message\",\n    \"defaultMessage\": \"Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?\"\n  }\n});\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var getStatus = makeGetStatus();\n  var getPictureInPicture = makeGetPictureInPicture();\n\n  var mapStateToProps = function mapStateToProps(state, props) {\n    return {\n      status: getStatus(state, props),\n      domain: state.getIn(['meta', 'domain']),\n      pictureInPicture: getPictureInPicture(state, props)\n    };\n  };\n\n  return mapStateToProps;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {\n  var intl = _ref.intl;\n  return {\n    onReply(status, router) {\n      dispatch(function (_, getState) {\n        var state = getState();\n\n        if (state.getIn(['compose', 'text']).trim().length !== 0) {\n          dispatch(openModal('CONFIRM', {\n            message: intl.formatMessage(messages.replyMessage),\n            confirm: intl.formatMessage(messages.replyConfirm),\n            onConfirm: function onConfirm() {\n              return dispatch(replyCompose(status, router));\n            }\n          }));\n        } else {\n          dispatch(replyCompose(status, router));\n        }\n      });\n    },\n\n    onModalReblog(status, privacy) {\n      dispatch(reblog(status, privacy));\n    },\n\n    onReblog(status, e) {\n      if (status.get('reblogged')) {\n        dispatch(unreblog(status));\n      } else {\n        if (e.shiftKey || !boostModal) {\n          this.onModalReblog(status);\n        } else {\n          dispatch(initBoostModal({\n            status,\n            onReblog: this.onModalReblog\n          }));\n        }\n      }\n    },\n\n    onFavourite(status) {\n      if (status.get('favourited')) {\n        dispatch(unfavourite(status));\n      } else {\n        dispatch(favourite(status));\n      }\n    },\n\n    onPin(status) {\n      if (status.get('pinned')) {\n        dispatch(unpin(status));\n      } else {\n        dispatch(pin(status));\n      }\n    },\n\n    onEmbed(status) {\n      dispatch(openModal('EMBED', {\n        url: status.get('url'),\n        onError: function onError(error) {\n          return dispatch(showAlertForError(error));\n        }\n      }));\n    },\n\n    onDelete(status, history, withRedraft) {\n      if (withRedraft === void 0) {\n        withRedraft = false;\n      }\n\n      if (!deleteModal) {\n        dispatch(deleteStatus(status.get('id'), history, withRedraft));\n      } else {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n          confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n          onConfirm: function onConfirm() {\n            return dispatch(deleteStatus(status.get('id'), history, withRedraft));\n          }\n        }));\n      }\n    },\n\n    onDirect(account, router) {\n      dispatch(directCompose(account, router));\n    },\n\n    onMention(account, router) {\n      dispatch(mentionCompose(account, router));\n    },\n\n    onOpenMedia(media, index) {\n      dispatch(openModal('MEDIA', {\n        media,\n        index\n      }));\n    },\n\n    onOpenVideo(media, options) {\n      dispatch(openModal('VIDEO', {\n        media,\n        options\n      }));\n    },\n\n    onBlock(status) {\n      var account = status.get('account');\n      dispatch(initBlockModal(account));\n    },\n\n    onReport(status) {\n      dispatch(initReport(status.get('account'), status));\n    },\n\n    onMute(account) {\n      dispatch(initMuteModal(account));\n    },\n\n    onMuteConversation(status) {\n      if (status.get('muted')) {\n        dispatch(unmuteStatus(status.get('id')));\n      } else {\n        dispatch(muteStatus(status.get('id')));\n      }\n    },\n\n    onToggleHidden(status) {\n      if (status.get('hidden')) {\n        dispatch(revealStatus(status.get('id')));\n      } else {\n        dispatch(hideStatus(status.get('id')));\n      }\n    }\n\n  };\n};\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(DetailedStatus));","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/status/containers/detailed_status_container.js"],"names":["connect","DetailedStatus","makeGetStatus","makeGetPictureInPicture","replyCompose","mentionCompose","directCompose","reblog","favourite","unreblog","unfavourite","pin","unpin","muteStatus","unmuteStatus","deleteStatus","hideStatus","revealStatus","initMuteModal","initBlockModal","initBoostModal","initReport","openModal","defineMessages","injectIntl","boostModal","deleteModal","showAlertForError","messages","deleteConfirm","deleteMessage","redraftConfirm","redraftMessage","replyConfirm","replyMessage","makeMapStateToProps","getStatus","getPictureInPicture","mapStateToProps","state","props","status","domain","getIn","pictureInPicture","mapDispatchToProps","dispatch","intl","onReply","router","_","getState","trim","length","message","formatMessage","confirm","onConfirm","onModalReblog","privacy","onReblog","e","get","shiftKey","onFavourite","onPin","onEmbed","url","onError","error","onDelete","history","withRedraft","onDirect","account","onMention","onOpenMedia","media","index","onOpenVideo","options","onBlock","onReport","onMute","onMuteConversation","onToggleHidden"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport DetailedStatus from '../components/detailed_status';\nimport { makeGetStatus, makeGetPictureInPicture } from '../../../selectors';\nimport {\n  replyCompose,\n  mentionCompose,\n  directCompose,\n} from '../../../actions/compose';\nimport {\n  reblog,\n  favourite,\n  unreblog,\n  unfavourite,\n  pin,\n  unpin,\n} from '../../../actions/interactions';\nimport {\n  muteStatus,\n  unmuteStatus,\n  deleteStatus,\n  hideStatus,\n  revealStatus,\n} from '../../../actions/statuses';\nimport { initMuteModal } from '../../../actions/mutes';\nimport { initBlockModal } from '../../../actions/blocks';\nimport { initBoostModal } from '../../../actions/boosts';\nimport { initReport } from '../../../actions/reports';\nimport { openModal } from '../../../actions/modal';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { boostModal, deleteModal } from '../../../initial_state';\nimport { showAlertForError } from '../../../actions/alerts';\n\nconst messages = defineMessages({\n  deleteConfirm: { id: 'confirmations.delete.confirm', defaultMessage: 'Delete' },\n  deleteMessage: { id: 'confirmations.delete.message', defaultMessage: 'Are you sure you want to delete this status?' },\n  redraftConfirm: { id: 'confirmations.redraft.confirm', defaultMessage: 'Delete & redraft' },\n  redraftMessage: { id: 'confirmations.redraft.message', defaultMessage: 'Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n  const getPictureInPicture = makeGetPictureInPicture();\n\n  const mapStateToProps = (state, props) => ({\n    status: getStatus(state, props),\n    domain: state.getIn(['meta', 'domain']),\n    pictureInPicture: getPictureInPicture(state, props),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onReply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: () => dispatch(replyCompose(status, router)),\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  onModalReblog (status, privacy) {\n    dispatch(reblog(status, privacy));\n  },\n\n  onReblog (status, e) {\n    if (status.get('reblogged')) {\n      dispatch(unreblog(status));\n    } else {\n      if (e.shiftKey || !boostModal) {\n        this.onModalReblog(status);\n      } else {\n        dispatch(initBoostModal({ status, onReblog: this.onModalReblog }));\n      }\n    }\n  },\n\n  onFavourite (status) {\n    if (status.get('favourited')) {\n      dispatch(unfavourite(status));\n    } else {\n      dispatch(favourite(status));\n    }\n  },\n\n  onPin (status) {\n    if (status.get('pinned')) {\n      dispatch(unpin(status));\n    } else {\n      dispatch(pin(status));\n    }\n  },\n\n  onEmbed (status) {\n    dispatch(openModal('EMBED', {\n      url: status.get('url'),\n      onError: error => dispatch(showAlertForError(error)),\n    }));\n  },\n\n  onDelete (status, history, withRedraft = false) {\n    if (!deleteModal) {\n      dispatch(deleteStatus(status.get('id'), history, withRedraft));\n    } else {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n        confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n        onConfirm: () => dispatch(deleteStatus(status.get('id'), history, withRedraft)),\n      }));\n    }\n  },\n\n  onDirect (account, router) {\n    dispatch(directCompose(account, router));\n  },\n\n  onMention (account, router) {\n    dispatch(mentionCompose(account, router));\n  },\n\n  onOpenMedia (media, index) {\n    dispatch(openModal('MEDIA', { media, index }));\n  },\n\n  onOpenVideo (media, options) {\n    dispatch(openModal('VIDEO', { media, options }));\n  },\n\n  onBlock (status) {\n    const account = status.get('account');\n    dispatch(initBlockModal(account));\n  },\n\n  onReport (status) {\n    dispatch(initReport(status.get('account'), status));\n  },\n\n  onMute (account) {\n    dispatch(initMuteModal(account));\n  },\n\n  onMuteConversation (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(DetailedStatus));\n"]},"metadata":{"react-intl":{"messages":[{"id":"confirmations.delete.confirm","defaultMessage":"Delete"},{"id":"confirmations.delete.message","defaultMessage":"Are you sure you want to delete this status?"},{"id":"confirmations.redraft.confirm","defaultMessage":"Delete & redraft"},{"id":"confirmations.redraft.message","defaultMessage":"Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned."},{"id":"confirmations.reply.confirm","defaultMessage":"Reply"},{"id":"confirmations.reply.message","defaultMessage":"Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?"}]}},"sourceType":"module"}