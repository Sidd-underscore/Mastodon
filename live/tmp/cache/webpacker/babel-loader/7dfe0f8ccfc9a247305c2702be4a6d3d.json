{"ast":null,"code":"// @ts-check\nexport var PICTURE_IN_PICTURE_DEPLOY = 'PICTURE_IN_PICTURE_DEPLOY';\nexport var PICTURE_IN_PICTURE_REMOVE = 'PICTURE_IN_PICTURE_REMOVE';\n/**\n * @typedef MediaProps\n * @property {string} src\n * @property {boolean} muted\n * @property {number} volume\n * @property {number} currentTime\n * @property {string} poster\n * @property {string} backgroundColor\n * @property {string} foregroundColor\n * @property {string} accentColor\n */\n\n/**\n * @param {string} statusId\n * @param {string} accountId\n * @param {string} playerType\n * @param {MediaProps} props\n * @return {object}\n */\n\nexport var deployPictureInPicture = function deployPictureInPicture(statusId, accountId, playerType, props) {\n  return function (dispatch, getState) {\n    // Do not open a player for a toot that does not exist\n    if (getState().hasIn(['statuses', statusId])) {\n      dispatch({\n        type: PICTURE_IN_PICTURE_DEPLOY,\n        statusId,\n        accountId,\n        playerType,\n        props\n      });\n    }\n  };\n};\n/*\n * @return {object}\n */\n\nexport var removePictureInPicture = function removePictureInPicture() {\n  return {\n    type: PICTURE_IN_PICTURE_REMOVE\n  };\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/picture_in_picture.js"],"names":["PICTURE_IN_PICTURE_DEPLOY","PICTURE_IN_PICTURE_REMOVE","deployPictureInPicture","statusId","accountId","playerType","props","dispatch","getState","hasIn","type","removePictureInPicture"],"mappings":"AAAA;AAEA,OAAO,IAAMA,yBAAyB,GAAG,2BAAlC;AACP,OAAO,IAAMC,yBAAyB,GAAG,2BAAlC;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD,EAAWC,SAAX,EAAsBC,UAAtB,EAAkCC,KAAlC,EAA4C;AAChF,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7B;AACA,QAAIA,QAAQ,GAAGC,KAAX,CAAiB,CAAC,UAAD,EAAaN,QAAb,CAAjB,CAAJ,EAA8C;AAC5CI,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEV,yBADC;AAEPG,QAAAA,QAFO;AAGPC,QAAAA,SAHO;AAIPC,QAAAA,UAJO;AAKPC,QAAAA;AALO,OAAD,CAAR;AAOD;AACF,GAXD;AAYD,CAbM;AAeP;AACA;AACA;;AACA,OAAO,IAAMK,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,SAAO;AAC3CD,IAAAA,IAAI,EAAET;AADqC,GAAP;AAAA,CAA/B","sourcesContent":["// @ts-check\n\nexport const PICTURE_IN_PICTURE_DEPLOY = 'PICTURE_IN_PICTURE_DEPLOY';\nexport const PICTURE_IN_PICTURE_REMOVE = 'PICTURE_IN_PICTURE_REMOVE';\n\n/**\n * @typedef MediaProps\n * @property {string} src\n * @property {boolean} muted\n * @property {number} volume\n * @property {number} currentTime\n * @property {string} poster\n * @property {string} backgroundColor\n * @property {string} foregroundColor\n * @property {string} accentColor\n */\n\n/**\n * @param {string} statusId\n * @param {string} accountId\n * @param {string} playerType\n * @param {MediaProps} props\n * @return {object}\n */\nexport const deployPictureInPicture = (statusId, accountId, playerType, props) => {\n  return (dispatch, getState) => {\n    // Do not open a player for a toot that does not exist\n    if (getState().hasIn(['statuses', statusId])) {\n      dispatch({\n        type: PICTURE_IN_PICTURE_DEPLOY,\n        statusId,\n        accountId,\n        playerType,\n        props,\n      });\n    }\n  };\n};\n\n/*\n * @return {object}\n */\nexport const removePictureInPicture = () => ({\n  type: PICTURE_IN_PICTURE_REMOVE,\n});\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}