{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/account_timeline/index.js\",\n    _this = this,\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { fetchAccount } from '../../actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from '../../actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport HeaderContainer from './containers/header_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchAccountIdentityProofs } from '../../actions/identity_proofs';\nimport MissingIndicator from 'mastodon/components/missing_indicator';\nimport TimelineHint from 'mastodon/components/timeline_hint';\nimport { me } from 'mastodon/initial_state';\nimport { connectTimeline, disconnectTimeline } from 'mastodon/actions/timelines';\nvar emptyList = ImmutableList();\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var accountId = _ref.params.accountId,\n      _ref$withReplies = _ref.withReplies,\n      withReplies = _ref$withReplies === void 0 ? false : _ref$withReplies;\n  var path = withReplies ? accountId + \":with_replies\" : accountId;\n  return {\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', \"account:\" + path, 'items'], emptyList),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', \"account:\" + accountId + \":pinned\", 'items'], emptyList),\n    isLoading: state.getIn(['timelines', \"account:\" + path, 'isLoading']),\n    hasMore: state.getIn(['timelines', \"account:\" + path, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false)\n  };\n};\n\nvar RemoteHint = function RemoteHint(_ref2) {\n  var url = _ref2.url;\n  return /*#__PURE__*/React.createElement(TimelineHint, {\n    url: url,\n    resource: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"timeline_hint.resources.statuses\",\n      defaultMessage: \"Older toots\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 37\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 3\n    }\n  });\n};\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired\n};\nvar AccountTimeline = (_dec = connect(mapStateToProps), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(AccountTimeline, _ImmutablePureCompone);\n\n  function AccountTimeline() {\n    var _this2;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n\n    _this2.handleLoadMore = function (maxId) {\n      _this2.props.dispatch(expandAccountTimeline(_this2.props.params.accountId, {\n        maxId,\n        withReplies: _this2.props.withReplies\n      }));\n    };\n\n    return _this2;\n  }\n\n  var _proto = AccountTimeline.prototype;\n\n  _proto.componentWillMount = function componentWillMount() {\n    var _this$props = this.props,\n        accountId = _this$props.params.accountId,\n        withReplies = _this$props.withReplies,\n        dispatch = _this$props.dispatch;\n    dispatch(fetchAccount(accountId));\n    dispatch(fetchAccountIdentityProofs(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId));\n    }\n\n    dispatch(expandAccountTimeline(accountId, {\n      withReplies\n    }));\n\n    if (accountId === me) {\n      dispatch(connectTimeline(\"account:\" + me));\n    }\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var dispatch = this.props.dispatch;\n\n    if (nextProps.params.accountId !== this.props.params.accountId && nextProps.params.accountId || nextProps.withReplies !== this.props.withReplies) {\n      dispatch(fetchAccount(nextProps.params.accountId));\n      dispatch(fetchAccountIdentityProofs(nextProps.params.accountId));\n\n      if (!nextProps.withReplies) {\n        dispatch(expandAccountFeaturedTimeline(nextProps.params.accountId));\n      }\n\n      dispatch(expandAccountTimeline(nextProps.params.accountId, {\n        withReplies: nextProps.params.withReplies\n      }));\n    }\n\n    if (nextProps.params.accountId === me && this.props.params.accountId !== me) {\n      dispatch(connectTimeline(\"account:\" + me));\n    } else if (this.props.params.accountId === me && nextProps.params.accountId !== me) {\n      dispatch(disconnectTimeline(\"account:\" + me));\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var _this$props2 = this.props,\n        dispatch = _this$props2.dispatch,\n        accountId = _this$props2.params.accountId;\n\n    if (accountId === me) {\n      dispatch(disconnectTimeline(\"account:\" + me));\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        statusIds = _this$props3.statusIds,\n        featuredStatusIds = _this$props3.featuredStatusIds,\n        isLoading = _this$props3.isLoading,\n        hasMore = _this$props3.hasMore,\n        blockedBy = _this$props3.blockedBy,\n        suspended = _this$props3.suspended,\n        isAccount = _this$props3.isAccount,\n        multiColumn = _this$props3.multiColumn,\n        remote = _this$props3.remote,\n        remoteUrl = _this$props3.remoteUrl;\n\n    if (!isAccount) {\n      return /*#__PURE__*/React.createElement(Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ColumnBackButton, {\n        multiColumn: multiColumn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(MissingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    if (!statusIds && isLoading) {\n      return /*#__PURE__*/React.createElement(Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(LoadingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    var emptyMessage;\n\n    if (suspended) {\n      emptyMessage = /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"empty_column.account_suspended\",\n        defaultMessage: \"Account suspended\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 22\n        }\n      });\n    } else if (blockedBy) {\n      emptyMessage = /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"empty_column.account_unavailable\",\n        defaultMessage: \"Profile unavailable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 22\n        }\n      });\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = /*#__PURE__*/React.createElement(RemoteHint, {\n        url: remoteUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 22\n        }\n      });\n    } else {\n      emptyMessage = /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"empty_column.account_timeline\",\n        defaultMessage: \"No toots here!\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 22\n        }\n      });\n    }\n\n    var remoteMessage = remote ? /*#__PURE__*/React.createElement(RemoteHint, {\n      url: remoteUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 36\n      }\n    }) : null;\n    return /*#__PURE__*/React.createElement(Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnBackButton, {\n      multiColumn: multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(StatusList, {\n      prepend: /*#__PURE__*/React.createElement(HeaderContainer, {\n        accountId: this.props.params.accountId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 20\n        }\n      }),\n      alwaysPrepend: true,\n      append: remoteMessage,\n      scrollKey: \"account_timeline\",\n      statusIds: suspended || blockedBy ? emptyList : statusIds,\n      featuredStatusIds: featuredStatusIds,\n      isLoading: isLoading,\n      hasMore: hasMore,\n      onLoadMore: this.handleLoadMore,\n      emptyMessage: emptyMessage,\n      bindToDocument: !multiColumn,\n      timelineId: \"account\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return AccountTimeline;\n}(ImmutablePureComponent), _class2.propTypes = {\n  params: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  statusIds: ImmutablePropTypes.list,\n  featuredStatusIds: ImmutablePropTypes.list,\n  isLoading: PropTypes.bool,\n  hasMore: PropTypes.bool,\n  withReplies: PropTypes.bool,\n  blockedBy: PropTypes.bool,\n  isAccount: PropTypes.bool,\n  suspended: PropTypes.bool,\n  remote: PropTypes.bool,\n  remoteUrl: PropTypes.string,\n  multiColumn: PropTypes.bool\n}, _temp)) || _class);\nexport { AccountTimeline as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/account_timeline/index.js"],"names":["React","connect","ImmutablePropTypes","PropTypes","fetchAccount","expandAccountFeaturedTimeline","expandAccountTimeline","StatusList","LoadingIndicator","Column","HeaderContainer","ColumnBackButton","List","ImmutableList","ImmutablePureComponent","FormattedMessage","fetchAccountIdentityProofs","MissingIndicator","TimelineHint","me","connectTimeline","disconnectTimeline","emptyList","mapStateToProps","state","accountId","params","withReplies","path","remote","getIn","remoteUrl","isAccount","statusIds","featuredStatusIds","isLoading","hasMore","suspended","blockedBy","RemoteHint","url","propTypes","string","isRequired","AccountTimeline","handleLoadMore","maxId","props","dispatch","componentWillMount","componentWillReceiveProps","nextProps","componentWillUnmount","render","multiColumn","emptyMessage","isEmpty","remoteMessage","object","func","list","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { fetchAccount } from '../../actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from '../../actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport HeaderContainer from './containers/header_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchAccountIdentityProofs } from '../../actions/identity_proofs';\nimport MissingIndicator from 'mastodon/components/missing_indicator';\nimport TimelineHint from 'mastodon/components/timeline_hint';\nimport { me } from 'mastodon/initial_state';\nimport { connectTimeline, disconnectTimeline } from 'mastodon/actions/timelines';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { accountId }, withReplies = false }) => {\n  const path = withReplies ? `${accountId}:with_replies` : accountId;\n\n  return {\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], emptyList),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned`, 'items'], emptyList),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore: state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.statuses' defaultMessage='Older toots' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    const { params: { accountId }, withReplies, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n    dispatch(fetchAccountIdentityProofs(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId));\n    }\n\n    dispatch(expandAccountTimeline(accountId, { withReplies }));\n\n    if (accountId === me) {\n      dispatch(connectTimeline(`account:${me}`));\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n\n    if ((nextProps.params.accountId !== this.props.params.accountId && nextProps.params.accountId) || nextProps.withReplies !== this.props.withReplies) {\n      dispatch(fetchAccount(nextProps.params.accountId));\n      dispatch(fetchAccountIdentityProofs(nextProps.params.accountId));\n\n      if (!nextProps.withReplies) {\n        dispatch(expandAccountFeaturedTimeline(nextProps.params.accountId));\n      }\n\n      dispatch(expandAccountTimeline(nextProps.params.accountId, { withReplies: nextProps.params.withReplies }));\n    }\n\n    if (nextProps.params.accountId === me && this.props.params.accountId !== me) {\n      dispatch(connectTimeline(`account:${me}`));\n    } else if (this.props.params.accountId === me && nextProps.params.accountId !== me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch, params: { accountId } } = this.props;\n\n    if (accountId === me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.params.accountId, { maxId, withReplies: this.props.withReplies }));\n  }\n\n  render () {\n    const { statusIds, featuredStatusIds, isLoading, hasMore, blockedBy, suspended, isAccount, multiColumn, remote, remoteUrl } = this.props;\n\n    if (!isAccount) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (!statusIds && isLoading) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No toots here!' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column>\n        <ColumnBackButton multiColumn={multiColumn} />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.params.accountId} />}\n          alwaysPrepend\n          append={remoteMessage}\n          scrollKey='account_timeline'\n          statusIds={(suspended || blockedBy) ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n        />\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"timeline_hint.resources.statuses","defaultMessage":"Older toots"},{"id":"empty_column.account_suspended","defaultMessage":"Account suspended"},{"id":"empty_column.account_unavailable","defaultMessage":"Profile unavailable"},{"id":"empty_column.account_timeline","defaultMessage":"No toots here!"}]}},"sourceType":"module"}