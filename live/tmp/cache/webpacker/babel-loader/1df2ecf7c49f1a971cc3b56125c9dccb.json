{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/status/components/card.js\";\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport punycode from 'punycode';\nimport classnames from 'classnames';\nimport Icon from 'mastodon/components/icon';\nimport { useBlurhash } from 'mastodon/initial_state';\nimport Blurhash from 'mastodon/components/blurhash';\nimport { debounce } from 'lodash';\nvar IDNA_PREFIX = 'xn--';\n\nvar decodeIDNA = function decodeIDNA(domain) {\n  return domain.split('.').map(function (part) {\n    return part.indexOf(IDNA_PREFIX) === 0 ? punycode.decode(part.slice(IDNA_PREFIX.length)) : part;\n  }).join('.');\n};\n\nvar getHostname = function getHostname(url) {\n  var parser = document.createElement('a');\n  parser.href = url;\n  return parser.hostname;\n};\n\nvar trim = function trim(text, len) {\n  var cut = text.indexOf(' ', len);\n\n  if (cut === -1) {\n    return text;\n  }\n\n  return text.substring(0, cut) + (text.length > len ? 'â€¦' : '');\n};\n\nvar domParser = new DOMParser();\n\nvar addAutoPlay = function addAutoPlay(html) {\n  var document = domParser.parseFromString(html, 'text/html').documentElement;\n  var iframe = document.querySelector('iframe');\n\n  if (iframe) {\n    if (iframe.src.indexOf('?') !== -1) {\n      iframe.src += '&';\n    } else {\n      iframe.src += '?';\n    }\n\n    iframe.src += 'autoplay=1&auto_play=1'; // DOM parser creates html/body elements around original HTML fragment,\n    // so we need to get innerHTML out of the body and not the entire document\n\n    return document.querySelector('body').innerHTML;\n  }\n\n  return html;\n};\n\nvar Card = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(Card, _React$PureComponent);\n\n  function Card() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n    _this.state = {\n      width: _this.props.defaultWidth || 280,\n      previewLoaded: false,\n      embedded: false,\n      revealed: !_this.props.sensitive\n    };\n    _this.handleResize = debounce(function () {\n      if (_this.node) {\n        _this._setDimensions();\n      }\n    }, 250, {\n      trailing: true\n    });\n\n    _this.handlePhotoClick = function () {\n      var _this$props = _this.props,\n          card = _this$props.card,\n          onOpenMedia = _this$props.onOpenMedia;\n      onOpenMedia(Immutable.fromJS([{\n        type: 'image',\n        url: card.get('embed_url'),\n        description: card.get('title'),\n        meta: {\n          original: {\n            width: card.get('width'),\n            height: card.get('height')\n          }\n        }\n      }]), 0);\n    };\n\n    _this.handleEmbedClick = function () {\n      var card = _this.props.card;\n\n      if (card.get('type') === 'photo') {\n        _this.handlePhotoClick();\n      } else {\n        _this.setState({\n          embedded: true\n        });\n      }\n    };\n\n    _this.setRef = function (c) {\n      _this.node = c;\n\n      if (_this.node) {\n        _this._setDimensions();\n      }\n    };\n\n    _this.handleImageLoad = function () {\n      _this.setState({\n        previewLoaded: true\n      });\n    };\n\n    _this.handleReveal = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.setState({\n        revealed: true\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = Card.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (!Immutable.is(this.props.card, nextProps.card)) {\n      this.setState({\n        embedded: false,\n        previewLoaded: false\n      });\n    }\n\n    if (this.props.sensitive !== nextProps.sensitive) {\n      this.setState({\n        revealed: !nextProps.sensitive\n      });\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    window.addEventListener('resize', this.handleResize, {\n      passive: true\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  };\n\n  _proto._setDimensions = function _setDimensions() {\n    var width = this.node.offsetWidth;\n\n    if (this.props.cacheWidth) {\n      this.props.cacheWidth(width);\n    }\n\n    this.setState({\n      width\n    });\n  };\n\n  _proto.renderVideo = function renderVideo() {\n    var card = this.props.card;\n    var content = {\n      __html: addAutoPlay(card.get('html'))\n    };\n    var width = this.state.width;\n    var ratio = card.get('width') / card.get('height');\n    var height = width / ratio;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.setRef,\n      className: \"status-card__image status-card-video\",\n      dangerouslySetInnerHTML: content,\n      style: {\n        height\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    });\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        card = _this$props2.card,\n        maxDescription = _this$props2.maxDescription,\n        compact = _this$props2.compact;\n    var _this$state = this.state,\n        width = _this$state.width,\n        embedded = _this$state.embedded,\n        revealed = _this$state.revealed;\n\n    if (card === null) {\n      return null;\n    }\n\n    var provider = card.get('provider_name').length === 0 ? decodeIDNA(getHostname(card.get('url'))) : card.get('provider_name');\n    var horizontal = !compact && card.get('width') > card.get('height') && card.get('width') + 100 >= width || card.get('type') !== 'link' || embedded;\n    var interactive = card.get('type') !== 'link';\n    var className = classnames('status-card', {\n      horizontal,\n      compact,\n      interactive\n    });\n    var title = interactive ? /*#__PURE__*/React.createElement(\"a\", {\n      className: \"status-card__title\",\n      href: card.get('url'),\n      title: card.get('title'),\n      rel: \"noopener noreferrer\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 39\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 164\n      }\n    }, card.get('title'))) : /*#__PURE__*/React.createElement(\"strong\", {\n      className: \"status-card__title\",\n      title: card.get('title'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 207\n      }\n    }, card.get('title'));\n    var ratio = card.get('width') / card.get('height');\n    var height = compact && !embedded ? width / (16 / 9) : width / ratio;\n    var description = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status-card__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 7\n      }\n    }, title, !(horizontal || compact) && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"status-card__description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 38\n      }\n    }, trim(card.get('description') || '', maxDescription)), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"status-card__host\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, provider));\n    var embed = '';\n    var canvas = /*#__PURE__*/React.createElement(Blurhash, {\n      className: classnames('status-card__image-preview', {\n        'status-card__image-preview--hidden': revealed && this.state.previewLoaded\n      }),\n      hash: card.get('blurhash'),\n      dummy: !useBlurhash,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }\n    });\n    var thumbnail = /*#__PURE__*/React.createElement(\"img\", {\n      src: card.get('image'),\n      alt: \"\",\n      style: {\n        width: horizontal ? width : null,\n        height: horizontal ? height : null,\n        visibility: revealed ? null : 'hidden'\n      },\n      onLoad: this.handleImageLoad,\n      className: \"status-card__image-image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }\n    });\n    var spoilerButton = /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleReveal,\n      className: \"spoiler-button__overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"spoiler-button__overlay__label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"status.sensitive_warning\",\n      defaultMessage: \"Sensitive content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 58\n      }\n    })));\n    spoilerButton = /*#__PURE__*/React.createElement(\"div\", {\n      className: classnames('spoiler-button', {\n        'spoiler-button--minified': revealed\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }\n    }, spoilerButton);\n\n    if (interactive) {\n      if (embedded) {\n        embed = this.renderVideo();\n      } else {\n        var iconVariant = 'play';\n\n        if (card.get('type') === 'photo') {\n          iconVariant = 'search-plus';\n        }\n\n        embed = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"status-card__image\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 11\n          }\n        }, canvas, thumbnail, revealed && /*#__PURE__*/React.createElement(\"div\", {\n          className: \"status-card__actions\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: this.handleEmbedClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          id: iconVariant,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 59\n          }\n        })), horizontal && /*#__PURE__*/React.createElement(\"a\", {\n          href: card.get('url'),\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 34\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          id: \"external-link\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 102\n          }\n        })))), !revealed && spoilerButton);\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        ref: this.setRef,\n        onClick: revealed ? null : this.handleReveal,\n        role: revealed ? 'button' : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 9\n        }\n      }, embed, !compact && description);\n    } else if (card.get('image')) {\n      embed = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"status-card__image\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 9\n        }\n      }, canvas, thumbnail);\n    } else {\n      embed = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"status-card__image\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        id: \"file-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"a\", {\n      href: card.get('url'),\n      className: className,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      ref: this.setRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 7\n      }\n    }, embed, description);\n  };\n\n  return Card;\n}(React.PureComponent);\n\nCard.propTypes = {\n  card: ImmutablePropTypes.map,\n  maxDescription: PropTypes.number,\n  onOpenMedia: PropTypes.func.isRequired,\n  compact: PropTypes.bool,\n  defaultWidth: PropTypes.number,\n  cacheWidth: PropTypes.func,\n  sensitive: PropTypes.bool\n};\nCard.defaultProps = {\n  maxDescription: 50,\n  compact: false\n};\nexport { Card as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/status/components/card.js"],"names":["React","PropTypes","Immutable","ImmutablePropTypes","FormattedMessage","punycode","classnames","Icon","useBlurhash","Blurhash","debounce","IDNA_PREFIX","decodeIDNA","domain","split","map","part","indexOf","decode","slice","length","join","getHostname","url","parser","document","createElement","href","hostname","trim","text","len","cut","substring","domParser","DOMParser","addAutoPlay","html","parseFromString","documentElement","iframe","querySelector","src","innerHTML","Card","state","width","props","defaultWidth","previewLoaded","embedded","revealed","sensitive","handleResize","node","_setDimensions","trailing","handlePhotoClick","card","onOpenMedia","fromJS","type","get","description","meta","original","height","handleEmbedClick","setState","setRef","c","handleImageLoad","handleReveal","e","preventDefault","stopPropagation","componentWillReceiveProps","nextProps","is","componentDidMount","window","addEventListener","passive","componentWillUnmount","removeEventListener","offsetWidth","cacheWidth","renderVideo","content","__html","ratio","render","maxDescription","compact","provider","horizontal","interactive","className","title","embed","canvas","thumbnail","visibility","spoilerButton","iconVariant","PureComponent","propTypes","number","func","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport punycode from 'punycode';\nimport classnames from 'classnames';\nimport Icon from 'mastodon/components/icon';\nimport { useBlurhash } from 'mastodon/initial_state';\nimport Blurhash from 'mastodon/components/blurhash';\nimport { debounce } from 'lodash';\n\nconst IDNA_PREFIX = 'xn--';\n\nconst decodeIDNA = domain => {\n  return domain\n    .split('.')\n    .map(part => part.indexOf(IDNA_PREFIX) === 0 ? punycode.decode(part.slice(IDNA_PREFIX.length)) : part)\n    .join('.');\n};\n\nconst getHostname = url => {\n  const parser = document.createElement('a');\n  parser.href = url;\n  return parser.hostname;\n};\n\nconst trim = (text, len) => {\n  const cut = text.indexOf(' ', len);\n\n  if (cut === -1) {\n    return text;\n  }\n\n  return text.substring(0, cut) + (text.length > len ? 'â€¦' : '');\n};\n\nconst domParser = new DOMParser();\n\nconst addAutoPlay = html => {\n  const document = domParser.parseFromString(html, 'text/html').documentElement;\n  const iframe = document.querySelector('iframe');\n\n  if (iframe) {\n    if (iframe.src.indexOf('?') !== -1) {\n      iframe.src += '&';\n    } else {\n      iframe.src += '?';\n    }\n\n    iframe.src += 'autoplay=1&auto_play=1';\n\n    // DOM parser creates html/body elements around original HTML fragment,\n    // so we need to get innerHTML out of the body and not the entire document\n    return document.querySelector('body').innerHTML;\n  }\n\n  return html;\n};\n\nexport default class Card extends React.PureComponent {\n\n  static propTypes = {\n    card: ImmutablePropTypes.map,\n    maxDescription: PropTypes.number,\n    onOpenMedia: PropTypes.func.isRequired,\n    compact: PropTypes.bool,\n    defaultWidth: PropTypes.number,\n    cacheWidth: PropTypes.func,\n    sensitive: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    maxDescription: 50,\n    compact: false,\n  };\n\n  state = {\n    width: this.props.defaultWidth || 280,\n    previewLoaded: false,\n    embedded: false,\n    revealed: !this.props.sensitive,\n  };\n\n  componentWillReceiveProps (nextProps) {\n    if (!Immutable.is(this.props.card, nextProps.card)) {\n      this.setState({ embedded: false, previewLoaded: false });\n    }\n    if (this.props.sensitive !== nextProps.sensitive) {\n      this.setState({ revealed: !nextProps.sensitive });\n    }\n  }\n\n  componentDidMount () {\n    window.addEventListener('resize', this.handleResize, { passive: true });\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  _setDimensions () {\n    const width = this.node.offsetWidth;\n\n    if (this.props.cacheWidth) {\n      this.props.cacheWidth(width);\n    }\n\n    this.setState({ width });\n  }\n\n  handleResize = debounce(() => {\n    if (this.node) {\n      this._setDimensions();\n    }\n  }, 250, {\n    trailing: true,\n  });\n\n  handlePhotoClick = () => {\n    const { card, onOpenMedia } = this.props;\n\n    onOpenMedia(\n      Immutable.fromJS([\n        {\n          type: 'image',\n          url: card.get('embed_url'),\n          description: card.get('title'),\n          meta: {\n            original: {\n              width: card.get('width'),\n              height: card.get('height'),\n            },\n          },\n        },\n      ]),\n      0,\n    );\n  };\n\n  handleEmbedClick = () => {\n    const { card } = this.props;\n\n    if (card.get('type') === 'photo') {\n      this.handlePhotoClick();\n    } else {\n      this.setState({ embedded: true });\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n\n    if (this.node) {\n      this._setDimensions();\n    }\n  }\n\n  handleImageLoad = () => {\n    this.setState({ previewLoaded: true });\n  }\n\n  handleReveal = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({ revealed: true });\n  }\n\n  renderVideo () {\n    const { card }  = this.props;\n    const content   = { __html: addAutoPlay(card.get('html')) };\n    const { width } = this.state;\n    const ratio     = card.get('width') / card.get('height');\n    const height    = width / ratio;\n\n    return (\n      <div\n        ref={this.setRef}\n        className='status-card__image status-card-video'\n        dangerouslySetInnerHTML={content}\n        style={{ height }}\n      />\n    );\n  }\n\n  render () {\n    const { card, maxDescription, compact } = this.props;\n    const { width, embedded, revealed } = this.state;\n\n    if (card === null) {\n      return null;\n    }\n\n    const provider    = card.get('provider_name').length === 0 ? decodeIDNA(getHostname(card.get('url'))) : card.get('provider_name');\n    const horizontal  = (!compact && card.get('width') > card.get('height') && (card.get('width') + 100 >= width)) || card.get('type') !== 'link' || embedded;\n    const interactive = card.get('type') !== 'link';\n    const className   = classnames('status-card', { horizontal, compact, interactive });\n    const title       = interactive ? <a className='status-card__title' href={card.get('url')} title={card.get('title')} rel='noopener noreferrer' target='_blank'><strong>{card.get('title')}</strong></a> : <strong className='status-card__title' title={card.get('title')}>{card.get('title')}</strong>;\n    const ratio       = card.get('width') / card.get('height');\n    const height      = (compact && !embedded) ? (width / (16 / 9)) : (width / ratio);\n\n    const description = (\n      <div className='status-card__content'>\n        {title}\n        {!(horizontal || compact) && <p className='status-card__description'>{trim(card.get('description') || '', maxDescription)}</p>}\n        <span className='status-card__host'>{provider}</span>\n      </div>\n    );\n\n    let embed     = '';\n    let canvas = (\n      <Blurhash\n        className={classnames('status-card__image-preview', {\n          'status-card__image-preview--hidden': revealed && this.state.previewLoaded,\n        })}\n        hash={card.get('blurhash')}\n        dummy={!useBlurhash}\n      />\n    );\n    let thumbnail = <img src={card.get('image')} alt='' style={{ width: horizontal ? width : null, height: horizontal ? height : null, visibility: revealed ? null : 'hidden' }} onLoad={this.handleImageLoad} className='status-card__image-image' />;\n    let spoilerButton = (\n      <button type='button' onClick={this.handleReveal} className='spoiler-button__overlay'>\n        <span className='spoiler-button__overlay__label'><FormattedMessage id='status.sensitive_warning' defaultMessage='Sensitive content' /></span>\n      </button>\n    );\n    spoilerButton = (\n      <div className={classnames('spoiler-button', { 'spoiler-button--minified': revealed })}>\n        {spoilerButton}\n      </div>\n    );\n\n    if (interactive) {\n      if (embedded) {\n        embed = this.renderVideo();\n      } else {\n        let iconVariant = 'play';\n\n        if (card.get('type') === 'photo') {\n          iconVariant = 'search-plus';\n        }\n\n        embed = (\n          <div className='status-card__image'>\n            {canvas}\n            {thumbnail}\n\n            {revealed && (\n              <div className='status-card__actions'>\n                <div>\n                  <button onClick={this.handleEmbedClick}><Icon id={iconVariant} /></button>\n                  {horizontal && <a href={card.get('url')} target='_blank' rel='noopener noreferrer'><Icon id='external-link' /></a>}\n                </div>\n              </div>\n            )}\n            {!revealed && spoilerButton}\n          </div>\n        );\n      }\n\n      return (\n        <div className={className} ref={this.setRef} onClick={revealed ? null : this.handleReveal} role={revealed ? 'button' : null}>\n          {embed}\n          {!compact && description}\n        </div>\n      );\n    } else if (card.get('image')) {\n      embed = (\n        <div className='status-card__image'>\n          {canvas}\n          {thumbnail}\n        </div>\n      );\n    } else {\n      embed = (\n        <div className='status-card__image'>\n          <Icon id='file-text' />\n        </div>\n      );\n    }\n\n    return (\n      <a href={card.get('url')} className={className} target='_blank' rel='noopener noreferrer' ref={this.setRef}>\n        {embed}\n        {description}\n      </a>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"status.sensitive_warning","defaultMessage":"Sensitive content"}]}},"sourceType":"module"}