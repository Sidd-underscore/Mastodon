{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/containers/status_container.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Status from '../components/status';\nimport { makeGetStatus, makeGetPictureInPicture } from '../selectors';\nimport { replyCompose, mentionCompose, directCompose } from '../actions/compose';\nimport { reblog, favourite, bookmark, unreblog, unfavourite, unbookmark, pin, unpin } from '../actions/interactions';\nimport { muteStatus, unmuteStatus, deleteStatus, hideStatus, revealStatus, toggleStatusCollapse } from '../actions/statuses';\nimport { unmuteAccount, unblockAccount } from '../actions/accounts';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { initMuteModal } from '../actions/mutes';\nimport { initBlockModal } from '../actions/blocks';\nimport { initBoostModal } from '../actions/boosts';\nimport { initReport } from '../actions/reports';\nimport { openModal } from '../actions/modal';\nimport { deployPictureInPicture } from '../actions/picture_in_picture';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { boostModal, deleteModal } from '../initial_state';\nimport { showAlertForError } from '../actions/alerts';\nvar messages = defineMessages({\n  deleteConfirm: {\n    \"id\": \"confirmations.delete.confirm\",\n    \"defaultMessage\": \"Delete\"\n  },\n  deleteMessage: {\n    \"id\": \"confirmations.delete.message\",\n    \"defaultMessage\": \"Are you sure you want to delete this status?\"\n  },\n  redraftConfirm: {\n    \"id\": \"confirmations.redraft.confirm\",\n    \"defaultMessage\": \"Delete & redraft\"\n  },\n  redraftMessage: {\n    \"id\": \"confirmations.redraft.message\",\n    \"defaultMessage\": \"Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.\"\n  },\n  replyConfirm: {\n    \"id\": \"confirmations.reply.confirm\",\n    \"defaultMessage\": \"Reply\"\n  },\n  replyMessage: {\n    \"id\": \"confirmations.reply.message\",\n    \"defaultMessage\": \"Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?\"\n  },\n  blockDomainConfirm: {\n    \"id\": \"confirmations.domain_block.confirm\",\n    \"defaultMessage\": \"Hide entire domain\"\n  }\n});\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var getStatus = makeGetStatus();\n  var getPictureInPicture = makeGetPictureInPicture();\n\n  var mapStateToProps = function mapStateToProps(state, props) {\n    return {\n      status: getStatus(state, props),\n      pictureInPicture: getPictureInPicture(state, props)\n    };\n  };\n\n  return mapStateToProps;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {\n  var intl = _ref.intl;\n  return {\n    onReply(status, router) {\n      dispatch(function (_, getState) {\n        var state = getState();\n\n        if (state.getIn(['compose', 'text']).trim().length !== 0) {\n          dispatch(openModal('CONFIRM', {\n            message: intl.formatMessage(messages.replyMessage),\n            confirm: intl.formatMessage(messages.replyConfirm),\n            onConfirm: function onConfirm() {\n              return dispatch(replyCompose(status, router));\n            }\n          }));\n        } else {\n          dispatch(replyCompose(status, router));\n        }\n      });\n    },\n\n    onModalReblog(status, privacy) {\n      if (status.get('reblogged')) {\n        dispatch(unreblog(status));\n      } else {\n        dispatch(reblog(status, privacy));\n      }\n    },\n\n    onReblog(status, e) {\n      if (e && e.shiftKey || !boostModal) {\n        this.onModalReblog(status);\n      } else {\n        dispatch(initBoostModal({\n          status,\n          onReblog: this.onModalReblog\n        }));\n      }\n    },\n\n    onFavourite(status) {\n      if (status.get('favourited')) {\n        dispatch(unfavourite(status));\n      } else {\n        dispatch(favourite(status));\n      }\n    },\n\n    onBookmark(status) {\n      if (status.get('bookmarked')) {\n        dispatch(unbookmark(status));\n      } else {\n        dispatch(bookmark(status));\n      }\n    },\n\n    onPin(status) {\n      if (status.get('pinned')) {\n        dispatch(unpin(status));\n      } else {\n        dispatch(pin(status));\n      }\n    },\n\n    onEmbed(status) {\n      dispatch(openModal('EMBED', {\n        url: status.get('url'),\n        onError: function onError(error) {\n          return dispatch(showAlertForError(error));\n        }\n      }));\n    },\n\n    onDelete(status, history, withRedraft) {\n      if (withRedraft === void 0) {\n        withRedraft = false;\n      }\n\n      if (!deleteModal) {\n        dispatch(deleteStatus(status.get('id'), history, withRedraft));\n      } else {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n          confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n          onConfirm: function onConfirm() {\n            return dispatch(deleteStatus(status.get('id'), history, withRedraft));\n          }\n        }));\n      }\n    },\n\n    onDirect(account, router) {\n      dispatch(directCompose(account, router));\n    },\n\n    onMention(account, router) {\n      dispatch(mentionCompose(account, router));\n    },\n\n    onOpenMedia(statusId, media, index) {\n      dispatch(openModal('MEDIA', {\n        statusId,\n        media,\n        index\n      }));\n    },\n\n    onOpenVideo(statusId, media, options) {\n      dispatch(openModal('VIDEO', {\n        statusId,\n        media,\n        options\n      }));\n    },\n\n    onBlock(status) {\n      var account = status.get('account');\n      dispatch(initBlockModal(account));\n    },\n\n    onUnblock(account) {\n      dispatch(unblockAccount(account.get('id')));\n    },\n\n    onReport(status) {\n      dispatch(initReport(status.get('account'), status));\n    },\n\n    onMute(account) {\n      dispatch(initMuteModal(account));\n    },\n\n    onUnmute(account) {\n      dispatch(unmuteAccount(account.get('id')));\n    },\n\n    onMuteConversation(status) {\n      if (status.get('muted')) {\n        dispatch(unmuteStatus(status.get('id')));\n      } else {\n        dispatch(muteStatus(status.get('id')));\n      }\n    },\n\n    onToggleHidden(status) {\n      if (status.get('hidden')) {\n        dispatch(revealStatus(status.get('id')));\n      } else {\n        dispatch(hideStatus(status.get('id')));\n      }\n    },\n\n    onToggleCollapsed(status, isCollapsed) {\n      dispatch(toggleStatusCollapse(status.get('id'), isCollapsed));\n    },\n\n    onBlockDomain(domain) {\n      dispatch(openModal('CONFIRM', {\n        message: /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"confirmations.domain_block.message\",\n          defaultMessage: \"Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.\",\n          values: {\n            domain: /*#__PURE__*/React.createElement(\"strong\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 390\n              }\n            }, domain)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 16\n          }\n        }),\n        confirm: intl.formatMessage(messages.blockDomainConfirm),\n        onConfirm: function onConfirm() {\n          return dispatch(blockDomain(domain));\n        }\n      }));\n    },\n\n    onUnblockDomain(domain) {\n      dispatch(unblockDomain(domain));\n    },\n\n    deployPictureInPicture(status, type, mediaProps) {\n      dispatch(deployPictureInPicture(status.get('id'), status.getIn(['account', 'id']), type, mediaProps));\n    }\n\n  };\n};\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Status));","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/containers/status_container.js"],"names":["React","connect","Status","makeGetStatus","makeGetPictureInPicture","replyCompose","mentionCompose","directCompose","reblog","favourite","bookmark","unreblog","unfavourite","unbookmark","pin","unpin","muteStatus","unmuteStatus","deleteStatus","hideStatus","revealStatus","toggleStatusCollapse","unmuteAccount","unblockAccount","blockDomain","unblockDomain","initMuteModal","initBlockModal","initBoostModal","initReport","openModal","deployPictureInPicture","defineMessages","injectIntl","FormattedMessage","boostModal","deleteModal","showAlertForError","messages","deleteConfirm","deleteMessage","redraftConfirm","redraftMessage","replyConfirm","replyMessage","blockDomainConfirm","makeMapStateToProps","getStatus","getPictureInPicture","mapStateToProps","state","props","status","pictureInPicture","mapDispatchToProps","dispatch","intl","onReply","router","_","getState","getIn","trim","length","message","formatMessage","confirm","onConfirm","onModalReblog","privacy","get","onReblog","e","shiftKey","onFavourite","onBookmark","onPin","onEmbed","url","onError","error","onDelete","history","withRedraft","onDirect","account","onMention","onOpenMedia","statusId","media","index","onOpenVideo","options","onBlock","onUnblock","onReport","onMute","onUnmute","onMuteConversation","onToggleHidden","onToggleCollapsed","isCollapsed","onBlockDomain","domain","onUnblockDomain","type","mediaProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Status from '../components/status';\nimport { makeGetStatus, makeGetPictureInPicture } from '../selectors';\nimport {\n  replyCompose,\n  mentionCompose,\n  directCompose,\n} from '../actions/compose';\nimport {\n  reblog,\n  favourite,\n  bookmark,\n  unreblog,\n  unfavourite,\n  unbookmark,\n  pin,\n  unpin,\n} from '../actions/interactions';\nimport {\n  muteStatus,\n  unmuteStatus,\n  deleteStatus,\n  hideStatus,\n  revealStatus,\n  toggleStatusCollapse,\n} from '../actions/statuses';\nimport {\n  unmuteAccount,\n  unblockAccount,\n} from '../actions/accounts';\nimport {\n  blockDomain,\n  unblockDomain,\n} from '../actions/domain_blocks';\nimport { initMuteModal } from '../actions/mutes';\nimport { initBlockModal } from '../actions/blocks';\nimport { initBoostModal } from '../actions/boosts';\nimport { initReport } from '../actions/reports';\nimport { openModal } from '../actions/modal';\nimport { deployPictureInPicture } from '../actions/picture_in_picture';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { boostModal, deleteModal } from '../initial_state';\nimport { showAlertForError } from '../actions/alerts';\n\nconst messages = defineMessages({\n  deleteConfirm: { id: 'confirmations.delete.confirm', defaultMessage: 'Delete' },\n  deleteMessage: { id: 'confirmations.delete.message', defaultMessage: 'Are you sure you want to delete this status?' },\n  redraftConfirm: { id: 'confirmations.redraft.confirm', defaultMessage: 'Delete & redraft' },\n  redraftMessage: { id: 'confirmations.redraft.message', defaultMessage: 'Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Hide entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n  const getPictureInPicture = makeGetPictureInPicture();\n\n  const mapStateToProps = (state, props) => ({\n    status: getStatus(state, props),\n    pictureInPicture: getPictureInPicture(state, props),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onReply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: () => dispatch(replyCompose(status, router)),\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  onModalReblog (status, privacy) {\n    if (status.get('reblogged')) {\n      dispatch(unreblog(status));\n    } else {\n      dispatch(reblog(status, privacy));\n    }\n  },\n\n  onReblog (status, e) {\n    if ((e && e.shiftKey) || !boostModal) {\n      this.onModalReblog(status);\n    } else {\n      dispatch(initBoostModal({ status, onReblog: this.onModalReblog }));\n    }\n  },\n\n  onFavourite (status) {\n    if (status.get('favourited')) {\n      dispatch(unfavourite(status));\n    } else {\n      dispatch(favourite(status));\n    }\n  },\n\n  onBookmark (status) {\n    if (status.get('bookmarked')) {\n      dispatch(unbookmark(status));\n    } else {\n      dispatch(bookmark(status));\n    }\n  },\n\n  onPin (status) {\n    if (status.get('pinned')) {\n      dispatch(unpin(status));\n    } else {\n      dispatch(pin(status));\n    }\n  },\n\n  onEmbed (status) {\n    dispatch(openModal('EMBED', {\n      url: status.get('url'),\n      onError: error => dispatch(showAlertForError(error)),\n    }));\n  },\n\n  onDelete (status, history, withRedraft = false) {\n    if (!deleteModal) {\n      dispatch(deleteStatus(status.get('id'), history, withRedraft));\n    } else {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n        confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n        onConfirm: () => dispatch(deleteStatus(status.get('id'), history, withRedraft)),\n      }));\n    }\n  },\n\n  onDirect (account, router) {\n    dispatch(directCompose(account, router));\n  },\n\n  onMention (account, router) {\n    dispatch(mentionCompose(account, router));\n  },\n\n  onOpenMedia (statusId, media, index) {\n    dispatch(openModal('MEDIA', { statusId, media, index }));\n  },\n\n  onOpenVideo (statusId, media, options) {\n    dispatch(openModal('VIDEO', { statusId, media, options }));\n  },\n\n  onBlock (status) {\n    const account = status.get('account');\n    dispatch(initBlockModal(account));\n  },\n\n  onUnblock (account) {\n    dispatch(unblockAccount(account.get('id')));\n  },\n\n  onReport (status) {\n    dispatch(initReport(status.get('account'), status));\n  },\n\n  onMute (account) {\n    dispatch(initMuteModal(account));\n  },\n\n  onUnmute (account) {\n    dispatch(unmuteAccount(account.get('id')));\n  },\n\n  onMuteConversation (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n  onToggleCollapsed (status, isCollapsed) {\n    dispatch(toggleStatusCollapse(status.get('id'), isCollapsed));\n  },\n\n  onBlockDomain (domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n\n  deployPictureInPicture (status, type, mediaProps) {\n    dispatch(deployPictureInPicture(status.get('id'), status.getIn(['account', 'id']), type, mediaProps));\n  },\n\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Status));\n"]},"metadata":{"react-intl":{"messages":[{"id":"confirmations.delete.confirm","defaultMessage":"Delete"},{"id":"confirmations.delete.message","defaultMessage":"Are you sure you want to delete this status?"},{"id":"confirmations.redraft.confirm","defaultMessage":"Delete & redraft"},{"id":"confirmations.redraft.message","defaultMessage":"Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned."},{"id":"confirmations.reply.confirm","defaultMessage":"Reply"},{"id":"confirmations.reply.message","defaultMessage":"Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?"},{"id":"confirmations.domain_block.confirm","defaultMessage":"Hide entire domain"},{"id":"confirmations.domain_block.message","defaultMessage":"Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed."}]}},"sourceType":"module"}