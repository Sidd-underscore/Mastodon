{"ast":null,"code":"var DIGIT_CHARACTERS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '#', '$', '%', '*', '+', ',', '-', '.', ':', ';', '=', '?', '@', '[', ']', '^', '_', '{', '|', '}', '~'];\nexport var decode83 = function decode83(str) {\n  var value = 0;\n  var c, digit;\n\n  for (var i = 0; i < str.length; i++) {\n    c = str[i];\n    digit = DIGIT_CHARACTERS.indexOf(c);\n    value = value * 83 + digit;\n  }\n\n  return value;\n};\nexport var intToRGB = function intToRGB(int) {\n  return {\n    r: Math.max(0, int >> 16),\n    g: Math.max(0, int >> 8 & 255),\n    b: Math.max(0, int & 255)\n  };\n};\nexport var getAverageFromBlurhash = function getAverageFromBlurhash(blurhash) {\n  if (!blurhash) {\n    return null;\n  }\n\n  return intToRGB(decode83(blurhash.slice(2, 6)));\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/blurhash.js"],"names":["DIGIT_CHARACTERS","decode83","str","value","c","digit","i","length","indexOf","intToRGB","int","r","Math","max","g","b","getAverageFromBlurhash","blurhash","slice"],"mappings":"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","sourcesContent":["const DIGIT_CHARACTERS = [\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n  '#',\n  '$',\n  '%',\n  '*',\n  '+',\n  ',',\n  '-',\n  '.',\n  ':',\n  ';',\n  '=',\n  '?',\n  '@',\n  '[',\n  ']',\n  '^',\n  '_',\n  '{',\n  '|',\n  '}',\n  '~',\n];\n\nexport const decode83 = (str) => {\n  let value = 0;\n  let c, digit;\n\n  for (let i = 0; i < str.length; i++) {\n    c = str[i];\n    digit = DIGIT_CHARACTERS.indexOf(c);\n    value = value * 83 + digit;\n  }\n\n  return value;\n};\n\nexport const intToRGB = int => ({\n  r: Math.max(0, (int >> 16)),\n  g: Math.max(0, (int >> 8) & 255),\n  b: Math.max(0, (int & 255)),\n});\n\nexport const getAverageFromBlurhash = blurhash => {\n  if (!blurhash) {\n    return null;\n  }\n\n  return intToRGB(decode83(blurhash.slice(2, 6)));\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}