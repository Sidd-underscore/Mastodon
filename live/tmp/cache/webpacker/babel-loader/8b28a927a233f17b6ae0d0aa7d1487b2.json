{"ast":null,"code":"import api, { getLinks } from '../api';\nexport var DOMAIN_BLOCK_REQUEST = 'DOMAIN_BLOCK_REQUEST';\nexport var DOMAIN_BLOCK_SUCCESS = 'DOMAIN_BLOCK_SUCCESS';\nexport var DOMAIN_BLOCK_FAIL = 'DOMAIN_BLOCK_FAIL';\nexport var DOMAIN_UNBLOCK_REQUEST = 'DOMAIN_UNBLOCK_REQUEST';\nexport var DOMAIN_UNBLOCK_SUCCESS = 'DOMAIN_UNBLOCK_SUCCESS';\nexport var DOMAIN_UNBLOCK_FAIL = 'DOMAIN_UNBLOCK_FAIL';\nexport var DOMAIN_BLOCKS_FETCH_REQUEST = 'DOMAIN_BLOCKS_FETCH_REQUEST';\nexport var DOMAIN_BLOCKS_FETCH_SUCCESS = 'DOMAIN_BLOCKS_FETCH_SUCCESS';\nexport var DOMAIN_BLOCKS_FETCH_FAIL = 'DOMAIN_BLOCKS_FETCH_FAIL';\nexport var DOMAIN_BLOCKS_EXPAND_REQUEST = 'DOMAIN_BLOCKS_EXPAND_REQUEST';\nexport var DOMAIN_BLOCKS_EXPAND_SUCCESS = 'DOMAIN_BLOCKS_EXPAND_SUCCESS';\nexport var DOMAIN_BLOCKS_EXPAND_FAIL = 'DOMAIN_BLOCKS_EXPAND_FAIL';\nexport function blockDomain(domain) {\n  return function (dispatch, getState) {\n    dispatch(blockDomainRequest(domain));\n    api(getState).post('/api/v1/domain_blocks', {\n      domain\n    }).then(function () {\n      var at_domain = '@' + domain;\n      var accounts = getState().get('accounts').filter(function (item) {\n        return item.get('acct').endsWith(at_domain);\n      }).valueSeq().map(function (item) {\n        return item.get('id');\n      });\n      dispatch(blockDomainSuccess(domain, accounts));\n    }).catch(function (err) {\n      dispatch(blockDomainFail(domain, err));\n    });\n  };\n}\n;\nexport function blockDomainRequest(domain) {\n  return {\n    type: DOMAIN_BLOCK_REQUEST,\n    domain\n  };\n}\n;\nexport function blockDomainSuccess(domain, accounts) {\n  return {\n    type: DOMAIN_BLOCK_SUCCESS,\n    domain,\n    accounts\n  };\n}\n;\nexport function blockDomainFail(domain, error) {\n  return {\n    type: DOMAIN_BLOCK_FAIL,\n    domain,\n    error\n  };\n}\n;\nexport function unblockDomain(domain) {\n  return function (dispatch, getState) {\n    dispatch(unblockDomainRequest(domain));\n    api(getState).delete('/api/v1/domain_blocks', {\n      params: {\n        domain\n      }\n    }).then(function () {\n      var at_domain = '@' + domain;\n      var accounts = getState().get('accounts').filter(function (item) {\n        return item.get('acct').endsWith(at_domain);\n      }).valueSeq().map(function (item) {\n        return item.get('id');\n      });\n      dispatch(unblockDomainSuccess(domain, accounts));\n    }).catch(function (err) {\n      dispatch(unblockDomainFail(domain, err));\n    });\n  };\n}\n;\nexport function unblockDomainRequest(domain) {\n  return {\n    type: DOMAIN_UNBLOCK_REQUEST,\n    domain\n  };\n}\n;\nexport function unblockDomainSuccess(domain, accounts) {\n  return {\n    type: DOMAIN_UNBLOCK_SUCCESS,\n    domain,\n    accounts\n  };\n}\n;\nexport function unblockDomainFail(domain, error) {\n  return {\n    type: DOMAIN_UNBLOCK_FAIL,\n    domain,\n    error\n  };\n}\n;\nexport function fetchDomainBlocks() {\n  return function (dispatch, getState) {\n    dispatch(fetchDomainBlocksRequest());\n    api(getState).get('/api/v1/domain_blocks').then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(fetchDomainBlocksSuccess(response.data, next ? next.uri : null));\n    }).catch(function (err) {\n      dispatch(fetchDomainBlocksFail(err));\n    });\n  };\n}\n;\nexport function fetchDomainBlocksRequest() {\n  return {\n    type: DOMAIN_BLOCKS_FETCH_REQUEST\n  };\n}\n;\nexport function fetchDomainBlocksSuccess(domains, next) {\n  return {\n    type: DOMAIN_BLOCKS_FETCH_SUCCESS,\n    domains,\n    next\n  };\n}\n;\nexport function fetchDomainBlocksFail(error) {\n  return {\n    type: DOMAIN_BLOCKS_FETCH_FAIL,\n    error\n  };\n}\n;\nexport function expandDomainBlocks() {\n  return function (dispatch, getState) {\n    var url = getState().getIn(['domain_lists', 'blocks', 'next']);\n\n    if (!url) {\n      return;\n    }\n\n    dispatch(expandDomainBlocksRequest());\n    api(getState).get(url).then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(expandDomainBlocksSuccess(response.data, next ? next.uri : null));\n    }).catch(function (err) {\n      dispatch(expandDomainBlocksFail(err));\n    });\n  };\n}\n;\nexport function expandDomainBlocksRequest() {\n  return {\n    type: DOMAIN_BLOCKS_EXPAND_REQUEST\n  };\n}\n;\nexport function expandDomainBlocksSuccess(domains, next) {\n  return {\n    type: DOMAIN_BLOCKS_EXPAND_SUCCESS,\n    domains,\n    next\n  };\n}\n;\nexport function expandDomainBlocksFail(error) {\n  return {\n    type: DOMAIN_BLOCKS_EXPAND_FAIL,\n    error\n  };\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/domain_blocks.js"],"names":["api","getLinks","DOMAIN_BLOCK_REQUEST","DOMAIN_BLOCK_SUCCESS","DOMAIN_BLOCK_FAIL","DOMAIN_UNBLOCK_REQUEST","DOMAIN_UNBLOCK_SUCCESS","DOMAIN_UNBLOCK_FAIL","DOMAIN_BLOCKS_FETCH_REQUEST","DOMAIN_BLOCKS_FETCH_SUCCESS","DOMAIN_BLOCKS_FETCH_FAIL","DOMAIN_BLOCKS_EXPAND_REQUEST","DOMAIN_BLOCKS_EXPAND_SUCCESS","DOMAIN_BLOCKS_EXPAND_FAIL","blockDomain","domain","dispatch","getState","blockDomainRequest","post","then","at_domain","accounts","get","filter","item","endsWith","valueSeq","map","blockDomainSuccess","catch","err","blockDomainFail","type","error","unblockDomain","unblockDomainRequest","delete","params","unblockDomainSuccess","unblockDomainFail","fetchDomainBlocks","fetchDomainBlocksRequest","response","next","refs","find","link","rel","fetchDomainBlocksSuccess","data","uri","fetchDomainBlocksFail","domains","expandDomainBlocks","url","getIn","expandDomainBlocksRequest","expandDomainBlocksSuccess","expandDomainBlocksFail"],"mappings":"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","sourcesContent":["import api, { getLinks } from '../api';\n\nexport const DOMAIN_BLOCK_REQUEST = 'DOMAIN_BLOCK_REQUEST';\nexport const DOMAIN_BLOCK_SUCCESS = 'DOMAIN_BLOCK_SUCCESS';\nexport const DOMAIN_BLOCK_FAIL    = 'DOMAIN_BLOCK_FAIL';\n\nexport const DOMAIN_UNBLOCK_REQUEST = 'DOMAIN_UNBLOCK_REQUEST';\nexport const DOMAIN_UNBLOCK_SUCCESS = 'DOMAIN_UNBLOCK_SUCCESS';\nexport const DOMAIN_UNBLOCK_FAIL    = 'DOMAIN_UNBLOCK_FAIL';\n\nexport const DOMAIN_BLOCKS_FETCH_REQUEST = 'DOMAIN_BLOCKS_FETCH_REQUEST';\nexport const DOMAIN_BLOCKS_FETCH_SUCCESS = 'DOMAIN_BLOCKS_FETCH_SUCCESS';\nexport const DOMAIN_BLOCKS_FETCH_FAIL    = 'DOMAIN_BLOCKS_FETCH_FAIL';\n\nexport const DOMAIN_BLOCKS_EXPAND_REQUEST = 'DOMAIN_BLOCKS_EXPAND_REQUEST';\nexport const DOMAIN_BLOCKS_EXPAND_SUCCESS = 'DOMAIN_BLOCKS_EXPAND_SUCCESS';\nexport const DOMAIN_BLOCKS_EXPAND_FAIL    = 'DOMAIN_BLOCKS_EXPAND_FAIL';\n\nexport function blockDomain(domain) {\n  return (dispatch, getState) => {\n    dispatch(blockDomainRequest(domain));\n\n    api(getState).post('/api/v1/domain_blocks', { domain }).then(() => {\n      const at_domain = '@' + domain;\n      const accounts = getState().get('accounts').filter(item => item.get('acct').endsWith(at_domain)).valueSeq().map(item => item.get('id'));\n\n      dispatch(blockDomainSuccess(domain, accounts));\n    }).catch(err => {\n      dispatch(blockDomainFail(domain, err));\n    });\n  };\n};\n\nexport function blockDomainRequest(domain) {\n  return {\n    type: DOMAIN_BLOCK_REQUEST,\n    domain,\n  };\n};\n\nexport function blockDomainSuccess(domain, accounts) {\n  return {\n    type: DOMAIN_BLOCK_SUCCESS,\n    domain,\n    accounts,\n  };\n};\n\nexport function blockDomainFail(domain, error) {\n  return {\n    type: DOMAIN_BLOCK_FAIL,\n    domain,\n    error,\n  };\n};\n\nexport function unblockDomain(domain) {\n  return (dispatch, getState) => {\n    dispatch(unblockDomainRequest(domain));\n\n    api(getState).delete('/api/v1/domain_blocks', { params: { domain } }).then(() => {\n      const at_domain = '@' + domain;\n      const accounts = getState().get('accounts').filter(item => item.get('acct').endsWith(at_domain)).valueSeq().map(item => item.get('id'));\n      dispatch(unblockDomainSuccess(domain, accounts));\n    }).catch(err => {\n      dispatch(unblockDomainFail(domain, err));\n    });\n  };\n};\n\nexport function unblockDomainRequest(domain) {\n  return {\n    type: DOMAIN_UNBLOCK_REQUEST,\n    domain,\n  };\n};\n\nexport function unblockDomainSuccess(domain, accounts) {\n  return {\n    type: DOMAIN_UNBLOCK_SUCCESS,\n    domain,\n    accounts,\n  };\n};\n\nexport function unblockDomainFail(domain, error) {\n  return {\n    type: DOMAIN_UNBLOCK_FAIL,\n    domain,\n    error,\n  };\n};\n\nexport function fetchDomainBlocks() {\n  return (dispatch, getState) => {\n    dispatch(fetchDomainBlocksRequest());\n\n    api(getState).get('/api/v1/domain_blocks').then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n      dispatch(fetchDomainBlocksSuccess(response.data, next ? next.uri : null));\n    }).catch(err => {\n      dispatch(fetchDomainBlocksFail(err));\n    });\n  };\n};\n\nexport function fetchDomainBlocksRequest() {\n  return {\n    type: DOMAIN_BLOCKS_FETCH_REQUEST,\n  };\n};\n\nexport function fetchDomainBlocksSuccess(domains, next) {\n  return {\n    type: DOMAIN_BLOCKS_FETCH_SUCCESS,\n    domains,\n    next,\n  };\n};\n\nexport function fetchDomainBlocksFail(error) {\n  return {\n    type: DOMAIN_BLOCKS_FETCH_FAIL,\n    error,\n  };\n};\n\nexport function expandDomainBlocks() {\n  return (dispatch, getState) => {\n    const url = getState().getIn(['domain_lists', 'blocks', 'next']);\n\n    if (!url) {\n      return;\n    }\n\n    dispatch(expandDomainBlocksRequest());\n\n    api(getState).get(url).then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n      dispatch(expandDomainBlocksSuccess(response.data, next ? next.uri : null));\n    }).catch(err => {\n      dispatch(expandDomainBlocksFail(err));\n    });\n  };\n};\n\nexport function expandDomainBlocksRequest() {\n  return {\n    type: DOMAIN_BLOCKS_EXPAND_REQUEST,\n  };\n};\n\nexport function expandDomainBlocksSuccess(domains, next) {\n  return {\n    type: DOMAIN_BLOCKS_EXPAND_SUCCESS,\n    domains,\n    next,\n  };\n};\n\nexport function expandDomainBlocksFail(error) {\n  return {\n    type: DOMAIN_BLOCKS_EXPAND_FAIL,\n    error,\n  };\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}