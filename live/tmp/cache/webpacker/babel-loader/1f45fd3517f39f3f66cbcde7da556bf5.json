{"ast":null,"code":"import { NOTIFICATIONS_UPDATE } from '../actions/notifications';\nimport { FOLLOWERS_FETCH_REQUEST, FOLLOWERS_FETCH_SUCCESS, FOLLOWERS_FETCH_FAIL, FOLLOWERS_EXPAND_REQUEST, FOLLOWERS_EXPAND_SUCCESS, FOLLOWERS_EXPAND_FAIL, FOLLOWING_FETCH_REQUEST, FOLLOWING_FETCH_SUCCESS, FOLLOWING_FETCH_FAIL, FOLLOWING_EXPAND_REQUEST, FOLLOWING_EXPAND_SUCCESS, FOLLOWING_EXPAND_FAIL, FOLLOW_REQUESTS_FETCH_REQUEST, FOLLOW_REQUESTS_FETCH_SUCCESS, FOLLOW_REQUESTS_FETCH_FAIL, FOLLOW_REQUESTS_EXPAND_REQUEST, FOLLOW_REQUESTS_EXPAND_SUCCESS, FOLLOW_REQUESTS_EXPAND_FAIL, FOLLOW_REQUEST_AUTHORIZE_SUCCESS, FOLLOW_REQUEST_REJECT_SUCCESS } from '../actions/accounts';\nimport { REBLOGS_FETCH_SUCCESS, FAVOURITES_FETCH_SUCCESS } from '../actions/interactions';\nimport { BLOCKS_FETCH_REQUEST, BLOCKS_FETCH_SUCCESS, BLOCKS_FETCH_FAIL, BLOCKS_EXPAND_REQUEST, BLOCKS_EXPAND_SUCCESS, BLOCKS_EXPAND_FAIL } from '../actions/blocks';\nimport { MUTES_FETCH_REQUEST, MUTES_FETCH_SUCCESS, MUTES_FETCH_FAIL, MUTES_EXPAND_REQUEST, MUTES_EXPAND_SUCCESS, MUTES_EXPAND_FAIL } from '../actions/mutes';\nimport { DIRECTORY_FETCH_REQUEST, DIRECTORY_FETCH_SUCCESS, DIRECTORY_FETCH_FAIL, DIRECTORY_EXPAND_REQUEST, DIRECTORY_EXPAND_SUCCESS, DIRECTORY_EXPAND_FAIL } from 'mastodon/actions/directory';\nimport { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nvar initialListState = ImmutableMap({\n  next: null,\n  isLoading: false,\n  items: ImmutableList()\n});\nvar initialState = ImmutableMap({\n  followers: initialListState,\n  following: initialListState,\n  reblogged_by: initialListState,\n  favourited_by: initialListState,\n  follow_requests: initialListState,\n  blocks: initialListState,\n  mutes: initialListState\n});\n\nvar normalizeList = function normalizeList(state, path, accounts, next) {\n  return state.setIn(path, ImmutableMap({\n    next,\n    items: ImmutableList(accounts.map(function (item) {\n      return item.id;\n    })),\n    isLoading: false\n  }));\n};\n\nvar appendToList = function appendToList(state, path, accounts, next) {\n  return state.updateIn(path, function (map) {\n    return map.set('next', next).set('isLoading', false).update('items', function (list) {\n      return list.concat(accounts.map(function (item) {\n        return item.id;\n      }));\n    });\n  });\n};\n\nvar normalizeFollowRequest = function normalizeFollowRequest(state, notification) {\n  return state.updateIn(['follow_requests', 'items'], function (list) {\n    return list.filterNot(function (item) {\n      return item === notification.account.id;\n    }).unshift(notification.account.id);\n  });\n};\n\nexport default function userLists(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case FOLLOWERS_FETCH_SUCCESS:\n      return normalizeList(state, ['followers', action.id], action.accounts, action.next);\n\n    case FOLLOWERS_EXPAND_SUCCESS:\n      return appendToList(state, ['followers', action.id], action.accounts, action.next);\n\n    case FOLLOWERS_FETCH_REQUEST:\n    case FOLLOWERS_EXPAND_REQUEST:\n      return state.setIn(['followers', action.id, 'isLoading'], true);\n\n    case FOLLOWERS_FETCH_FAIL:\n    case FOLLOWERS_EXPAND_FAIL:\n      return state.setIn(['followers', action.id, 'isLoading'], false);\n\n    case FOLLOWING_FETCH_SUCCESS:\n      return normalizeList(state, ['following', action.id], action.accounts, action.next);\n\n    case FOLLOWING_EXPAND_SUCCESS:\n      return appendToList(state, ['following', action.id], action.accounts, action.next);\n\n    case FOLLOWING_FETCH_REQUEST:\n    case FOLLOWING_EXPAND_REQUEST:\n      return state.setIn(['following', action.id, 'isLoading'], true);\n\n    case FOLLOWING_FETCH_FAIL:\n    case FOLLOWING_EXPAND_FAIL:\n      return state.setIn(['following', action.id, 'isLoading'], false);\n\n    case REBLOGS_FETCH_SUCCESS:\n      return state.setIn(['reblogged_by', action.id], ImmutableList(action.accounts.map(function (item) {\n        return item.id;\n      })));\n\n    case FAVOURITES_FETCH_SUCCESS:\n      return state.setIn(['favourited_by', action.id], ImmutableList(action.accounts.map(function (item) {\n        return item.id;\n      })));\n\n    case NOTIFICATIONS_UPDATE:\n      return action.notification.type === 'follow_request' ? normalizeFollowRequest(state, action.notification) : state;\n\n    case FOLLOW_REQUESTS_FETCH_SUCCESS:\n      return normalizeList(state, ['follow_requests'], action.accounts, action.next);\n\n    case FOLLOW_REQUESTS_EXPAND_SUCCESS:\n      return appendToList(state, ['follow_requests'], action.accounts, action.next);\n\n    case FOLLOW_REQUESTS_FETCH_REQUEST:\n    case FOLLOW_REQUESTS_EXPAND_REQUEST:\n      return state.setIn(['follow_requests', 'isLoading'], true);\n\n    case FOLLOW_REQUESTS_FETCH_FAIL:\n    case FOLLOW_REQUESTS_EXPAND_FAIL:\n      return state.setIn(['follow_requests', 'isLoading'], false);\n\n    case FOLLOW_REQUEST_AUTHORIZE_SUCCESS:\n    case FOLLOW_REQUEST_REJECT_SUCCESS:\n      return state.updateIn(['follow_requests', 'items'], function (list) {\n        return list.filterNot(function (item) {\n          return item === action.id;\n        });\n      });\n\n    case BLOCKS_FETCH_SUCCESS:\n      return normalizeList(state, ['blocks'], action.accounts, action.next);\n\n    case BLOCKS_EXPAND_SUCCESS:\n      return appendToList(state, ['blocks'], action.accounts, action.next);\n\n    case BLOCKS_FETCH_REQUEST:\n    case BLOCKS_EXPAND_REQUEST:\n      return state.setIn(['blocks', 'isLoading'], true);\n\n    case BLOCKS_FETCH_FAIL:\n    case BLOCKS_EXPAND_FAIL:\n      return state.setIn(['blocks', 'isLoading'], false);\n\n    case MUTES_FETCH_SUCCESS:\n      return normalizeList(state, ['mutes'], action.accounts, action.next);\n\n    case MUTES_EXPAND_SUCCESS:\n      return appendToList(state, ['mutes'], action.accounts, action.next);\n\n    case MUTES_FETCH_REQUEST:\n    case MUTES_EXPAND_REQUEST:\n      return state.setIn(['mutes', 'isLoading'], true);\n\n    case MUTES_FETCH_FAIL:\n    case MUTES_EXPAND_FAIL:\n      return state.setIn(['mutes', 'isLoading'], false);\n\n    case DIRECTORY_FETCH_SUCCESS:\n      return normalizeList(state, ['directory'], action.accounts, action.next);\n\n    case DIRECTORY_EXPAND_SUCCESS:\n      return appendToList(state, ['directory'], action.accounts, action.next);\n\n    case DIRECTORY_FETCH_REQUEST:\n    case DIRECTORY_EXPAND_REQUEST:\n      return state.setIn(['directory', 'isLoading'], true);\n\n    case DIRECTORY_FETCH_FAIL:\n    case DIRECTORY_EXPAND_FAIL:\n      return state.setIn(['directory', 'isLoading'], false);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/user_lists.js"],"names":["NOTIFICATIONS_UPDATE","FOLLOWERS_FETCH_REQUEST","FOLLOWERS_FETCH_SUCCESS","FOLLOWERS_FETCH_FAIL","FOLLOWERS_EXPAND_REQUEST","FOLLOWERS_EXPAND_SUCCESS","FOLLOWERS_EXPAND_FAIL","FOLLOWING_FETCH_REQUEST","FOLLOWING_FETCH_SUCCESS","FOLLOWING_FETCH_FAIL","FOLLOWING_EXPAND_REQUEST","FOLLOWING_EXPAND_SUCCESS","FOLLOWING_EXPAND_FAIL","FOLLOW_REQUESTS_FETCH_REQUEST","FOLLOW_REQUESTS_FETCH_SUCCESS","FOLLOW_REQUESTS_FETCH_FAIL","FOLLOW_REQUESTS_EXPAND_REQUEST","FOLLOW_REQUESTS_EXPAND_SUCCESS","FOLLOW_REQUESTS_EXPAND_FAIL","FOLLOW_REQUEST_AUTHORIZE_SUCCESS","FOLLOW_REQUEST_REJECT_SUCCESS","REBLOGS_FETCH_SUCCESS","FAVOURITES_FETCH_SUCCESS","BLOCKS_FETCH_REQUEST","BLOCKS_FETCH_SUCCESS","BLOCKS_FETCH_FAIL","BLOCKS_EXPAND_REQUEST","BLOCKS_EXPAND_SUCCESS","BLOCKS_EXPAND_FAIL","MUTES_FETCH_REQUEST","MUTES_FETCH_SUCCESS","MUTES_FETCH_FAIL","MUTES_EXPAND_REQUEST","MUTES_EXPAND_SUCCESS","MUTES_EXPAND_FAIL","DIRECTORY_FETCH_REQUEST","DIRECTORY_FETCH_SUCCESS","DIRECTORY_FETCH_FAIL","DIRECTORY_EXPAND_REQUEST","DIRECTORY_EXPAND_SUCCESS","DIRECTORY_EXPAND_FAIL","Map","ImmutableMap","List","ImmutableList","initialListState","next","isLoading","items","initialState","followers","following","reblogged_by","favourited_by","follow_requests","blocks","mutes","normalizeList","state","path","accounts","setIn","map","item","id","appendToList","updateIn","set","update","list","concat","normalizeFollowRequest","notification","filterNot","account","unshift","userLists","action","type"],"mappings":"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","sourcesContent":["import {\n  NOTIFICATIONS_UPDATE,\n} from '../actions/notifications';\nimport {\n  FOLLOWERS_FETCH_REQUEST,\n  FOLLOWERS_FETCH_SUCCESS,\n  FOLLOWERS_FETCH_FAIL,\n  FOLLOWERS_EXPAND_REQUEST,\n  FOLLOWERS_EXPAND_SUCCESS,\n  FOLLOWERS_EXPAND_FAIL,\n  FOLLOWING_FETCH_REQUEST,\n  FOLLOWING_FETCH_SUCCESS,\n  FOLLOWING_FETCH_FAIL,\n  FOLLOWING_EXPAND_REQUEST,\n  FOLLOWING_EXPAND_SUCCESS,\n  FOLLOWING_EXPAND_FAIL,\n  FOLLOW_REQUESTS_FETCH_REQUEST,\n  FOLLOW_REQUESTS_FETCH_SUCCESS,\n  FOLLOW_REQUESTS_FETCH_FAIL,\n  FOLLOW_REQUESTS_EXPAND_REQUEST,\n  FOLLOW_REQUESTS_EXPAND_SUCCESS,\n  FOLLOW_REQUESTS_EXPAND_FAIL,\n  FOLLOW_REQUEST_AUTHORIZE_SUCCESS,\n  FOLLOW_REQUEST_REJECT_SUCCESS,\n} from '../actions/accounts';\nimport {\n  REBLOGS_FETCH_SUCCESS,\n  FAVOURITES_FETCH_SUCCESS,\n} from '../actions/interactions';\nimport {\n  BLOCKS_FETCH_REQUEST,\n  BLOCKS_FETCH_SUCCESS,\n  BLOCKS_FETCH_FAIL,\n  BLOCKS_EXPAND_REQUEST,\n  BLOCKS_EXPAND_SUCCESS,\n  BLOCKS_EXPAND_FAIL,\n} from '../actions/blocks';\nimport {\n  MUTES_FETCH_REQUEST,\n  MUTES_FETCH_SUCCESS,\n  MUTES_FETCH_FAIL,\n  MUTES_EXPAND_REQUEST,\n  MUTES_EXPAND_SUCCESS,\n  MUTES_EXPAND_FAIL,\n} from '../actions/mutes';\nimport {\n  DIRECTORY_FETCH_REQUEST,\n  DIRECTORY_FETCH_SUCCESS,\n  DIRECTORY_FETCH_FAIL,\n  DIRECTORY_EXPAND_REQUEST,\n  DIRECTORY_EXPAND_SUCCESS,\n  DIRECTORY_EXPAND_FAIL,\n} from 'mastodon/actions/directory';\nimport { Map as ImmutableMap, List as ImmutableList } from 'immutable';\n\nconst initialListState = ImmutableMap({\n  next: null,\n  isLoading: false,\n  items: ImmutableList(),\n});\n\nconst initialState = ImmutableMap({\n  followers: initialListState,\n  following: initialListState,\n  reblogged_by: initialListState,\n  favourited_by: initialListState,\n  follow_requests: initialListState,\n  blocks: initialListState,\n  mutes: initialListState,\n});\n\nconst normalizeList = (state, path, accounts, next) => {\n  return state.setIn(path, ImmutableMap({\n    next,\n    items: ImmutableList(accounts.map(item => item.id)),\n    isLoading: false,\n  }));\n};\n\nconst appendToList = (state, path, accounts, next) => {\n  return state.updateIn(path, map => {\n    return map.set('next', next).set('isLoading', false).update('items', list => list.concat(accounts.map(item => item.id)));\n  });\n};\n\nconst normalizeFollowRequest = (state, notification) => {\n  return state.updateIn(['follow_requests', 'items'], list => {\n    return list.filterNot(item => item === notification.account.id).unshift(notification.account.id);\n  });\n};\n\nexport default function userLists(state = initialState, action) {\n  switch(action.type) {\n  case FOLLOWERS_FETCH_SUCCESS:\n    return normalizeList(state, ['followers', action.id], action.accounts, action.next);\n  case FOLLOWERS_EXPAND_SUCCESS:\n    return appendToList(state, ['followers', action.id], action.accounts, action.next);\n  case FOLLOWERS_FETCH_REQUEST:\n  case FOLLOWERS_EXPAND_REQUEST:\n    return state.setIn(['followers', action.id, 'isLoading'], true);\n  case FOLLOWERS_FETCH_FAIL:\n  case FOLLOWERS_EXPAND_FAIL:\n    return state.setIn(['followers', action.id, 'isLoading'], false);\n  case FOLLOWING_FETCH_SUCCESS:\n    return normalizeList(state, ['following', action.id], action.accounts, action.next);\n  case FOLLOWING_EXPAND_SUCCESS:\n    return appendToList(state, ['following', action.id], action.accounts, action.next);\n  case FOLLOWING_FETCH_REQUEST:\n  case FOLLOWING_EXPAND_REQUEST:\n    return state.setIn(['following', action.id, 'isLoading'], true);\n  case FOLLOWING_FETCH_FAIL:\n  case FOLLOWING_EXPAND_FAIL:\n    return state.setIn(['following', action.id, 'isLoading'], false);\n  case REBLOGS_FETCH_SUCCESS:\n    return state.setIn(['reblogged_by', action.id], ImmutableList(action.accounts.map(item => item.id)));\n  case FAVOURITES_FETCH_SUCCESS:\n    return state.setIn(['favourited_by', action.id], ImmutableList(action.accounts.map(item => item.id)));\n  case NOTIFICATIONS_UPDATE:\n    return action.notification.type === 'follow_request' ? normalizeFollowRequest(state, action.notification) : state;\n  case FOLLOW_REQUESTS_FETCH_SUCCESS:\n    return normalizeList(state, ['follow_requests'], action.accounts, action.next);\n  case FOLLOW_REQUESTS_EXPAND_SUCCESS:\n    return appendToList(state, ['follow_requests'], action.accounts, action.next);\n  case FOLLOW_REQUESTS_FETCH_REQUEST:\n  case FOLLOW_REQUESTS_EXPAND_REQUEST:\n    return state.setIn(['follow_requests', 'isLoading'], true);\n  case FOLLOW_REQUESTS_FETCH_FAIL:\n  case FOLLOW_REQUESTS_EXPAND_FAIL:\n    return state.setIn(['follow_requests', 'isLoading'], false);\n  case FOLLOW_REQUEST_AUTHORIZE_SUCCESS:\n  case FOLLOW_REQUEST_REJECT_SUCCESS:\n    return state.updateIn(['follow_requests', 'items'], list => list.filterNot(item => item === action.id));\n  case BLOCKS_FETCH_SUCCESS:\n    return normalizeList(state, ['blocks'], action.accounts, action.next);\n  case BLOCKS_EXPAND_SUCCESS:\n    return appendToList(state, ['blocks'], action.accounts, action.next);\n  case BLOCKS_FETCH_REQUEST:\n  case BLOCKS_EXPAND_REQUEST:\n    return state.setIn(['blocks', 'isLoading'], true);\n  case BLOCKS_FETCH_FAIL:\n  case BLOCKS_EXPAND_FAIL:\n    return state.setIn(['blocks', 'isLoading'], false);\n  case MUTES_FETCH_SUCCESS:\n    return normalizeList(state, ['mutes'], action.accounts, action.next);\n  case MUTES_EXPAND_SUCCESS:\n    return appendToList(state, ['mutes'], action.accounts, action.next);\n  case MUTES_FETCH_REQUEST:\n  case MUTES_EXPAND_REQUEST:\n    return state.setIn(['mutes', 'isLoading'], true);\n  case MUTES_FETCH_FAIL:\n  case MUTES_EXPAND_FAIL:\n    return state.setIn(['mutes', 'isLoading'], false);\n  case DIRECTORY_FETCH_SUCCESS:\n    return normalizeList(state, ['directory'], action.accounts, action.next);\n  case DIRECTORY_EXPAND_SUCCESS:\n    return appendToList(state, ['directory'], action.accounts, action.next);\n  case DIRECTORY_FETCH_REQUEST:\n  case DIRECTORY_EXPAND_REQUEST:\n    return state.setIn(['directory', 'isLoading'], true);\n  case DIRECTORY_FETCH_FAIL:\n  case DIRECTORY_EXPAND_FAIL:\n    return state.setIn(['directory', 'isLoading'], false);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}