{"ast":null,"code":"import { autoPlayGif } from '../../initial_state';\nimport unicodeMapping from './emoji_unicode_mapping_light';\nimport { assetHost } from 'mastodon/utils/config';\nimport Trie from 'substring-trie';\nvar trie = new Trie(Object.keys(unicodeMapping)); // Convert to file names from emojis. (For different variation selector emojis)\n\nvar emojiFilenames = function emojiFilenames(emojis) {\n  return emojis.map(function (v) {\n    return unicodeMapping[v].filename;\n  });\n}; // Emoji requiring extra borders depending on theme\n\n\nvar darkEmoji = emojiFilenames(['üé±', 'üêú', '‚ö´', 'üñ§', '‚¨õ', '‚óºÔ∏è', '‚óæ', '‚óºÔ∏è', '‚úíÔ∏è', '‚ñ™Ô∏è', 'üí£', 'üé≥', 'üì∑', 'üì∏', '‚ô£Ô∏è', 'üï∂Ô∏è', '‚ú¥Ô∏è', 'üîå', 'üíÇ‚Äç‚ôÄÔ∏è', 'üìΩÔ∏è', 'üç≥', 'ü¶ç', 'üíÇ', 'üî™', 'üï≥Ô∏è', 'üïπÔ∏è', 'üïã', 'üñäÔ∏è', 'üñãÔ∏è', 'üíÇ‚Äç‚ôÇÔ∏è', 'üé§', 'üéì', 'üé•', 'üéº', '‚ô†Ô∏è', 'üé©', 'ü¶É', 'üìº', 'üìπ', 'üéÆ', 'üêÉ', 'üè¥', 'üêû', 'üï∫', 'üì±', 'üì≤', 'üö≤']);\nvar lightEmoji = emojiFilenames(['üëΩ', '‚öæ', 'üêî', '‚òÅÔ∏è', 'üí®', 'üïäÔ∏è', 'üëÄ', 'üç•', 'üëª', 'üêê', '‚ùï', '‚ùî', '‚õ∏Ô∏è', 'üå©Ô∏è', 'üîä', 'üîá', 'üìÉ', 'üåßÔ∏è', 'üêè', 'üçö', 'üçô', 'üêì', 'üêë', 'üíÄ', '‚ò†Ô∏è', 'üå®Ô∏è', 'üîâ', 'üîà', 'üí¨', 'üí≠', 'üèê', 'üè≥Ô∏è', '‚ö™', '‚¨ú', '‚óΩ', '‚óªÔ∏è', '‚ñ´Ô∏è']);\n\nvar emojiFilename = function emojiFilename(filename) {\n  var borderedEmoji = document.body && document.body.classList.contains('theme-mastodon-light') ? lightEmoji : darkEmoji;\n  return borderedEmoji.includes(filename) ? filename + '_border' : filename;\n};\n\nvar emojify = function emojify(str, customEmojis) {\n  if (customEmojis === void 0) {\n    customEmojis = {};\n  }\n\n  var tagCharsWithoutEmojis = '<&';\n  var tagCharsWithEmojis = Object.keys(customEmojis).length ? '<&:' : '<&';\n  var rtn = '',\n      tagChars = tagCharsWithEmojis,\n      invisible = 0;\n\n  var _loop = function _loop() {\n    var match = void 0,\n        i = 0,\n        tag = void 0;\n\n    while (i < str.length && (tag = tagChars.indexOf(str[i])) === -1 && (invisible || !(match = trie.search(str.slice(i))))) {\n      i += str.codePointAt(i) < 65536 ? 1 : 2;\n    }\n\n    var rend = void 0,\n        replacement = '';\n\n    if (i === str.length) {\n      return \"break\";\n    } else if (str[i] === ':') {\n      if (!function () {\n        rend = str.indexOf(':', i + 1) + 1;\n        if (!rend) return false; // no pair of ':'\n\n        var lt = str.indexOf('<', i + 1);\n        if (!(lt === -1 || lt >= rend)) return false; // tag appeared before closing ':'\n\n        var shortname = str.slice(i, rend); // now got a replacee as ':shortname:'\n        // if you want additional emoji handler, add statements below which set replacement and return true.\n\n        if (shortname in customEmojis) {\n          var filename = autoPlayGif ? customEmojis[shortname].url : customEmojis[shortname].static_url;\n          replacement = \"<img draggable=\\\"false\\\" class=\\\"emojione custom-emoji\\\" alt=\\\"\" + shortname + \"\\\" title=\\\"\" + shortname + \"\\\" src=\\\"\" + filename + \"\\\" data-original=\\\"\" + customEmojis[shortname].url + \"\\\" data-static=\\\"\" + customEmojis[shortname].static_url + \"\\\" />\";\n          return true;\n        }\n\n        return false;\n      }()) rend = ++i;\n    } else if (tag >= 0) {\n      // <, &\n      rend = str.indexOf('>;'[tag], i + 1) + 1;\n\n      if (!rend) {\n        return \"break\";\n      }\n\n      if (tag === 0) {\n        if (invisible) {\n          if (str[i + 1] === '/') {\n            // closing tag\n            if (! --invisible) {\n              tagChars = tagCharsWithEmojis;\n            }\n          } else if (str[rend - 2] !== '/') {\n            // opening tag\n            invisible++;\n          }\n        } else {\n          if (str.startsWith('<span class=\"invisible\">', i)) {\n            // avoid emojifying on invisible text\n            invisible = 1;\n            tagChars = tagCharsWithoutEmojis;\n          }\n        }\n      }\n\n      i = rend;\n    } else {\n      // matched to unicode emoji\n      var _unicodeMapping$match = unicodeMapping[match],\n          filename = _unicodeMapping$match.filename,\n          shortCode = _unicodeMapping$match.shortCode;\n      var title = shortCode ? \":\" + shortCode + \":\" : '';\n      replacement = \"<img draggable=\\\"false\\\" class=\\\"emojione\\\" alt=\\\"\" + match + \"\\\" title=\\\"\" + title + \"\\\" src=\\\"\" + assetHost + \"/emoji/\" + emojiFilename(filename) + \".svg\\\" />\";\n      rend = i + match.length; // If the matched character was followed by VS15 (for selecting text presentation), skip it.\n\n      if (str.codePointAt(rend) === 65038) {\n        rend += 1;\n      }\n    }\n\n    rtn += str.slice(0, i) + replacement;\n    str = str.slice(rend);\n  };\n\n  for (;;) {\n    var _ret = _loop();\n\n    if (_ret === \"break\") break;\n  }\n\n  return rtn + str;\n};\n\nexport default emojify;\nexport var buildCustomEmojis = function buildCustomEmojis(customEmojis) {\n  var emojis = [];\n  customEmojis.forEach(function (emoji) {\n    var shortcode = emoji.get('shortcode');\n    var url = autoPlayGif ? emoji.get('url') : emoji.get('static_url');\n    var name = shortcode.replace(':', '');\n    emojis.push({\n      id: name,\n      name,\n      short_names: [name],\n      text: '',\n      emoticons: [],\n      keywords: [name],\n      imageUrl: url,\n      custom: true,\n      customCategory: emoji.get('category')\n    });\n  });\n  return emojis;\n};\nexport var categoriesFromEmojis = function categoriesFromEmojis(customEmojis) {\n  return customEmojis.reduce(function (set, emoji) {\n    return set.add(emoji.get('category') ? \"custom-\" + emoji.get('category') : 'custom');\n  }, new Set(['custom']));\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/emoji/emoji.js"],"names":["autoPlayGif","unicodeMapping","assetHost","Trie","trie","Object","keys","emojiFilenames","emojis","map","v","filename","darkEmoji","lightEmoji","emojiFilename","borderedEmoji","document","body","classList","contains","includes","emojify","str","customEmojis","tagCharsWithoutEmojis","tagCharsWithEmojis","length","rtn","tagChars","invisible","match","i","tag","indexOf","search","slice","codePointAt","rend","replacement","lt","shortname","url","static_url","startsWith","shortCode","title","buildCustomEmojis","forEach","emoji","shortcode","get","name","replace","push","id","short_names","text","emoticons","keywords","imageUrl","custom","customCategory","categoriesFromEmojis","reduce","set","add","Set"],"mappings":"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","sourcesContent":["import { autoPlayGif } from '../../initial_state';\nimport unicodeMapping from './emoji_unicode_mapping_light';\nimport { assetHost } from 'mastodon/utils/config';\nimport Trie from 'substring-trie';\n\nconst trie = new Trie(Object.keys(unicodeMapping));\n\n// Convert to file names from emojis. (For different variation selector emojis)\nconst emojiFilenames = (emojis) => {\n  return emojis.map(v => unicodeMapping[v].filename);\n};\n\n// Emoji requiring extra borders depending on theme\nconst darkEmoji = emojiFilenames(['üé±', 'üêú', '‚ö´', 'üñ§', '‚¨õ', '‚óºÔ∏è', '‚óæ', '‚óºÔ∏è', '‚úíÔ∏è', '‚ñ™Ô∏è', 'üí£', 'üé≥', 'üì∑', 'üì∏', '‚ô£Ô∏è', 'üï∂Ô∏è', '‚ú¥Ô∏è', 'üîå', 'üíÇ‚Äç‚ôÄÔ∏è', 'üìΩÔ∏è', 'üç≥', 'ü¶ç', 'üíÇ', 'üî™', 'üï≥Ô∏è', 'üïπÔ∏è', 'üïã', 'üñäÔ∏è', 'üñãÔ∏è', 'üíÇ‚Äç‚ôÇÔ∏è', 'üé§', 'üéì', 'üé•', 'üéº', '‚ô†Ô∏è', 'üé©', 'ü¶É', 'üìº', 'üìπ', 'üéÆ', 'üêÉ', 'üè¥', 'üêû', 'üï∫', 'üì±', 'üì≤', 'üö≤']);\nconst lightEmoji = emojiFilenames(['üëΩ', '‚öæ', 'üêî', '‚òÅÔ∏è', 'üí®', 'üïäÔ∏è', 'üëÄ', 'üç•', 'üëª', 'üêê', '‚ùï', '‚ùî', '‚õ∏Ô∏è', 'üå©Ô∏è', 'üîä', 'üîá', 'üìÉ', 'üåßÔ∏è', 'üêè', 'üçö', 'üçô', 'üêì', 'üêë', 'üíÄ', '‚ò†Ô∏è', 'üå®Ô∏è', 'üîâ', 'üîà', 'üí¨', 'üí≠', 'üèê', 'üè≥Ô∏è', '‚ö™', '‚¨ú', '‚óΩ', '‚óªÔ∏è', '‚ñ´Ô∏è']);\n\nconst emojiFilename = (filename) => {\n  const borderedEmoji = (document.body && document.body.classList.contains('theme-mastodon-light')) ? lightEmoji : darkEmoji;\n  return borderedEmoji.includes(filename) ? (filename + '_border') : filename;\n};\n\nconst emojify = (str, customEmojis = {}) => {\n  const tagCharsWithoutEmojis = '<&';\n  const tagCharsWithEmojis = Object.keys(customEmojis).length ? '<&:' : '<&';\n  let rtn = '', tagChars = tagCharsWithEmojis, invisible = 0;\n  for (;;) {\n    let match, i = 0, tag;\n    while (i < str.length && (tag = tagChars.indexOf(str[i])) === -1 && (invisible || !(match = trie.search(str.slice(i))))) {\n      i += str.codePointAt(i) < 65536 ? 1 : 2;\n    }\n    let rend, replacement = '';\n    if (i === str.length) {\n      break;\n    } else if (str[i] === ':') {\n      if (!(() => {\n        rend = str.indexOf(':', i + 1) + 1;\n        if (!rend) return false; // no pair of ':'\n        const lt = str.indexOf('<', i + 1);\n        if (!(lt === -1 || lt >= rend)) return false; // tag appeared before closing ':'\n        const shortname = str.slice(i, rend);\n        // now got a replacee as ':shortname:'\n        // if you want additional emoji handler, add statements below which set replacement and return true.\n        if (shortname in customEmojis) {\n          const filename = autoPlayGif ? customEmojis[shortname].url : customEmojis[shortname].static_url;\n          replacement = `<img draggable=\"false\" class=\"emojione custom-emoji\" alt=\"${shortname}\" title=\"${shortname}\" src=\"${filename}\" data-original=\"${customEmojis[shortname].url}\" data-static=\"${customEmojis[shortname].static_url}\" />`;\n          return true;\n        }\n        return false;\n      })()) rend = ++i;\n    } else if (tag >= 0) { // <, &\n      rend = str.indexOf('>;'[tag], i + 1) + 1;\n      if (!rend) {\n        break;\n      }\n      if (tag === 0) {\n        if (invisible) {\n          if (str[i + 1] === '/') { // closing tag\n            if (!--invisible) {\n              tagChars = tagCharsWithEmojis;\n            }\n          } else if (str[rend - 2] !== '/') { // opening tag\n            invisible++;\n          }\n        } else {\n          if (str.startsWith('<span class=\"invisible\">', i)) {\n            // avoid emojifying on invisible text\n            invisible = 1;\n            tagChars = tagCharsWithoutEmojis;\n          }\n        }\n      }\n      i = rend;\n    } else { // matched to unicode emoji\n      const { filename, shortCode } = unicodeMapping[match];\n      const title = shortCode ? `:${shortCode}:` : '';\n      replacement = `<img draggable=\"false\" class=\"emojione\" alt=\"${match}\" title=\"${title}\" src=\"${assetHost}/emoji/${emojiFilename(filename)}.svg\" />`;\n      rend = i + match.length;\n      // If the matched character was followed by VS15 (for selecting text presentation), skip it.\n      if (str.codePointAt(rend) === 65038) {\n        rend += 1;\n      }\n    }\n    rtn += str.slice(0, i) + replacement;\n    str = str.slice(rend);\n  }\n  return rtn + str;\n};\n\nexport default emojify;\n\nexport const buildCustomEmojis = (customEmojis) => {\n  const emojis = [];\n\n  customEmojis.forEach(emoji => {\n    const shortcode = emoji.get('shortcode');\n    const url       = autoPlayGif ? emoji.get('url') : emoji.get('static_url');\n    const name      = shortcode.replace(':', '');\n\n    emojis.push({\n      id: name,\n      name,\n      short_names: [name],\n      text: '',\n      emoticons: [],\n      keywords: [name],\n      imageUrl: url,\n      custom: true,\n      customCategory: emoji.get('category'),\n    });\n  });\n\n  return emojis;\n};\n\nexport const categoriesFromEmojis = customEmojis => customEmojis.reduce((set, emoji) => set.add(emoji.get('category') ? `custom-${emoji.get('category')}` : 'custom'), new Set(['custom']));\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}