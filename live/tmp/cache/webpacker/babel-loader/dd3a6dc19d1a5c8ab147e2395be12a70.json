{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/lists/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport { fetchLists } from '../../actions/lists';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ColumnLink from '../ui/components/column_link';\nimport ColumnSubheading from '../ui/components/column_subheading';\nimport NewListForm from './components/new_list_form';\nimport { createSelector } from 'reselect';\nimport ScrollableList from '../../components/scrollable_list';\nvar messages = defineMessages({\n  heading: {\n    \"id\": \"column.lists\",\n    \"defaultMessage\": \"Lists\"\n  },\n  subheading: {\n    \"id\": \"lists.subheading\",\n    \"defaultMessage\": \"Your lists\"\n  }\n});\nvar getOrderedLists = createSelector([function (state) {\n  return state.get('lists');\n}], function (lists) {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(function (item) {\n    return !!item;\n  }).sort(function (a, b) {\n    return a.get('title').localeCompare(b.get('title'));\n  });\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    lists: getOrderedLists(state)\n  };\n};\n\nvar Lists = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(Lists, _ImmutablePureCompone);\n\n  function Lists() {\n    return _ImmutablePureCompone.apply(this, arguments) || this;\n  }\n\n  var _proto = Lists.prototype;\n\n  _proto.componentWillMount = function componentWillMount() {\n    this.props.dispatch(fetchLists());\n  };\n\n  _proto.render = function render() {\n    var _this = this;\n\n    var _this$props = this.props,\n        intl = _this$props.intl,\n        lists = _this$props.lists,\n        multiColumn = _this$props.multiColumn;\n\n    if (!lists) {\n      return /*#__PURE__*/React.createElement(Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(LoadingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    var emptyMessage = /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"empty_column.lists\",\n      defaultMessage: \"You don't have any lists yet. When you create one, it will show up here.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 26\n      }\n    });\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      icon: \"list-ul\",\n      heading: intl.formatMessage(messages.heading),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnBackButtonSlim, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(NewListForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ScrollableList, {\n      scrollKey: \"lists\",\n      emptyMessage: emptyMessage,\n      prepend: /*#__PURE__*/React.createElement(ColumnSubheading, {\n        text: intl.formatMessage(messages.subheading),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 20\n        }\n      }),\n      bindToDocument: !multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, lists.map(function (list) {\n      return /*#__PURE__*/React.createElement(ColumnLink, {\n        key: list.get('id'),\n        to: \"/timelines/list/\" + list.get('id'),\n        icon: \"list-ul\",\n        text: list.get('title'),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      });\n    })));\n  };\n\n  return Lists;\n}(ImmutablePureComponent), _class2.propTypes = {\n  params: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  lists: ImmutablePropTypes.list,\n  intl: PropTypes.object.isRequired,\n  multiColumn: PropTypes.bool\n}, _temp)) || _class) || _class);\nexport { Lists as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/lists/index.js"],"names":["React","connect","PropTypes","ImmutablePropTypes","LoadingIndicator","Column","ColumnBackButtonSlim","fetchLists","defineMessages","injectIntl","FormattedMessage","ImmutablePureComponent","ColumnLink","ColumnSubheading","NewListForm","createSelector","ScrollableList","messages","heading","subheading","getOrderedLists","state","get","lists","toList","filter","item","sort","a","b","localeCompare","mapStateToProps","Lists","componentWillMount","props","dispatch","render","intl","multiColumn","emptyMessage","formatMessage","map","list","propTypes","params","object","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport { fetchLists } from '../../actions/lists';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ColumnLink from '../ui/components/column_link';\nimport ColumnSubheading from '../ui/components/column_subheading';\nimport NewListForm from './components/new_list_form';\nimport { createSelector } from 'reselect';\nimport ScrollableList from '../../components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.lists', defaultMessage: 'Lists' },\n  subheading: { id: 'lists.subheading', defaultMessage: 'Your lists' },\n});\n\nconst getOrderedLists = createSelector([state => state.get('lists')], lists => {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n});\n\nconst mapStateToProps = state => ({\n  lists: getOrderedLists(state),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Lists extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    lists: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchLists());\n  }\n\n  render () {\n    const { intl, lists, multiColumn } = this.props;\n\n    if (!lists) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.lists' defaultMessage=\"You don't have any lists yet. When you create one, it will show up here.\" />;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='list-ul' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n\n        <NewListForm />\n\n        <ScrollableList\n          scrollKey='lists'\n          emptyMessage={emptyMessage}\n          prepend={<ColumnSubheading text={intl.formatMessage(messages.subheading)} />}\n          bindToDocument={!multiColumn}\n        >\n          {lists.map(list =>\n            <ColumnLink key={list.get('id')} to={`/timelines/list/${list.get('id')}`} icon='list-ul' text={list.get('title')} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"column.lists","defaultMessage":"Lists"},{"id":"lists.subheading","defaultMessage":"Your lists"},{"id":"empty_column.lists","defaultMessage":"You don't have any lists yet. When you create one, it will show up here."}]}},"sourceType":"module"}