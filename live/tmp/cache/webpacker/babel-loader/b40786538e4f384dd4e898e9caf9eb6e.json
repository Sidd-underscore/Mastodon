{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/main.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as registerPushNotifications from './actions/push_notifications';\nimport { setupBrowserNotifications } from './actions/notifications';\nimport { default as Mastodon, store } from './containers/mastodon';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ready from './ready';\n\nvar perf = require('./performance');\n\nfunction main() {\n  var _this = this;\n\n  perf.start('main()');\n\n  if (window.history && history.replaceState) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var path = pathname + search + hash;\n\n    if (!/^\\/web($|\\/)/.test(path)) {\n      history.replaceState(null, document.title, \"/web\" + path);\n    }\n  }\n\n  ready(function () {\n    var mountNode = document.getElementById('mastodon');\n    var props = JSON.parse(mountNode.getAttribute('data-props'));\n    ReactDOM.render( /*#__PURE__*/React.createElement(Mastodon, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }\n    })), mountNode);\n    store.dispatch(setupBrowserNotifications());\n\n    if (process.env.NODE_ENV === 'production') {\n      // avoid offline in dev mode because it's harder to debug\n      require('offline-plugin/runtime').install();\n\n      store.dispatch(registerPushNotifications.register());\n    }\n\n    perf.stop('main()');\n  });\n}\n\nexport default main;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/main.js"],"names":["registerPushNotifications","setupBrowserNotifications","default","Mastodon","store","React","ReactDOM","ready","perf","require","main","start","window","history","replaceState","location","pathname","search","hash","path","test","document","title","mountNode","getElementById","props","JSON","parse","getAttribute","render","dispatch","process","env","NODE_ENV","install","register","stop"],"mappings":";;;;AAAA,OAAO,KAAKA,yBAAZ,MAA2C,8BAA3C;AACA,SAASC,yBAAT,QAA0C,yBAA1C;AACA,SAASC,OAAO,IAAIC,QAApB,EAA8BC,KAA9B,QAA2C,uBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAApB;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACdF,EAAAA,IAAI,CAACG,KAAL,CAAW,QAAX;;AAEA,MAAIC,MAAM,CAACC,OAAP,IAAkBA,OAAO,CAACC,YAA9B,EAA4C;AAC1C,2BAAmCF,MAAM,CAACG,QAA1C;AAAA,QAAQC,QAAR,oBAAQA,QAAR;AAAA,QAAkBC,MAAlB,oBAAkBA,MAAlB;AAAA,QAA0BC,IAA1B,oBAA0BA,IAA1B;AACA,QAAMC,IAAI,GAAGH,QAAQ,GAAGC,MAAX,GAAoBC,IAAjC;;AACA,QAAI,CAAE,cAAD,CAAiBE,IAAjB,CAAsBD,IAAtB,CAAL,EAAkC;AAChCN,MAAAA,OAAO,CAACC,YAAR,CAAqB,IAArB,EAA2BO,QAAQ,CAACC,KAApC,WAAkDH,IAAlD;AACD;AACF;;AAEDZ,EAAAA,KAAK,CAAC,YAAM;AACV,QAAMgB,SAAS,GAAGF,QAAQ,CAACG,cAAT,CAAwB,UAAxB,CAAlB;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWJ,SAAS,CAACK,YAAV,CAAuB,YAAvB,CAAX,CAAd;AAEAtB,IAAAA,QAAQ,CAACuB,MAAT,eAAgB,oBAAC,QAAD,eAAcJ,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhB,EAAyCF,SAAzC;AACAnB,IAAAA,KAAK,CAAC0B,QAAN,CAAe7B,yBAAyB,EAAxC;;AACA,QAAI8B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAxB,MAAAA,OAAO,CAAC,wBAAD,CAAP,CAAkCyB,OAAlC;;AACA9B,MAAAA,KAAK,CAAC0B,QAAN,CAAe9B,yBAAyB,CAACmC,QAA1B,EAAf;AACD;;AACD3B,IAAAA,IAAI,CAAC4B,IAAL,CAAU,QAAV;AACD,GAZI,CAAL;AAaD;;AAED,eAAe1B,IAAf","sourcesContent":["import * as registerPushNotifications from './actions/push_notifications';\nimport { setupBrowserNotifications } from './actions/notifications';\nimport { default as Mastodon, store } from './containers/mastodon';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ready from './ready';\n\nconst perf = require('./performance');\n\nfunction main() {\n  perf.start('main()');\n\n  if (window.history && history.replaceState) {\n    const { pathname, search, hash } = window.location;\n    const path = pathname + search + hash;\n    if (!(/^\\/web($|\\/)/).test(path)) {\n      history.replaceState(null, document.title, `/web${path}`);\n    }\n  }\n\n  ready(() => {\n    const mountNode = document.getElementById('mastodon');\n    const props = JSON.parse(mountNode.getAttribute('data-props'));\n\n    ReactDOM.render(<Mastodon {...props} />, mountNode);\n    store.dispatch(setupBrowserNotifications());\n    if (process.env.NODE_ENV === 'production') {\n      // avoid offline in dev mode because it's harder to debug\n      require('offline-plugin/runtime').install();\n      store.dispatch(registerPushNotifications.register());\n    }\n    perf.stop('main()');\n  });\n}\n\nexport default main;\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}