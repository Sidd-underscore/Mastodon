{"ast":null,"code":"import { connect } from 'react-redux';\nimport ComposeForm from '../components/compose_form';\nimport { changeCompose, submitCompose, clearComposeSuggestions, fetchComposeSuggestions, selectComposeSuggestion, changeComposeSpoilerText, insertEmojiCompose, uploadCompose } from '../../../actions/compose';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    text: state.getIn(['compose', 'text']),\n    suggestions: state.getIn(['compose', 'suggestions']),\n    spoiler: state.getIn(['compose', 'spoiler']),\n    spoilerText: state.getIn(['compose', 'spoiler_text']),\n    privacy: state.getIn(['compose', 'privacy']),\n    focusDate: state.getIn(['compose', 'focusDate']),\n    caretPosition: state.getIn(['compose', 'caretPosition']),\n    preselectDate: state.getIn(['compose', 'preselectDate']),\n    isSubmitting: state.getIn(['compose', 'is_submitting']),\n    isChangingUpload: state.getIn(['compose', 'is_changing_upload']),\n    isUploading: state.getIn(['compose', 'is_uploading']),\n    showSearch: state.getIn(['search', 'submitted']) && !state.getIn(['search', 'hidden']),\n    anyMedia: state.getIn(['compose', 'media_attachments']).size > 0\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onChange(text) {\n      dispatch(changeCompose(text));\n    },\n\n    onSubmit(router) {\n      dispatch(submitCompose(router));\n    },\n\n    onClearSuggestions() {\n      dispatch(clearComposeSuggestions());\n    },\n\n    onFetchSuggestions(token) {\n      dispatch(fetchComposeSuggestions(token));\n    },\n\n    onSuggestionSelected(position, token, suggestion, path) {\n      dispatch(selectComposeSuggestion(position, token, suggestion, path));\n    },\n\n    onChangeSpoilerText(checked) {\n      dispatch(changeComposeSpoilerText(checked));\n    },\n\n    onPaste(files) {\n      dispatch(uploadCompose(files));\n    },\n\n    onPickEmoji(position, data, needsSpace) {\n      dispatch(insertEmojiCompose(position, data, needsSpace));\n    }\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComposeForm);","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/compose/containers/compose_form_container.js"],"names":["connect","ComposeForm","changeCompose","submitCompose","clearComposeSuggestions","fetchComposeSuggestions","selectComposeSuggestion","changeComposeSpoilerText","insertEmojiCompose","uploadCompose","mapStateToProps","state","text","getIn","suggestions","spoiler","spoilerText","privacy","focusDate","caretPosition","preselectDate","isSubmitting","isChangingUpload","isUploading","showSearch","anyMedia","size","mapDispatchToProps","dispatch","onChange","onSubmit","router","onClearSuggestions","onFetchSuggestions","token","onSuggestionSelected","position","suggestion","path","onChangeSpoilerText","checked","onPaste","files","onPickEmoji","data","needsSpace"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport ComposeForm from '../components/compose_form';\nimport {\n  changeCompose,\n  submitCompose,\n  clearComposeSuggestions,\n  fetchComposeSuggestions,\n  selectComposeSuggestion,\n  changeComposeSpoilerText,\n  insertEmojiCompose,\n  uploadCompose,\n} from '../../../actions/compose';\n\nconst mapStateToProps = state => ({\n  text: state.getIn(['compose', 'text']),\n  suggestions: state.getIn(['compose', 'suggestions']),\n  spoiler: state.getIn(['compose', 'spoiler']),\n  spoilerText: state.getIn(['compose', 'spoiler_text']),\n  privacy: state.getIn(['compose', 'privacy']),\n  focusDate: state.getIn(['compose', 'focusDate']),\n  caretPosition: state.getIn(['compose', 'caretPosition']),\n  preselectDate: state.getIn(['compose', 'preselectDate']),\n  isSubmitting: state.getIn(['compose', 'is_submitting']),\n  isChangingUpload: state.getIn(['compose', 'is_changing_upload']),\n  isUploading: state.getIn(['compose', 'is_uploading']),\n  showSearch: state.getIn(['search', 'submitted']) && !state.getIn(['search', 'hidden']),\n  anyMedia: state.getIn(['compose', 'media_attachments']).size > 0,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\n  onChange (text) {\n    dispatch(changeCompose(text));\n  },\n\n  onSubmit (router) {\n    dispatch(submitCompose(router));\n  },\n\n  onClearSuggestions () {\n    dispatch(clearComposeSuggestions());\n  },\n\n  onFetchSuggestions (token) {\n    dispatch(fetchComposeSuggestions(token));\n  },\n\n  onSuggestionSelected (position, token, suggestion, path) {\n    dispatch(selectComposeSuggestion(position, token, suggestion, path));\n  },\n\n  onChangeSpoilerText (checked) {\n    dispatch(changeComposeSpoilerText(checked));\n  },\n\n  onPaste (files) {\n    dispatch(uploadCompose(files));\n  },\n\n  onPickEmoji (position, data, needsSpace) {\n    dispatch(insertEmojiCompose(position, data, needsSpace));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComposeForm);\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}