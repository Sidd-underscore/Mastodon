{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/list_timeline/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { connectListStream } from '../../actions/streaming';\nimport { expandListTimeline } from '../../actions/timelines';\nimport { fetchList, deleteList, updateList } from '../../actions/lists';\nimport { openModal } from '../../actions/modal';\nimport MissingIndicator from '../../components/missing_indicator';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Icon from 'mastodon/components/icon';\nimport RadioButton from 'mastodon/components/radio_button';\nvar messages = defineMessages({\n  deleteMessage: {\n    \"id\": \"confirmations.delete_list.message\",\n    \"defaultMessage\": \"Are you sure you want to permanently delete this list?\"\n  },\n  deleteConfirm: {\n    \"id\": \"confirmations.delete_list.confirm\",\n    \"defaultMessage\": \"Delete\"\n  },\n  followed: {\n    \"id\": \"lists.replies_policy.followed\",\n    \"defaultMessage\": \"Any followed user\"\n  },\n  none: {\n    \"id\": \"lists.replies_policy.none\",\n    \"defaultMessage\": \"No one\"\n  },\n  list: {\n    \"id\": \"lists.replies_policy.list\",\n    \"defaultMessage\": \"Members of the list\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    list: state.getIn(['lists', props.params.id]),\n    hasUnread: state.getIn(['timelines', \"list:\" + props.params.id, 'unread']) > 0\n  };\n};\n\nvar ListTimeline = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(ListTimeline, _React$PureComponent);\n\n  function ListTimeline() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handlePin = function () {\n      var _this$props = _this.props,\n          columnId = _this$props.columnId,\n          dispatch = _this$props.dispatch;\n\n      if (columnId) {\n        dispatch(removeColumn(columnId));\n      } else {\n        dispatch(addColumn('LIST', {\n          id: _this.props.params.id\n        }));\n\n        _this.context.router.history.push('/');\n      }\n    };\n\n    _this.handleMove = function (dir) {\n      var _this$props2 = _this.props,\n          columnId = _this$props2.columnId,\n          dispatch = _this$props2.dispatch;\n      dispatch(moveColumn(columnId, dir));\n    };\n\n    _this.handleHeaderClick = function () {\n      _this.column.scrollTop();\n    };\n\n    _this.setRef = function (c) {\n      _this.column = c;\n    };\n\n    _this.handleLoadMore = function (maxId) {\n      var id = _this.props.params.id;\n\n      _this.props.dispatch(expandListTimeline(id, {\n        maxId\n      }));\n    };\n\n    _this.handleEditClick = function () {\n      _this.props.dispatch(openModal('LIST_EDITOR', {\n        listId: _this.props.params.id\n      }));\n    };\n\n    _this.handleDeleteClick = function () {\n      var _this$props3 = _this.props,\n          dispatch = _this$props3.dispatch,\n          columnId = _this$props3.columnId,\n          intl = _this$props3.intl;\n      var id = _this.props.params.id;\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(messages.deleteMessage),\n        confirm: intl.formatMessage(messages.deleteConfirm),\n        onConfirm: function onConfirm() {\n          dispatch(deleteList(id));\n\n          if (!!columnId) {\n            dispatch(removeColumn(columnId));\n          } else {\n            _this.context.router.history.push('/lists');\n          }\n        }\n      }));\n    };\n\n    _this.handleRepliesPolicyChange = function (_ref) {\n      var target = _ref.target;\n      var dispatch = _this.props.dispatch;\n      var id = _this.props.params.id;\n      dispatch(updateList(id, undefined, false, target.value));\n    };\n\n    return _this;\n  }\n\n  var _proto = ListTimeline.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var dispatch = this.props.dispatch;\n    var id = this.props.params.id;\n    dispatch(fetchList(id));\n    dispatch(expandListTimeline(id));\n    this.disconnect = dispatch(connectListStream(id));\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var dispatch = this.props.dispatch;\n    var id = nextProps.params.id;\n\n    if (id !== this.props.params.id) {\n      if (this.disconnect) {\n        this.disconnect();\n        this.disconnect = null;\n      }\n\n      dispatch(fetchList(id));\n      dispatch(expandListTimeline(id));\n      this.disconnect = dispatch(connectListStream(id));\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props4 = this.props,\n        hasUnread = _this$props4.hasUnread,\n        columnId = _this$props4.columnId,\n        multiColumn = _this$props4.multiColumn,\n        list = _this$props4.list,\n        intl = _this$props4.intl;\n    var id = this.props.params.id;\n    var pinned = !!columnId;\n    var title = list ? list.get('title') : id;\n    var replies_policy = list ? list.get('replies_policy') : undefined;\n\n    if (typeof list === 'undefined') {\n      return /*#__PURE__*/React.createElement(Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"scrollable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(LoadingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }\n      })));\n    } else if (list === false) {\n      return /*#__PURE__*/React.createElement(Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ColumnBackButton, {\n        multiColumn: multiColumn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(MissingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      ref: this.setRef,\n      label: title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      icon: \"list-ul\",\n      active: hasUnread,\n      title: title,\n      onPin: this.handlePin,\n      onMove: this.handleMove,\n      onClick: this.handleHeaderClick,\n      pinned: pinned,\n      multiColumn: multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-settings__row column-header__links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"text-btn column-header__setting-btn\",\n      tabIndex: \"0\",\n      onClick: this.handleEditClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"pencil\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"lists.edit\",\n      defaultMessage: \"Edit list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 36\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"text-btn column-header__setting-btn\",\n      tabIndex: \"0\",\n      onClick: this.handleDeleteClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"trash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"lists.delete\",\n      defaultMessage: \"Delete list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 35\n      }\n    }))), replies_policy !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n      role: \"group\",\n      \"aria-labelledby\": \"list-\" + id + \"-replies-policy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      id: \"list-\" + id + \"-replies-policy\",\n      className: \"column-settings__section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"lists.replies_policy.title\",\n      defaultMessage: \"Show replies to:\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-settings__row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, ['none', 'list', 'followed'].map(function (policy) {\n      return /*#__PURE__*/React.createElement(RadioButton, {\n        name: \"order\",\n        key: policy,\n        value: policy,\n        label: intl.formatMessage(messages[policy]),\n        checked: replies_policy === policy,\n        onChange: _this2.handleRepliesPolicyChange,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 19\n        }\n      });\n    })))), /*#__PURE__*/React.createElement(StatusListContainer, {\n      trackScroll: !pinned,\n      scrollKey: \"list_timeline-\" + columnId,\n      timelineId: \"list:\" + id,\n      onLoadMore: this.handleLoadMore,\n      emptyMessage: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"empty_column.list\",\n        defaultMessage: \"There is nothing in this list yet. When members of this list post new statuses, they will appear here.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 25\n        }\n      }),\n      bindToDocument: !multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return ListTimeline;\n}(React.PureComponent), _class2.contextTypes = {\n  router: PropTypes.object\n}, _class2.propTypes = {\n  params: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  columnId: PropTypes.string,\n  hasUnread: PropTypes.bool,\n  multiColumn: PropTypes.bool,\n  list: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n  intl: PropTypes.object.isRequired\n}, _temp)) || _class) || _class);\nexport { ListTimeline as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/list_timeline/index.js"],"names":["React","connect","PropTypes","ImmutablePropTypes","StatusListContainer","Column","ColumnBackButton","ColumnHeader","addColumn","removeColumn","moveColumn","FormattedMessage","defineMessages","injectIntl","connectListStream","expandListTimeline","fetchList","deleteList","updateList","openModal","MissingIndicator","LoadingIndicator","Icon","RadioButton","messages","deleteMessage","deleteConfirm","followed","none","list","mapStateToProps","state","props","getIn","params","id","hasUnread","ListTimeline","handlePin","columnId","dispatch","context","router","history","push","handleMove","dir","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","maxId","handleEditClick","listId","handleDeleteClick","intl","message","formatMessage","confirm","onConfirm","handleRepliesPolicyChange","target","undefined","value","componentDidMount","disconnect","componentWillReceiveProps","nextProps","componentWillUnmount","render","multiColumn","pinned","title","get","replies_policy","map","policy","PureComponent","contextTypes","object","propTypes","isRequired","func","string","bool","oneOfType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { connectListStream } from '../../actions/streaming';\nimport { expandListTimeline } from '../../actions/timelines';\nimport { fetchList, deleteList, updateList } from '../../actions/lists';\nimport { openModal } from '../../actions/modal';\nimport MissingIndicator from '../../components/missing_indicator';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Icon from 'mastodon/components/icon';\nimport RadioButton from 'mastodon/components/radio_button';\n\nconst messages = defineMessages({\n  deleteMessage: { id: 'confirmations.delete_list.message', defaultMessage: 'Are you sure you want to permanently delete this list?' },\n  deleteConfirm: { id: 'confirmations.delete_list.confirm', defaultMessage: 'Delete' },\n  followed:   { id: 'lists.replies_policy.followed', defaultMessage: 'Any followed user' },\n  none:    { id: 'lists.replies_policy.none', defaultMessage: 'No one' },\n  list:  { id: 'lists.replies_policy.list', defaultMessage: 'Members of the list' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  list: state.getIn(['lists', props.params.id]),\n  hasUnread: state.getIn(['timelines', `list:${props.params.id}`, 'unread']) > 0,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ListTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    list: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('LIST', { id: this.props.params.id }));\n      this.context.router.history.push('/');\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(fetchList(id));\n    dispatch(expandListTimeline(id));\n\n    this.disconnect = dispatch(connectListStream(id));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n    const { id } = nextProps.params;\n\n    if (id !== this.props.params.id) {\n      if (this.disconnect) {\n        this.disconnect();\n        this.disconnect = null;\n      }\n\n      dispatch(fetchList(id));\n      dispatch(expandListTimeline(id));\n\n      this.disconnect = dispatch(connectListStream(id));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { id } = this.props.params;\n    this.props.dispatch(expandListTimeline(id, { maxId }));\n  }\n\n  handleEditClick = () => {\n    this.props.dispatch(openModal('LIST_EDITOR', { listId: this.props.params.id }));\n  }\n\n  handleDeleteClick = () => {\n    const { dispatch, columnId, intl } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.deleteMessage),\n      confirm: intl.formatMessage(messages.deleteConfirm),\n      onConfirm: () => {\n        dispatch(deleteList(id));\n\n        if (!!columnId) {\n          dispatch(removeColumn(columnId));\n        } else {\n          this.context.router.history.push('/lists');\n        }\n      },\n    }));\n  }\n\n  handleRepliesPolicyChange = ({ target }) => {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n    dispatch(updateList(id, undefined, false, target.value));\n  }\n\n  render () {\n    const { hasUnread, columnId, multiColumn, list, intl } = this.props;\n    const { id } = this.props.params;\n    const pinned = !!columnId;\n    const title  = list ? list.get('title') : id;\n    const replies_policy = list ? list.get('replies_policy') : undefined;\n\n    if (typeof list === 'undefined') {\n      return (\n        <Column>\n          <div className='scrollable'>\n            <LoadingIndicator />\n          </div>\n        </Column>\n      );\n    } else if (list === false) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={title}>\n        <ColumnHeader\n          icon='list-ul'\n          active={hasUnread}\n          title={title}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <div className='column-settings__row column-header__links'>\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleEditClick}>\n              <Icon id='pencil' /> <FormattedMessage id='lists.edit' defaultMessage='Edit list' />\n            </button>\n\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleDeleteClick}>\n              <Icon id='trash' /> <FormattedMessage id='lists.delete' defaultMessage='Delete list' />\n            </button>\n          </div>\n\n          { replies_policy !== undefined && (\n            <div role='group' aria-labelledby={`list-${id}-replies-policy`}>\n              <span id={`list-${id}-replies-policy`} className='column-settings__section'>\n                <FormattedMessage id='lists.replies_policy.title' defaultMessage='Show replies to:' />\n              </span>\n              <div className='column-settings__row'>\n                { ['none', 'list', 'followed'].map(policy => (\n                  <RadioButton name='order' key={policy} value={policy} label={intl.formatMessage(messages[policy])} checked={replies_policy === policy} onChange={this.handleRepliesPolicyChange} />\n                ))}\n              </div>\n            </div>\n          )}\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`list_timeline-${columnId}`}\n          timelineId={`list:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.list' defaultMessage='There is nothing in this list yet. When members of this list post new statuses, they will appear here.' />}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"confirmations.delete_list.message","defaultMessage":"Are you sure you want to permanently delete this list?"},{"id":"confirmations.delete_list.confirm","defaultMessage":"Delete"},{"id":"lists.replies_policy.followed","defaultMessage":"Any followed user"},{"id":"lists.replies_policy.none","defaultMessage":"No one"},{"id":"lists.replies_policy.list","defaultMessage":"Members of the list"},{"id":"lists.edit","defaultMessage":"Edit list"},{"id":"lists.delete","defaultMessage":"Delete list"},{"id":"lists.replies_policy.title","defaultMessage":"Show replies to:"},{"id":"empty_column.list","defaultMessage":"There is nothing in this list yet. When members of this list post new statuses, they will appear here."}]}},"sourceType":"module"}