{"ast":null,"code":"import api from '../../api';\nimport { decode as decodeBase64 } from '../../utils/base64';\nimport { pushNotificationsSetting } from '../../settings';\nimport { setBrowserSupport, setSubscription, clearSubscription } from './setter';\nimport { me } from '../../initial_state'; // Taken from https://www.npmjs.com/package/web-push\n\nvar urlBase64ToUint8Array = function urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  return decodeBase64(base64);\n};\n\nvar getApplicationServerKey = function getApplicationServerKey() {\n  return document.querySelector('[name=\"applicationServerKey\"]').getAttribute('content');\n};\n\nvar getRegistration = function getRegistration() {\n  return navigator.serviceWorker.ready;\n};\n\nvar getPushSubscription = function getPushSubscription(registration) {\n  return registration.pushManager.getSubscription().then(function (subscription) {\n    return {\n      registration,\n      subscription\n    };\n  });\n};\n\nvar subscribe = function subscribe(registration) {\n  return registration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(getApplicationServerKey())\n  });\n};\n\nvar unsubscribe = function unsubscribe(_ref) {\n  var registration = _ref.registration,\n      subscription = _ref.subscription;\n  return subscription ? subscription.unsubscribe().then(function () {\n    return registration;\n  }) : registration;\n};\n\nvar sendSubscriptionToBackend = function sendSubscriptionToBackend(subscription) {\n  var params = {\n    subscription\n  };\n\n  if (me) {\n    var data = pushNotificationsSetting.get(me);\n\n    if (data) {\n      params.data = data;\n    }\n  }\n\n  return api().post('/api/web/push_subscriptions', params).then(function (response) {\n    return response.data;\n  });\n}; // Last one checks for payload support: https://web-push-book.gauntface.com/chapter-06/01-non-standards-browsers/#no-payload\n\n\nvar supportsPushNotifications = 'serviceWorker' in navigator && 'PushManager' in window && 'getKey' in PushSubscription.prototype;\nexport function register() {\n  return function (dispatch, getState) {\n    dispatch(setBrowserSupport(supportsPushNotifications));\n\n    if (supportsPushNotifications) {\n      if (!getApplicationServerKey()) {\n        console.error('The VAPID public key is not set. You will not be able to receive Web Push Notifications.');\n        return;\n      }\n\n      getRegistration().then(getPushSubscription).then(function (_ref2) {\n        var registration = _ref2.registration,\n            subscription = _ref2.subscription;\n\n        if (subscription !== null) {\n          // We have a subscription, check if it is still valid\n          var currentServerKey = new Uint8Array(subscription.options.applicationServerKey).toString();\n          var subscriptionServerKey = urlBase64ToUint8Array(getApplicationServerKey()).toString();\n          var serverEndpoint = getState().getIn(['push_notifications', 'subscription', 'endpoint']); // If the VAPID public key did not change and the endpoint corresponds\n          // to the endpoint saved in the backend, the subscription is valid\n\n          if (subscriptionServerKey === currentServerKey && subscription.endpoint === serverEndpoint) {\n            return subscription;\n          } else {\n            // Something went wrong, try to subscribe again\n            return unsubscribe({\n              registration,\n              subscription\n            }).then(subscribe).then(function (subscription) {\n              return sendSubscriptionToBackend(subscription);\n            });\n          }\n        } // No subscription, try to subscribe\n\n\n        return subscribe(registration).then(function (subscription) {\n          return sendSubscriptionToBackend(subscription);\n        });\n      }).then(function (subscription) {\n        // If we got a PushSubscription (and not a subscription object from the backend)\n        // it means that the backend subscription is valid (and was set during hydration)\n        if (!(subscription instanceof PushSubscription)) {\n          dispatch(setSubscription(subscription));\n\n          if (me) {\n            pushNotificationsSetting.set(me, {\n              alerts: subscription.alerts\n            });\n          }\n        }\n      }).catch(function (error) {\n        if (error.code === 20 && error.name === 'AbortError') {\n          console.warn('Your browser supports Web Push Notifications, but does not seem to implement the VAPID protocol.');\n        } else if (error.code === 5 && error.name === 'InvalidCharacterError') {\n          console.error('The VAPID public key seems to be invalid:', getApplicationServerKey());\n        } // Clear alerts and hide UI settings\n\n\n        dispatch(clearSubscription());\n\n        if (me) {\n          pushNotificationsSetting.remove(me);\n        }\n\n        return getRegistration().then(getPushSubscription).then(unsubscribe);\n      }).catch(console.warn);\n    } else {\n      console.warn('Your browser does not support Web Push Notifications.');\n    }\n  };\n}\nexport function saveSettings() {\n  return function (_, getState) {\n    var state = getState().get('push_notifications');\n    var subscription = state.get('subscription');\n    var alerts = state.get('alerts');\n    var data = {\n      alerts\n    };\n    api().put(\"/api/web/push_subscriptions/\" + subscription.get('id'), {\n      data\n    }).then(function () {\n      if (me) {\n        pushNotificationsSetting.set(me, data);\n      }\n    }).catch(console.warn);\n  };\n}","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/push_notifications/registerer.js"],"names":["api","decode","decodeBase64","pushNotificationsSetting","setBrowserSupport","setSubscription","clearSubscription","me","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","getApplicationServerKey","document","querySelector","getAttribute","getRegistration","navigator","serviceWorker","ready","getPushSubscription","registration","pushManager","getSubscription","then","subscription","subscribe","userVisibleOnly","applicationServerKey","unsubscribe","sendSubscriptionToBackend","params","data","get","post","response","supportsPushNotifications","window","PushSubscription","prototype","register","dispatch","getState","console","error","currentServerKey","Uint8Array","options","toString","subscriptionServerKey","serverEndpoint","getIn","endpoint","set","alerts","catch","code","name","warn","remove","saveSettings","_","state","put"],"mappings":"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","sourcesContent":["import api from '../../api';\nimport { decode as decodeBase64 } from '../../utils/base64';\nimport { pushNotificationsSetting } from '../../settings';\nimport { setBrowserSupport, setSubscription, clearSubscription } from './setter';\nimport { me } from '../../initial_state';\n\n// Taken from https://www.npmjs.com/package/web-push\nconst urlBase64ToUint8Array = (base64String) => {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  return decodeBase64(base64);\n};\n\nconst getApplicationServerKey = () => document.querySelector('[name=\"applicationServerKey\"]').getAttribute('content');\n\nconst getRegistration = () => navigator.serviceWorker.ready;\n\nconst getPushSubscription = (registration) =>\n  registration.pushManager.getSubscription()\n    .then(subscription => ({ registration, subscription }));\n\nconst subscribe = (registration) =>\n  registration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(getApplicationServerKey()),\n  });\n\nconst unsubscribe = ({ registration, subscription }) =>\n  subscription ? subscription.unsubscribe().then(() => registration) : registration;\n\nconst sendSubscriptionToBackend = (subscription) => {\n  const params = { subscription };\n\n  if (me) {\n    const data = pushNotificationsSetting.get(me);\n    if (data) {\n      params.data = data;\n    }\n  }\n\n  return api().post('/api/web/push_subscriptions', params).then(response => response.data);\n};\n\n// Last one checks for payload support: https://web-push-book.gauntface.com/chapter-06/01-non-standards-browsers/#no-payload\nconst supportsPushNotifications = ('serviceWorker' in navigator && 'PushManager' in window && 'getKey' in PushSubscription.prototype);\n\nexport function register () {\n  return (dispatch, getState) => {\n    dispatch(setBrowserSupport(supportsPushNotifications));\n\n    if (supportsPushNotifications) {\n      if (!getApplicationServerKey()) {\n        console.error('The VAPID public key is not set. You will not be able to receive Web Push Notifications.');\n        return;\n      }\n\n      getRegistration()\n        .then(getPushSubscription)\n        .then(({ registration, subscription }) => {\n          if (subscription !== null) {\n            // We have a subscription, check if it is still valid\n            const currentServerKey = (new Uint8Array(subscription.options.applicationServerKey)).toString();\n            const subscriptionServerKey = urlBase64ToUint8Array(getApplicationServerKey()).toString();\n            const serverEndpoint = getState().getIn(['push_notifications', 'subscription', 'endpoint']);\n\n            // If the VAPID public key did not change and the endpoint corresponds\n            // to the endpoint saved in the backend, the subscription is valid\n            if (subscriptionServerKey === currentServerKey && subscription.endpoint === serverEndpoint) {\n              return subscription;\n            } else {\n              // Something went wrong, try to subscribe again\n              return unsubscribe({ registration, subscription }).then(subscribe).then(\n                subscription => sendSubscriptionToBackend(subscription));\n            }\n          }\n\n          // No subscription, try to subscribe\n          return subscribe(registration).then(\n            subscription => sendSubscriptionToBackend(subscription));\n        })\n        .then(subscription => {\n          // If we got a PushSubscription (and not a subscription object from the backend)\n          // it means that the backend subscription is valid (and was set during hydration)\n          if (!(subscription instanceof PushSubscription)) {\n            dispatch(setSubscription(subscription));\n            if (me) {\n              pushNotificationsSetting.set(me, { alerts: subscription.alerts });\n            }\n          }\n        })\n        .catch(error => {\n          if (error.code === 20 && error.name === 'AbortError') {\n            console.warn('Your browser supports Web Push Notifications, but does not seem to implement the VAPID protocol.');\n          } else if (error.code === 5 && error.name === 'InvalidCharacterError') {\n            console.error('The VAPID public key seems to be invalid:', getApplicationServerKey());\n          }\n\n          // Clear alerts and hide UI settings\n          dispatch(clearSubscription());\n          if (me) {\n            pushNotificationsSetting.remove(me);\n          }\n\n          return getRegistration()\n            .then(getPushSubscription)\n            .then(unsubscribe);\n        })\n        .catch(console.warn);\n    } else {\n      console.warn('Your browser does not support Web Push Notifications.');\n    }\n  };\n}\n\nexport function saveSettings() {\n  return (_, getState) => {\n    const state = getState().get('push_notifications');\n    const subscription = state.get('subscription');\n    const alerts = state.get('alerts');\n    const data = { alerts };\n\n    api().put(`/api/web/push_subscriptions/${subscription.get('id')}`, {\n      data,\n    }).then(() => {\n      if (me) {\n        pushNotificationsSetting.set(me, data);\n      }\n    }).catch(console.warn);\n  };\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}