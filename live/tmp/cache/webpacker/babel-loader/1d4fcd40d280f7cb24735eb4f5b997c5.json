{"ast":null,"code":"import { isMobile } from '../is_mobile';\n/** @type {number | null} */\n\nvar cachedScrollbarWidth = null;\n/**\n * @return {number}\n */\n\nvar getActualScrollbarWidth = function getActualScrollbarWidth() {\n  var outer = document.createElement('div');\n  outer.style.visibility = 'hidden';\n  outer.style.overflow = 'scroll';\n  document.body.appendChild(outer);\n  var inner = document.createElement('div');\n  outer.appendChild(inner);\n  var scrollbarWidth = outer.offsetWidth - inner.offsetWidth;\n  outer.parentNode.removeChild(outer);\n  return scrollbarWidth;\n};\n/**\n * @return {number}\n */\n\n\nexport var getScrollbarWidth = function getScrollbarWidth() {\n  if (cachedScrollbarWidth !== null) {\n    return cachedScrollbarWidth;\n  }\n\n  var scrollbarWidth = isMobile(window.innerWidth) ? 0 : getActualScrollbarWidth();\n  cachedScrollbarWidth = scrollbarWidth;\n  return scrollbarWidth;\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/utils/scrollbar.js"],"names":["isMobile","cachedScrollbarWidth","getActualScrollbarWidth","outer","document","createElement","style","visibility","overflow","body","appendChild","inner","scrollbarWidth","offsetWidth","parentNode","removeChild","getScrollbarWidth","window","innerWidth"],"mappings":"AAAA,SAASA,QAAT,QAAyB,cAAzB;AAEA;;AACA,IAAIC,oBAAoB,GAAG,IAA3B;AAEA;AACA;AACA;;AACA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;AACAF,EAAAA,KAAK,CAACG,KAAN,CAAYC,UAAZ,GAAyB,QAAzB;AACAJ,EAAAA,KAAK,CAACG,KAAN,CAAYE,QAAZ,GAAuB,QAAvB;AACAJ,EAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd,CAA0BP,KAA1B;AAEA,MAAMQ,KAAK,GAAGP,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;AACAF,EAAAA,KAAK,CAACO,WAAN,CAAkBC,KAAlB;AAEA,MAAMC,cAAc,GAAGT,KAAK,CAACU,WAAN,GAAoBF,KAAK,CAACE,WAAjD;AACAV,EAAAA,KAAK,CAACW,UAAN,CAAiBC,WAAjB,CAA6BZ,KAA7B;AAEA,SAAOS,cAAP;AACD,CAbD;AAeA;AACA;AACA;;;AACA,OAAO,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AACrC,MAAIf,oBAAoB,KAAK,IAA7B,EAAmC;AACjC,WAAOA,oBAAP;AACD;;AAED,MAAMW,cAAc,GAAGZ,QAAQ,CAACiB,MAAM,CAACC,UAAR,CAAR,GAA8B,CAA9B,GAAkChB,uBAAuB,EAAhF;AACAD,EAAAA,oBAAoB,GAAGW,cAAvB;AAEA,SAAOA,cAAP;AACD,CATM","sourcesContent":["import { isMobile } from '../is_mobile';\n\n/** @type {number | null} */\nlet cachedScrollbarWidth = null;\n\n/**\n * @return {number}\n */\nconst getActualScrollbarWidth = () => {\n  const outer = document.createElement('div');\n  outer.style.visibility = 'hidden';\n  outer.style.overflow = 'scroll';\n  document.body.appendChild(outer);\n\n  const inner = document.createElement('div');\n  outer.appendChild(inner);\n\n  const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;\n  outer.parentNode.removeChild(outer);\n\n  return scrollbarWidth;\n};\n\n/**\n * @return {number}\n */\nexport const getScrollbarWidth = () => {\n  if (cachedScrollbarWidth !== null) {\n    return cachedScrollbarWidth;\n  }\n\n  const scrollbarWidth = isMobile(window.innerWidth) ? 0 : getActualScrollbarWidth();\n  cachedScrollbarWidth = scrollbarWidth;\n\n  return scrollbarWidth;\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}