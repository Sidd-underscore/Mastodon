{"ast":null,"code":"import { ACCOUNT_FOLLOW_SUCCESS, ACCOUNT_UNFOLLOW_SUCCESS } from '../actions/accounts';\nimport { ACCOUNT_IMPORT, ACCOUNTS_IMPORT } from '../actions/importer';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nvar normalizeAccount = function normalizeAccount(state, account) {\n  return state.set(account.id, fromJS({\n    followers_count: account.followers_count,\n    following_count: account.following_count,\n    statuses_count: account.statuses_count\n  }));\n};\n\nvar normalizeAccounts = function normalizeAccounts(state, accounts) {\n  accounts.forEach(function (account) {\n    state = normalizeAccount(state, account);\n  });\n  return state;\n};\n\nvar initialState = ImmutableMap();\nexport default function accountsCounters(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case ACCOUNT_IMPORT:\n      return normalizeAccount(state, action.account);\n\n    case ACCOUNTS_IMPORT:\n      return normalizeAccounts(state, action.accounts);\n\n    case ACCOUNT_FOLLOW_SUCCESS:\n      return action.alreadyFollowing ? state : state.updateIn([action.relationship.id, 'followers_count'], function (num) {\n        return num + 1;\n      });\n\n    case ACCOUNT_UNFOLLOW_SUCCESS:\n      return state.updateIn([action.relationship.id, 'followers_count'], function (num) {\n        return Math.max(0, num - 1);\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/accounts_counters.js"],"names":["ACCOUNT_FOLLOW_SUCCESS","ACCOUNT_UNFOLLOW_SUCCESS","ACCOUNT_IMPORT","ACCOUNTS_IMPORT","Map","ImmutableMap","fromJS","normalizeAccount","state","account","set","id","followers_count","following_count","statuses_count","normalizeAccounts","accounts","forEach","initialState","accountsCounters","action","type","alreadyFollowing","updateIn","relationship","num","Math","max"],"mappings":"AAAA,SACEA,sBADF,EAEEC,wBAFF,QAGO,qBAHP;AAIA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,qBAAhD;AACA,SAASC,GAAG,IAAIC,YAAhB,EAA8BC,MAA9B,QAA4C,WAA5C;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQC,OAAR;AAAA,SAAoBD,KAAK,CAACE,GAAN,CAAUD,OAAO,CAACE,EAAlB,EAAsBL,MAAM,CAAC;AACxEM,IAAAA,eAAe,EAAEH,OAAO,CAACG,eAD+C;AAExEC,IAAAA,eAAe,EAAEJ,OAAO,CAACI,eAF+C;AAGxEC,IAAAA,cAAc,EAAEL,OAAO,CAACK;AAHgD,GAAD,CAA5B,CAApB;AAAA,CAAzB;;AAMA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACP,KAAD,EAAQQ,QAAR,EAAqB;AAC7CA,EAAAA,QAAQ,CAACC,OAAT,CAAiB,UAAAR,OAAO,EAAI;AAC1BD,IAAAA,KAAK,GAAGD,gBAAgB,CAACC,KAAD,EAAQC,OAAR,CAAxB;AACD,GAFD;AAIA,SAAOD,KAAP;AACD,CAND;;AAQA,IAAMU,YAAY,GAAGb,YAAY,EAAjC;AAEA,eAAe,SAASc,gBAAT,CAA0BX,KAA1B,EAAgDY,MAAhD,EAAwD;AAAA,MAA9BZ,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBU,YAAsB;AAAA;;AACrE,UAAOE,MAAM,CAACC,IAAd;AACA,SAAKnB,cAAL;AACE,aAAOK,gBAAgB,CAACC,KAAD,EAAQY,MAAM,CAACX,OAAf,CAAvB;;AACF,SAAKN,eAAL;AACE,aAAOY,iBAAiB,CAACP,KAAD,EAAQY,MAAM,CAACJ,QAAf,CAAxB;;AACF,SAAKhB,sBAAL;AACE,aAAOoB,MAAM,CAACE,gBAAP,GAA0Bd,KAA1B,GACLA,KAAK,CAACe,QAAN,CAAe,CAACH,MAAM,CAACI,YAAP,CAAoBb,EAArB,EAAyB,iBAAzB,CAAf,EAA4D,UAAAc,GAAG;AAAA,eAAIA,GAAG,GAAG,CAAV;AAAA,OAA/D,CADF;;AAEF,SAAKxB,wBAAL;AACE,aAAOO,KAAK,CAACe,QAAN,CAAe,CAACH,MAAM,CAACI,YAAP,CAAoBb,EAArB,EAAyB,iBAAzB,CAAf,EAA4D,UAAAc,GAAG;AAAA,eAAIC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYF,GAAG,GAAG,CAAlB,CAAJ;AAAA,OAA/D,CAAP;;AACF;AACE,aAAOjB,KAAP;AAXF;AAaD;AAAA","sourcesContent":["import {\n  ACCOUNT_FOLLOW_SUCCESS,\n  ACCOUNT_UNFOLLOW_SUCCESS,\n} from '../actions/accounts';\nimport { ACCOUNT_IMPORT, ACCOUNTS_IMPORT } from '../actions/importer';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nconst normalizeAccount = (state, account) => state.set(account.id, fromJS({\n  followers_count: account.followers_count,\n  following_count: account.following_count,\n  statuses_count: account.statuses_count,\n}));\n\nconst normalizeAccounts = (state, accounts) => {\n  accounts.forEach(account => {\n    state = normalizeAccount(state, account);\n  });\n\n  return state;\n};\n\nconst initialState = ImmutableMap();\n\nexport default function accountsCounters(state = initialState, action) {\n  switch(action.type) {\n  case ACCOUNT_IMPORT:\n    return normalizeAccount(state, action.account);\n  case ACCOUNTS_IMPORT:\n    return normalizeAccounts(state, action.accounts);\n  case ACCOUNT_FOLLOW_SUCCESS:\n    return action.alreadyFollowing ? state :\n      state.updateIn([action.relationship.id, 'followers_count'], num => num + 1);\n  case ACCOUNT_UNFOLLOW_SUCCESS:\n    return state.updateIn([action.relationship.id, 'followers_count'], num => Math.max(0, num - 1));\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}