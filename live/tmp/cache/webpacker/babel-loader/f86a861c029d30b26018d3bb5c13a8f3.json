{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/home_timeline/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { expandHomeTimeline } from '../../actions/timelines';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { Link } from 'react-router-dom';\nimport { fetchAnnouncements, toggleShowAnnouncements } from 'mastodon/actions/announcements';\nimport AnnouncementsContainer from 'mastodon/features/getting_started/containers/announcements_container';\nimport classNames from 'classnames';\nimport IconWithBadge from 'mastodon/components/icon_with_badge';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"column.home\",\n    \"defaultMessage\": \"Home\"\n  },\n  show_announcements: {\n    \"id\": \"home.show_announcements\",\n    \"defaultMessage\": \"Show announcements\"\n  },\n  hide_announcements: {\n    \"id\": \"home.hide_announcements\",\n    \"defaultMessage\": \"Hide announcements\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    hasUnread: state.getIn(['timelines', 'home', 'unread']) > 0,\n    isPartial: state.getIn(['timelines', 'home', 'isPartial']),\n    hasAnnouncements: !state.getIn(['announcements', 'items']).isEmpty(),\n    unreadAnnouncements: state.getIn(['announcements', 'items']).count(function (item) {\n      return !item.get('read');\n    }),\n    showAnnouncements: state.getIn(['announcements', 'show'])\n  };\n};\n\nvar HomeTimeline = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(HomeTimeline, _React$PureComponent);\n\n  function HomeTimeline() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handlePin = function () {\n      var _this$props = _this.props,\n          columnId = _this$props.columnId,\n          dispatch = _this$props.dispatch;\n\n      if (columnId) {\n        dispatch(removeColumn(columnId));\n      } else {\n        dispatch(addColumn('HOME', {}));\n      }\n    };\n\n    _this.handleMove = function (dir) {\n      var _this$props2 = _this.props,\n          columnId = _this$props2.columnId,\n          dispatch = _this$props2.dispatch;\n      dispatch(moveColumn(columnId, dir));\n    };\n\n    _this.handleHeaderClick = function () {\n      _this.column.scrollTop();\n    };\n\n    _this.setRef = function (c) {\n      _this.column = c;\n    };\n\n    _this.handleLoadMore = function (maxId) {\n      _this.props.dispatch(expandHomeTimeline({\n        maxId\n      }));\n    };\n\n    _this.handleToggleAnnouncementsClick = function (e) {\n      e.stopPropagation();\n\n      _this.props.dispatch(toggleShowAnnouncements());\n    };\n\n    return _this;\n  }\n\n  var _proto = HomeTimeline.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    setTimeout(function () {\n      return _this2.props.dispatch(fetchAnnouncements());\n    }, 700);\n\n    this._checkIfReloadNeeded(false, this.props.isPartial);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    this._checkIfReloadNeeded(prevProps.isPartial, this.props.isPartial);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this._stopPolling();\n  };\n\n  _proto._checkIfReloadNeeded = function _checkIfReloadNeeded(wasPartial, isPartial) {\n    var dispatch = this.props.dispatch;\n\n    if (wasPartial === isPartial) {\n      return;\n    } else if (!wasPartial && isPartial) {\n      this.polling = setInterval(function () {\n        dispatch(expandHomeTimeline());\n      }, 3000);\n    } else if (wasPartial && !isPartial) {\n      this._stopPolling();\n    }\n  };\n\n  _proto._stopPolling = function _stopPolling() {\n    if (this.polling) {\n      clearInterval(this.polling);\n      this.polling = null;\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        intl = _this$props3.intl,\n        hasUnread = _this$props3.hasUnread,\n        columnId = _this$props3.columnId,\n        multiColumn = _this$props3.multiColumn,\n        hasAnnouncements = _this$props3.hasAnnouncements,\n        unreadAnnouncements = _this$props3.unreadAnnouncements,\n        showAnnouncements = _this$props3.showAnnouncements;\n    var pinned = !!columnId;\n    var announcementsButton = null;\n\n    if (hasAnnouncements) {\n      announcementsButton = /*#__PURE__*/React.createElement(\"button\", {\n        className: classNames('column-header__button', {\n          'active': showAnnouncements\n        }),\n        title: intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements),\n        \"aria-label\": intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements),\n        \"aria-pressed\": showAnnouncements ? 'true' : 'false',\n        onClick: this.handleToggleAnnouncementsClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(IconWithBadge, {\n        id: \"bullhorn\",\n        count: unreadAnnouncements,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      ref: this.setRef,\n      label: intl.formatMessage(messages.title),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      icon: \"home\",\n      active: hasUnread,\n      title: intl.formatMessage(messages.title),\n      onPin: this.handlePin,\n      onMove: this.handleMove,\n      onClick: this.handleHeaderClick,\n      pinned: pinned,\n      multiColumn: multiColumn,\n      extraButton: announcementsButton,\n      appendContent: hasAnnouncements && showAnnouncements && /*#__PURE__*/React.createElement(AnnouncementsContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 67\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ColumnSettingsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(StatusListContainer, {\n      trackScroll: !pinned,\n      scrollKey: \"home_timeline-\" + columnId,\n      onLoadMore: this.handleLoadMore,\n      timelineId: \"home\",\n      emptyMessage: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"empty_column.home\",\n        defaultMessage: \"Your home timeline is empty! Follow more people to fill it up. {suggestions}\",\n        values: {\n          suggestions: /*#__PURE__*/React.createElement(Link, {\n            to: \"/start\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 183\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"empty_column.home.suggestions\",\n            defaultMessage: \"See some suggestions\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 201\n            }\n          }))\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }\n      }),\n      bindToDocument: !multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return HomeTimeline;\n}(React.PureComponent), _class2.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired,\n  hasUnread: PropTypes.bool,\n  isPartial: PropTypes.bool,\n  columnId: PropTypes.string,\n  multiColumn: PropTypes.bool,\n  hasAnnouncements: PropTypes.bool,\n  unreadAnnouncements: PropTypes.number,\n  showAnnouncements: PropTypes.bool\n}, _temp)) || _class) || _class);\nexport { HomeTimeline as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/home_timeline/index.js"],"names":["React","connect","expandHomeTimeline","PropTypes","StatusListContainer","Column","ColumnHeader","addColumn","removeColumn","moveColumn","defineMessages","injectIntl","FormattedMessage","ColumnSettingsContainer","Link","fetchAnnouncements","toggleShowAnnouncements","AnnouncementsContainer","classNames","IconWithBadge","messages","title","show_announcements","hide_announcements","mapStateToProps","state","hasUnread","getIn","isPartial","hasAnnouncements","isEmpty","unreadAnnouncements","count","item","get","showAnnouncements","HomeTimeline","handlePin","props","columnId","dispatch","handleMove","dir","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","maxId","handleToggleAnnouncementsClick","e","stopPropagation","componentDidMount","setTimeout","_checkIfReloadNeeded","componentDidUpdate","prevProps","componentWillUnmount","_stopPolling","wasPartial","polling","setInterval","clearInterval","render","intl","multiColumn","pinned","announcementsButton","formatMessage","suggestions","PureComponent","propTypes","func","isRequired","object","bool","string","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { expandHomeTimeline } from '../../actions/timelines';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { Link } from 'react-router-dom';\nimport { fetchAnnouncements, toggleShowAnnouncements } from 'mastodon/actions/announcements';\nimport AnnouncementsContainer from 'mastodon/features/getting_started/containers/announcements_container';\nimport classNames from 'classnames';\nimport IconWithBadge from 'mastodon/components/icon_with_badge';\n\nconst messages = defineMessages({\n  title: { id: 'column.home', defaultMessage: 'Home' },\n  show_announcements: { id: 'home.show_announcements', defaultMessage: 'Show announcements' },\n  hide_announcements: { id: 'home.hide_announcements', defaultMessage: 'Hide announcements' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'home', 'unread']) > 0,\n  isPartial: state.getIn(['timelines', 'home', 'isPartial']),\n  hasAnnouncements: !state.getIn(['announcements', 'items']).isEmpty(),\n  unreadAnnouncements: state.getIn(['announcements', 'items']).count(item => !item.get('read')),\n  showAnnouncements: state.getIn(['announcements', 'show']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass HomeTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    isPartial: PropTypes.bool,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasAnnouncements: PropTypes.bool,\n    unreadAnnouncements: PropTypes.number,\n    showAnnouncements: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HOME', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandHomeTimeline({ maxId }));\n  }\n\n  componentDidMount () {\n    setTimeout(() => this.props.dispatch(fetchAnnouncements()), 700);\n    this._checkIfReloadNeeded(false, this.props.isPartial);\n  }\n\n  componentDidUpdate (prevProps) {\n    this._checkIfReloadNeeded(prevProps.isPartial, this.props.isPartial);\n  }\n\n  componentWillUnmount () {\n    this._stopPolling();\n  }\n\n  _checkIfReloadNeeded (wasPartial, isPartial) {\n    const { dispatch } = this.props;\n\n    if (wasPartial === isPartial) {\n      return;\n    } else if (!wasPartial && isPartial) {\n      this.polling = setInterval(() => {\n        dispatch(expandHomeTimeline());\n      }, 3000);\n    } else if (wasPartial && !isPartial) {\n      this._stopPolling();\n    }\n  }\n\n  _stopPolling () {\n    if (this.polling) {\n      clearInterval(this.polling);\n      this.polling = null;\n    }\n  }\n\n  handleToggleAnnouncementsClick = (e) => {\n    e.stopPropagation();\n    this.props.dispatch(toggleShowAnnouncements());\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, hasAnnouncements, unreadAnnouncements, showAnnouncements } = this.props;\n    const pinned = !!columnId;\n\n    let announcementsButton = null;\n\n    if (hasAnnouncements) {\n      announcementsButton = (\n        <button\n          className={classNames('column-header__button', { 'active': showAnnouncements })}\n          title={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-label={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-pressed={showAnnouncements ? 'true' : 'false'}\n          onClick={this.handleToggleAnnouncementsClick}\n        >\n          <IconWithBadge id='bullhorn' count={unreadAnnouncements} />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='home'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={announcementsButton}\n          appendContent={hasAnnouncements && showAnnouncements && <AnnouncementsContainer />}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`home_timeline-${columnId}`}\n          onLoadMore={this.handleLoadMore}\n          timelineId='home'\n          emptyMessage={<FormattedMessage id='empty_column.home' defaultMessage='Your home timeline is empty! Follow more people to fill it up. {suggestions}' values={{ suggestions: <Link to='/start'><FormattedMessage id='empty_column.home.suggestions' defaultMessage='See some suggestions' /></Link> }} />}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"column.home","defaultMessage":"Home"},{"id":"home.show_announcements","defaultMessage":"Show announcements"},{"id":"home.hide_announcements","defaultMessage":"Hide announcements"},{"id":"empty_column.home","defaultMessage":"Your home timeline is empty! Follow more people to fill it up. {suggestions}"},{"id":"empty_column.home.suggestions","defaultMessage":"See some suggestions"}]}},"sourceType":"module"}