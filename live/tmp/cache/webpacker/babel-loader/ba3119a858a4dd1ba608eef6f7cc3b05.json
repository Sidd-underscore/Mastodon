{"ast":null,"code":"import axios from 'axios';\nimport LinkHeader from 'http-link-header';\nimport ready from './ready';\nexport var getLinks = function getLinks(response) {\n  var value = response.headers.link;\n\n  if (!value) {\n    return {\n      refs: []\n    };\n  }\n\n  return LinkHeader.parse(value);\n};\nvar csrfHeader = {};\n\nfunction setCSRFHeader() {\n  var csrfToken = document.querySelector('meta[name=csrf-token]');\n\n  if (csrfToken) {\n    csrfHeader['X-CSRF-Token'] = csrfToken.content;\n  }\n}\n\nready(setCSRFHeader);\nexport default (function (getState) {\n  return axios.create({\n    headers: Object.assign(csrfHeader, getState ? {\n      'Authorization': \"Bearer \" + getState().getIn(['meta', 'access_token'], '')\n    } : {}),\n    transformResponse: [function (data) {\n      try {\n        return JSON.parse(data);\n      } catch (Exception) {\n        return data;\n      }\n    }]\n  });\n});","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/api.js"],"names":["axios","LinkHeader","ready","getLinks","response","value","headers","link","refs","parse","csrfHeader","setCSRFHeader","csrfToken","document","querySelector","content","getState","create","Object","assign","getIn","transformResponse","data","JSON","Exception"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,QAAQ,EAAI;AAClC,MAAMC,KAAK,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,IAA/B;;AAEA,MAAI,CAACF,KAAL,EAAY;AACV,WAAO;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAP;AACD;;AAED,SAAOP,UAAU,CAACQ,KAAX,CAAiBJ,KAAjB,CAAP;AACD,CARM;AAUP,IAAIK,UAAU,GAAG,EAAjB;;AAEA,SAASC,aAAT,GAAyB;AACvB,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CAAlB;;AACA,MAAIF,SAAJ,EAAe;AACbF,IAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BE,SAAS,CAACG,OAAvC;AACD;AACF;;AAEDb,KAAK,CAACS,aAAD,CAAL;AAEA,gBAAe,UAAAK,QAAQ;AAAA,SAAIhB,KAAK,CAACiB,MAAN,CAAa;AACtCX,IAAAA,OAAO,EAAEY,MAAM,CAACC,MAAP,CAAcT,UAAd,EAA0BM,QAAQ,GAAG;AAC5C,mCAA2BA,QAAQ,GAAGI,KAAX,CAAiB,CAAC,MAAD,EAAS,cAAT,CAAjB,EAA2C,EAA3C;AADiB,KAAH,GAEvC,EAFK,CAD6B;AAKtCC,IAAAA,iBAAiB,EAAE,CAAC,UAAUC,IAAV,EAAgB;AAClC,UAAI;AACF,eAAOC,IAAI,CAACd,KAAL,CAAWa,IAAX,CAAP;AACD,OAFD,CAEE,OAAME,SAAN,EAAiB;AACjB,eAAOF,IAAP;AACD;AACF,KANkB;AALmB,GAAb,CAAJ;AAAA,CAAvB","sourcesContent":["import axios from 'axios';\nimport LinkHeader from 'http-link-header';\nimport ready from './ready';\n\nexport const getLinks = response => {\n  const value = response.headers.link;\n\n  if (!value) {\n    return { refs: [] };\n  }\n\n  return LinkHeader.parse(value);\n};\n\nlet csrfHeader = {};\n\nfunction setCSRFHeader() {\n  const csrfToken = document.querySelector('meta[name=csrf-token]');\n  if (csrfToken) {\n    csrfHeader['X-CSRF-Token'] = csrfToken.content;\n  }\n}\n\nready(setCSRFHeader);\n\nexport default getState => axios.create({\n  headers: Object.assign(csrfHeader, getState ? {\n    'Authorization': `Bearer ${getState().getIn(['meta', 'access_token'], '')}`,\n  } : {}),\n\n  transformResponse: [function (data) {\n    try {\n      return JSON.parse(data);\n    } catch(Exception) {\n      return data;\n    }\n  }],\n});\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}