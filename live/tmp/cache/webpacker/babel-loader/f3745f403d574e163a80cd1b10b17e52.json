{"ast":null,"code":"// @ts-check\nexport var DECIMAL_UNITS = Object.freeze({\n  ONE: 1,\n  TEN: 10,\n  HUNDRED: Math.pow(10, 2),\n  THOUSAND: Math.pow(10, 3),\n  MILLION: Math.pow(10, 6),\n  BILLION: Math.pow(10, 9),\n  TRILLION: Math.pow(10, 12)\n});\nvar TEN_THOUSAND = DECIMAL_UNITS.THOUSAND * 10;\nvar TEN_MILLIONS = DECIMAL_UNITS.MILLION * 10;\n/**\n * @typedef {[number, number, number]} ShortNumber\n * Array of: shorten number, unit of shorten number and maximum fraction digits\n */\n\n/**\n * @param {number} sourceNumber Number to convert to short number\n * @returns {ShortNumber} Calculated short number\n * @example\n * shortNumber(5936);\n * // => [5.936, 1000, 1]\n */\n\nexport function toShortNumber(sourceNumber) {\n  if (sourceNumber < DECIMAL_UNITS.THOUSAND) {\n    return [sourceNumber, DECIMAL_UNITS.ONE, 0];\n  } else if (sourceNumber < DECIMAL_UNITS.MILLION) {\n    return [sourceNumber / DECIMAL_UNITS.THOUSAND, DECIMAL_UNITS.THOUSAND, sourceNumber < TEN_THOUSAND ? 1 : 0];\n  } else if (sourceNumber < DECIMAL_UNITS.BILLION) {\n    return [sourceNumber / DECIMAL_UNITS.MILLION, DECIMAL_UNITS.MILLION, sourceNumber < TEN_MILLIONS ? 1 : 0];\n  } else if (sourceNumber < DECIMAL_UNITS.TRILLION) {\n    return [sourceNumber / DECIMAL_UNITS.BILLION, DECIMAL_UNITS.BILLION, 0];\n  }\n\n  return [sourceNumber, DECIMAL_UNITS.ONE, 0];\n}\n/**\n * @param {number} sourceNumber Original number that is shortened\n * @param {number} division The scale in which short number is displayed\n * @returns {number} Number that can be used for plurals when short form used\n * @example\n * pluralReady(1793, DECIMAL_UNITS.THOUSAND)\n * // => 1790\n */\n\nexport function pluralReady(sourceNumber, division) {\n  // eslint-disable-next-line eqeqeq\n  if (division == null || division < DECIMAL_UNITS.HUNDRED) {\n    return sourceNumber;\n  }\n\n  var closestScale = division / DECIMAL_UNITS.TEN;\n  return Math.trunc(sourceNumber / closestScale) * closestScale;\n}","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/utils/numbers.js"],"names":["DECIMAL_UNITS","Object","freeze","ONE","TEN","HUNDRED","Math","pow","THOUSAND","MILLION","BILLION","TRILLION","TEN_THOUSAND","TEN_MILLIONS","toShortNumber","sourceNumber","pluralReady","division","closestScale","trunc"],"mappings":"AAAA;AAEA,OAAO,IAAMA,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc;AACzCC,EAAAA,GAAG,EAAE,CADoC;AAEzCC,EAAAA,GAAG,EAAE,EAFoC;AAGzCC,EAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAb,CAHgC;AAIzCC,EAAAA,QAAQ,EAAEF,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAb,CAJ+B;AAKzCE,EAAAA,OAAO,EAAEH,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAb,CALgC;AAMzCG,EAAAA,OAAO,EAAEJ,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAb,CANgC;AAOzCI,EAAAA,QAAQ,EAAEL,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,EAAb;AAP+B,CAAd,CAAtB;AAUP,IAAMK,YAAY,GAAGZ,aAAa,CAACQ,QAAd,GAAyB,EAA9C;AACA,IAAMK,YAAY,GAAGb,aAAa,CAACS,OAAd,GAAwB,EAA7C;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,aAAT,CAAuBC,YAAvB,EAAqC;AAC1C,MAAIA,YAAY,GAAGf,aAAa,CAACQ,QAAjC,EAA2C;AACzC,WAAO,CAACO,YAAD,EAAef,aAAa,CAACG,GAA7B,EAAkC,CAAlC,CAAP;AACD,GAFD,MAEO,IAAIY,YAAY,GAAGf,aAAa,CAACS,OAAjC,EAA0C;AAC/C,WAAO,CACLM,YAAY,GAAGf,aAAa,CAACQ,QADxB,EAELR,aAAa,CAACQ,QAFT,EAGLO,YAAY,GAAGH,YAAf,GAA8B,CAA9B,GAAkC,CAH7B,CAAP;AAKD,GANM,MAMA,IAAIG,YAAY,GAAGf,aAAa,CAACU,OAAjC,EAA0C;AAC/C,WAAO,CACLK,YAAY,GAAGf,aAAa,CAACS,OADxB,EAELT,aAAa,CAACS,OAFT,EAGLM,YAAY,GAAGF,YAAf,GAA8B,CAA9B,GAAkC,CAH7B,CAAP;AAKD,GANM,MAMA,IAAIE,YAAY,GAAGf,aAAa,CAACW,QAAjC,EAA2C;AAChD,WAAO,CACLI,YAAY,GAAGf,aAAa,CAACU,OADxB,EAELV,aAAa,CAACU,OAFT,EAGL,CAHK,CAAP;AAKD;;AAED,SAAO,CAACK,YAAD,EAAef,aAAa,CAACG,GAA7B,EAAkC,CAAlC,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,WAAT,CAAqBD,YAArB,EAAmCE,QAAnC,EAA6C;AAClD;AACA,MAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,GAAGjB,aAAa,CAACK,OAAjD,EAA0D;AACxD,WAAOU,YAAP;AACD;;AAED,MAAIG,YAAY,GAAGD,QAAQ,GAAGjB,aAAa,CAACI,GAA5C;AAEA,SAAOE,IAAI,CAACa,KAAL,CAAWJ,YAAY,GAAGG,YAA1B,IAA0CA,YAAjD;AACD","sourcesContent":["// @ts-check\n\nexport const DECIMAL_UNITS = Object.freeze({\n  ONE: 1,\n  TEN: 10,\n  HUNDRED: Math.pow(10, 2),\n  THOUSAND: Math.pow(10, 3),\n  MILLION: Math.pow(10, 6),\n  BILLION: Math.pow(10, 9),\n  TRILLION: Math.pow(10, 12),\n});\n\nconst TEN_THOUSAND = DECIMAL_UNITS.THOUSAND * 10;\nconst TEN_MILLIONS = DECIMAL_UNITS.MILLION * 10;\n\n/**\n * @typedef {[number, number, number]} ShortNumber\n * Array of: shorten number, unit of shorten number and maximum fraction digits\n */\n\n/**\n * @param {number} sourceNumber Number to convert to short number\n * @returns {ShortNumber} Calculated short number\n * @example\n * shortNumber(5936);\n * // => [5.936, 1000, 1]\n */\nexport function toShortNumber(sourceNumber) {\n  if (sourceNumber < DECIMAL_UNITS.THOUSAND) {\n    return [sourceNumber, DECIMAL_UNITS.ONE, 0];\n  } else if (sourceNumber < DECIMAL_UNITS.MILLION) {\n    return [\n      sourceNumber / DECIMAL_UNITS.THOUSAND,\n      DECIMAL_UNITS.THOUSAND,\n      sourceNumber < TEN_THOUSAND ? 1 : 0,\n    ];\n  } else if (sourceNumber < DECIMAL_UNITS.BILLION) {\n    return [\n      sourceNumber / DECIMAL_UNITS.MILLION,\n      DECIMAL_UNITS.MILLION,\n      sourceNumber < TEN_MILLIONS ? 1 : 0,\n    ];\n  } else if (sourceNumber < DECIMAL_UNITS.TRILLION) {\n    return [\n      sourceNumber / DECIMAL_UNITS.BILLION,\n      DECIMAL_UNITS.BILLION,\n      0,\n    ];\n  }\n\n  return [sourceNumber, DECIMAL_UNITS.ONE, 0];\n}\n\n/**\n * @param {number} sourceNumber Original number that is shortened\n * @param {number} division The scale in which short number is displayed\n * @returns {number} Number that can be used for plurals when short form used\n * @example\n * pluralReady(1793, DECIMAL_UNITS.THOUSAND)\n * // => 1790\n */\nexport function pluralReady(sourceNumber, division) {\n  // eslint-disable-next-line eqeqeq\n  if (division == null || division < DECIMAL_UNITS.HUNDRED) {\n    return sourceNumber;\n  }\n\n  let closestScale = division / DECIMAL_UNITS.TEN;\n\n  return Math.trunc(sourceNumber / closestScale) * closestScale;\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}