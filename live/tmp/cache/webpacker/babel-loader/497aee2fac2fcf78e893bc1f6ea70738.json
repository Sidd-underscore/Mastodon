{"ast":null,"code":"import { STORE_HYDRATE } from '../actions/store';\nimport { SET_BROWSER_SUPPORT, SET_SUBSCRIPTION, CLEAR_SUBSCRIPTION, SET_ALERTS } from '../actions/push_notifications';\nimport Immutable from 'immutable';\nvar initialState = Immutable.Map({\n  subscription: null,\n  alerts: new Immutable.Map({\n    follow: false,\n    follow_request: false,\n    favourite: false,\n    reblog: false,\n    mention: false,\n    poll: false\n  }),\n  isSubscribed: false,\n  browserSupport: false\n});\nexport default function push_subscriptions(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case STORE_HYDRATE:\n      {\n        var push_subscription = action.state.get('push_subscription');\n\n        if (push_subscription) {\n          return state.set('subscription', new Immutable.Map({\n            id: push_subscription.get('id'),\n            endpoint: push_subscription.get('endpoint')\n          })).set('alerts', push_subscription.get('alerts') || initialState.get('alerts')).set('isSubscribed', true);\n        }\n\n        return state;\n      }\n\n    case SET_SUBSCRIPTION:\n      return state.set('subscription', new Immutable.Map({\n        id: action.subscription.id,\n        endpoint: action.subscription.endpoint\n      })).set('alerts', new Immutable.Map(action.subscription.alerts)).set('isSubscribed', true);\n\n    case SET_BROWSER_SUPPORT:\n      return state.set('browserSupport', action.value);\n\n    case CLEAR_SUBSCRIPTION:\n      return initialState;\n\n    case SET_ALERTS:\n      return state.setIn(action.path, action.value);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/push_notifications.js"],"names":["STORE_HYDRATE","SET_BROWSER_SUPPORT","SET_SUBSCRIPTION","CLEAR_SUBSCRIPTION","SET_ALERTS","Immutable","initialState","Map","subscription","alerts","follow","follow_request","favourite","reblog","mention","poll","isSubscribed","browserSupport","push_subscriptions","state","action","type","push_subscription","get","set","id","endpoint","value","setIn","path"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,EAAgDC,kBAAhD,EAAoEC,UAApE,QAAsF,+BAAtF;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,IAAMC,YAAY,GAAGD,SAAS,CAACE,GAAV,CAAc;AACjCC,EAAAA,YAAY,EAAE,IADmB;AAEjCC,EAAAA,MAAM,EAAE,IAAIJ,SAAS,CAACE,GAAd,CAAkB;AACxBG,IAAAA,MAAM,EAAE,KADgB;AAExBC,IAAAA,cAAc,EAAE,KAFQ;AAGxBC,IAAAA,SAAS,EAAE,KAHa;AAIxBC,IAAAA,MAAM,EAAE,KAJgB;AAKxBC,IAAAA,OAAO,EAAE,KALe;AAMxBC,IAAAA,IAAI,EAAE;AANkB,GAAlB,CAFyB;AAUjCC,EAAAA,YAAY,EAAE,KAVmB;AAWjCC,EAAAA,cAAc,EAAE;AAXiB,CAAd,CAArB;AAcA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAkDC,MAAlD,EAA0D;AAAA,MAA9BD,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBb,YAAsB;AAAA;;AACvE,UAAOc,MAAM,CAACC,IAAd;AACA,SAAKrB,aAAL;AAAoB;AAClB,YAAMsB,iBAAiB,GAAGF,MAAM,CAACD,KAAP,CAAaI,GAAb,CAAiB,mBAAjB,CAA1B;;AAEA,YAAID,iBAAJ,EAAuB;AACrB,iBAAOH,KAAK,CACTK,GADI,CACA,cADA,EACgB,IAAInB,SAAS,CAACE,GAAd,CAAkB;AACrCkB,YAAAA,EAAE,EAAEH,iBAAiB,CAACC,GAAlB,CAAsB,IAAtB,CADiC;AAErCG,YAAAA,QAAQ,EAAEJ,iBAAiB,CAACC,GAAlB,CAAsB,UAAtB;AAF2B,WAAlB,CADhB,EAKJC,GALI,CAKA,QALA,EAKUF,iBAAiB,CAACC,GAAlB,CAAsB,QAAtB,KAAmCjB,YAAY,CAACiB,GAAb,CAAiB,QAAjB,CAL7C,EAMJC,GANI,CAMA,cANA,EAMgB,IANhB,CAAP;AAOD;;AAED,eAAOL,KAAP;AACD;;AACD,SAAKjB,gBAAL;AACE,aAAOiB,KAAK,CACTK,GADI,CACA,cADA,EACgB,IAAInB,SAAS,CAACE,GAAd,CAAkB;AACrCkB,QAAAA,EAAE,EAAEL,MAAM,CAACZ,YAAP,CAAoBiB,EADa;AAErCC,QAAAA,QAAQ,EAAEN,MAAM,CAACZ,YAAP,CAAoBkB;AAFO,OAAlB,CADhB,EAKJF,GALI,CAKA,QALA,EAKU,IAAInB,SAAS,CAACE,GAAd,CAAkBa,MAAM,CAACZ,YAAP,CAAoBC,MAAtC,CALV,EAMJe,GANI,CAMA,cANA,EAMgB,IANhB,CAAP;;AAOF,SAAKvB,mBAAL;AACE,aAAOkB,KAAK,CAACK,GAAN,CAAU,gBAAV,EAA4BJ,MAAM,CAACO,KAAnC,CAAP;;AACF,SAAKxB,kBAAL;AACE,aAAOG,YAAP;;AACF,SAAKF,UAAL;AACE,aAAOe,KAAK,CAACS,KAAN,CAAYR,MAAM,CAACS,IAAnB,EAAyBT,MAAM,CAACO,KAAhC,CAAP;;AACF;AACE,aAAOR,KAAP;AA/BF;AAiCD;AAAA","sourcesContent":["import { STORE_HYDRATE } from '../actions/store';\nimport { SET_BROWSER_SUPPORT, SET_SUBSCRIPTION, CLEAR_SUBSCRIPTION, SET_ALERTS } from '../actions/push_notifications';\nimport Immutable from 'immutable';\n\nconst initialState = Immutable.Map({\n  subscription: null,\n  alerts: new Immutable.Map({\n    follow: false,\n    follow_request: false,\n    favourite: false,\n    reblog: false,\n    mention: false,\n    poll: false,\n  }),\n  isSubscribed: false,\n  browserSupport: false,\n});\n\nexport default function push_subscriptions(state = initialState, action) {\n  switch(action.type) {\n  case STORE_HYDRATE: {\n    const push_subscription = action.state.get('push_subscription');\n\n    if (push_subscription) {\n      return state\n        .set('subscription', new Immutable.Map({\n          id: push_subscription.get('id'),\n          endpoint: push_subscription.get('endpoint'),\n        }))\n        .set('alerts', push_subscription.get('alerts') || initialState.get('alerts'))\n        .set('isSubscribed', true);\n    }\n\n    return state;\n  }\n  case SET_SUBSCRIPTION:\n    return state\n      .set('subscription', new Immutable.Map({\n        id: action.subscription.id,\n        endpoint: action.subscription.endpoint,\n      }))\n      .set('alerts', new Immutable.Map(action.subscription.alerts))\n      .set('isSubscribed', true);\n  case SET_BROWSER_SUPPORT:\n    return state.set('browserSupport', action.value);\n  case CLEAR_SUBSCRIPTION:\n    return initialState;\n  case SET_ALERTS:\n    return state.setIn(action.path, action.value);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}