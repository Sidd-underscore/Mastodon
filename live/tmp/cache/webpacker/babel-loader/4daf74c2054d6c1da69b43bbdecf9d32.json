{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/components/modal_root.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getScrollbarWidth } from 'mastodon/utils/scrollbar';\nimport Base from 'mastodon/components/modal_root';\nimport BundleContainer from '../containers/bundle_container';\nimport BundleModalError from './bundle_modal_error';\nimport ModalLoading from './modal_loading';\nimport ActionsModal from './actions_modal';\nimport MediaModal from './media_modal';\nimport VideoModal from './video_modal';\nimport BoostModal from './boost_modal';\nimport AudioModal from './audio_modal';\nimport ConfirmationModal from './confirmation_modal';\nimport FocalPointModal from './focal_point_modal';\nimport { MuteModal, BlockModal, ReportModal, EmbedModal, ListEditor, ListAdder } from '../../../features/ui/util/async-components';\nvar MODAL_COMPONENTS = {\n  'MEDIA': function MEDIA() {\n    return Promise.resolve({\n      default: MediaModal\n    });\n  },\n  'VIDEO': function VIDEO() {\n    return Promise.resolve({\n      default: VideoModal\n    });\n  },\n  'AUDIO': function AUDIO() {\n    return Promise.resolve({\n      default: AudioModal\n    });\n  },\n  'BOOST': function BOOST() {\n    return Promise.resolve({\n      default: BoostModal\n    });\n  },\n  'CONFIRM': function CONFIRM() {\n    return Promise.resolve({\n      default: ConfirmationModal\n    });\n  },\n  'MUTE': MuteModal,\n  'BLOCK': BlockModal,\n  'REPORT': ReportModal,\n  'ACTIONS': function ACTIONS() {\n    return Promise.resolve({\n      default: ActionsModal\n    });\n  },\n  'EMBED': EmbedModal,\n  'LIST_EDITOR': ListEditor,\n  'FOCAL_POINT': function FOCAL_POINT() {\n    return Promise.resolve({\n      default: FocalPointModal\n    });\n  },\n  'LIST_ADDER': ListAdder\n};\n\nvar ModalRoot = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(ModalRoot, _React$PureComponent);\n\n  function ModalRoot() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n    _this.state = {\n      backgroundColor: null\n    };\n\n    _this.setBackgroundColor = function (color) {\n      _this.setState({\n        backgroundColor: color\n      });\n    };\n\n    _this.renderLoading = function (modalId) {\n      return function () {\n        return ['MEDIA', 'VIDEO', 'BOOST', 'CONFIRM', 'ACTIONS'].indexOf(modalId) === -1 ? /*#__PURE__*/React.createElement(ModalLoading, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 88\n          }\n        }) : null;\n      };\n    };\n\n    _this.renderError = function (props) {\n      var onClose = _this.props.onClose;\n      return /*#__PURE__*/React.createElement(BundleModalError, _extends({}, props, {\n        onClose: onClose,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 12\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  var _proto = ModalRoot.prototype;\n\n  _proto.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate() {\n    return {\n      visible: !!this.props.type\n    };\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState, _ref) {\n    var visible = _ref.visible;\n\n    if (visible) {\n      document.body.classList.add('with-modals--active');\n      document.documentElement.style.marginRight = getScrollbarWidth() + \"px\";\n    } else {\n      document.body.classList.remove('with-modals--active');\n      document.documentElement.style.marginRight = 0;\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        type = _this$props.type,\n        props = _this$props.props,\n        onClose = _this$props.onClose;\n    var backgroundColor = this.state.backgroundColor;\n    var visible = !!type;\n    return /*#__PURE__*/React.createElement(Base, {\n      backgroundColor: backgroundColor,\n      onClose: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, visible && /*#__PURE__*/React.createElement(BundleContainer, {\n      fetchComponent: MODAL_COMPONENTS[type],\n      loading: this.renderLoading(type),\n      error: this.renderError,\n      renderDelay: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, function (SpecificComponent) {\n      return /*#__PURE__*/React.createElement(SpecificComponent, _extends({}, props, {\n        onChangeBackgroundColor: _this2.setBackgroundColor,\n        onClose: onClose,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 37\n        }\n      }));\n    }));\n  };\n\n  return ModalRoot;\n}(React.PureComponent);\n\nModalRoot.propTypes = {\n  type: PropTypes.string,\n  props: PropTypes.object,\n  onClose: PropTypes.func.isRequired\n};\nexport { ModalRoot as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/components/modal_root.js"],"names":["React","PropTypes","getScrollbarWidth","Base","BundleContainer","BundleModalError","ModalLoading","ActionsModal","MediaModal","VideoModal","BoostModal","AudioModal","ConfirmationModal","FocalPointModal","MuteModal","BlockModal","ReportModal","EmbedModal","ListEditor","ListAdder","MODAL_COMPONENTS","Promise","resolve","default","ModalRoot","state","backgroundColor","setBackgroundColor","color","setState","renderLoading","modalId","indexOf","renderError","props","onClose","getSnapshotBeforeUpdate","visible","type","componentDidUpdate","prevProps","prevState","document","body","classList","add","documentElement","style","marginRight","remove","render","SpecificComponent","PureComponent","propTypes","string","object","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getScrollbarWidth } from 'mastodon/utils/scrollbar';\nimport Base from 'mastodon/components/modal_root';\nimport BundleContainer from '../containers/bundle_container';\nimport BundleModalError from './bundle_modal_error';\nimport ModalLoading from './modal_loading';\nimport ActionsModal from './actions_modal';\nimport MediaModal from './media_modal';\nimport VideoModal from './video_modal';\nimport BoostModal from './boost_modal';\nimport AudioModal from './audio_modal';\nimport ConfirmationModal from './confirmation_modal';\nimport FocalPointModal from './focal_point_modal';\nimport {\n  MuteModal,\n  BlockModal,\n  ReportModal,\n  EmbedModal,\n  ListEditor,\n  ListAdder,\n} from '../../../features/ui/util/async-components';\n\nconst MODAL_COMPONENTS = {\n  'MEDIA': () => Promise.resolve({ default: MediaModal }),\n  'VIDEO': () => Promise.resolve({ default: VideoModal }),\n  'AUDIO': () => Promise.resolve({ default: AudioModal }),\n  'BOOST': () => Promise.resolve({ default: BoostModal }),\n  'CONFIRM': () => Promise.resolve({ default: ConfirmationModal }),\n  'MUTE': MuteModal,\n  'BLOCK': BlockModal,\n  'REPORT': ReportModal,\n  'ACTIONS': () => Promise.resolve({ default: ActionsModal }),\n  'EMBED': EmbedModal,\n  'LIST_EDITOR': ListEditor,\n  'FOCAL_POINT': () => Promise.resolve({ default: FocalPointModal }),\n  'LIST_ADDER':ListAdder,\n};\n\nexport default class ModalRoot extends React.PureComponent {\n\n  static propTypes = {\n    type: PropTypes.string,\n    props: PropTypes.object,\n    onClose: PropTypes.func.isRequired,\n  };\n\n  state = {\n    backgroundColor: null,\n  };\n\n  getSnapshotBeforeUpdate () {\n    return { visible: !!this.props.type };\n  }\n\n  componentDidUpdate (prevProps, prevState, { visible }) {\n    if (visible) {\n      document.body.classList.add('with-modals--active');\n      document.documentElement.style.marginRight = `${getScrollbarWidth()}px`;\n    } else {\n      document.body.classList.remove('with-modals--active');\n      document.documentElement.style.marginRight = 0;\n    }\n  }\n\n  setBackgroundColor = color => {\n    this.setState({ backgroundColor: color });\n  }\n\n  renderLoading = modalId => () => {\n    return ['MEDIA', 'VIDEO', 'BOOST', 'CONFIRM', 'ACTIONS'].indexOf(modalId) === -1 ? <ModalLoading /> : null;\n  }\n\n  renderError = (props) => {\n    const { onClose } = this.props;\n\n    return <BundleModalError {...props} onClose={onClose} />;\n  }\n\n  render () {\n    const { type, props, onClose } = this.props;\n    const { backgroundColor } = this.state;\n    const visible = !!type;\n\n    return (\n      <Base backgroundColor={backgroundColor} onClose={onClose}>\n        {visible && (\n          <BundleContainer fetchComponent={MODAL_COMPONENTS[type]} loading={this.renderLoading(type)} error={this.renderError} renderDelay={200}>\n            {(SpecificComponent) => <SpecificComponent {...props} onChangeBackgroundColor={this.setBackgroundColor} onClose={onClose} />}\n          </BundleContainer>\n        )}\n      </Base>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}