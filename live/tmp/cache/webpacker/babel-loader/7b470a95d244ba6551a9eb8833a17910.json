{"ast":null,"code":"import { connect } from 'react-redux';\nimport { debounce } from 'lodash';\nimport Poll from 'mastodon/components/poll';\nimport { fetchPoll, vote } from 'mastodon/actions/polls';\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {\n  var pollId = _ref.pollId;\n  return {\n    refresh: debounce(function () {\n      dispatch(fetchPoll(pollId));\n    }, 1000, {\n      leading: true\n    }),\n\n    onVote(choices) {\n      dispatch(vote(pollId, choices));\n    }\n\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state, _ref2) {\n  var pollId = _ref2.pollId;\n  return {\n    poll: state.getIn(['polls', pollId])\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Poll);","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/containers/poll_container.js"],"names":["connect","debounce","Poll","fetchPoll","vote","mapDispatchToProps","dispatch","pollId","refresh","leading","onVote","choices","mapStateToProps","state","poll","getIn"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,wBAAhC;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,MAAaC,MAAb,QAAaA,MAAb;AAAA,SAA2B;AACpDC,IAAAA,OAAO,EAAEP,QAAQ,CACf,YAAM;AACJK,MAAAA,QAAQ,CAACH,SAAS,CAACI,MAAD,CAAV,CAAR;AACD,KAHc,EAIf,IAJe,EAKf;AAAEE,MAAAA,OAAO,EAAE;AAAX,KALe,CADmC;;AASpDC,IAAAA,MAAM,CAAEC,OAAF,EAAW;AACfL,MAAAA,QAAQ,CAACF,IAAI,CAACG,MAAD,EAASI,OAAT,CAAL,CAAR;AACD;;AAXmD,GAA3B;AAAA,CAA3B;;AAcA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,MAAUN,MAAV,SAAUA,MAAV;AAAA,SAAwB;AAC9CO,IAAAA,IAAI,EAAED,KAAK,CAACE,KAAN,CAAY,CAAC,OAAD,EAAUR,MAAV,CAAZ;AADwC,GAAxB;AAAA,CAAxB;;AAIA,eAAeP,OAAO,CAACY,eAAD,EAAkBP,kBAAlB,CAAP,CAA6CH,IAA7C,CAAf","sourcesContent":["import { connect } from 'react-redux';\nimport { debounce } from 'lodash';\n\nimport Poll from 'mastodon/components/poll';\nimport { fetchPoll, vote } from 'mastodon/actions/polls';\n\nconst mapDispatchToProps = (dispatch, { pollId }) => ({\n  refresh: debounce(\n    () => {\n      dispatch(fetchPoll(pollId));\n    },\n    1000,\n    { leading: true },\n  ),\n\n  onVote (choices) {\n    dispatch(vote(pollId, choices));\n  },\n});\n\nconst mapStateToProps = (state, { pollId }) => ({\n  poll: state.getIn(['polls', pollId]),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Poll);\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}