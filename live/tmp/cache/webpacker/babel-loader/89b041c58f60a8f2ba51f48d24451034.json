{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/containers/mastodon.js\";\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport configureStore from '../store/configureStore';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { ScrollContext } from 'react-router-scroll-4';\nimport UI from '../features/ui';\nimport { fetchCustomEmojis } from '../actions/custom_emojis';\nimport { hydrateStore } from '../actions/store';\nimport { connectUserStream } from '../actions/streaming';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport { getLocale } from '../locales';\nimport initialState from '../initial_state';\nimport ErrorBoundary from '../components/error_boundary';\n\nvar _getLocale = getLocale(),\n    localeData = _getLocale.localeData,\n    messages = _getLocale.messages;\n\naddLocaleData(localeData);\nexport var store = configureStore();\nvar hydrateAction = hydrateStore(initialState);\nstore.dispatch(hydrateAction);\nstore.dispatch(fetchCustomEmojis());\n\nvar Mastodon = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(Mastodon, _React$PureComponent);\n\n  function Mastodon() {\n    return _React$PureComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = Mastodon.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.disconnect = store.dispatch(connectUserStream());\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  };\n\n  _proto.shouldUpdateScroll = function shouldUpdateScroll(prevRouterProps, _ref) {\n    var _location$state, _location$state2, _prevRouterProps$loca, _prevRouterProps$loca2;\n\n    var location = _ref.location;\n    return !((_location$state = location.state) != null && _location$state.mastodonModalKey && ((_location$state2 = location.state) == null ? void 0 : _location$state2.mastodonModalKey) !== (prevRouterProps == null ? void 0 : (_prevRouterProps$loca = prevRouterProps.location) == null ? void 0 : (_prevRouterProps$loca2 = _prevRouterProps$loca.state) == null ? void 0 : _prevRouterProps$loca2.mastodonModalKey));\n  };\n\n  _proto.render = function render() {\n    var locale = this.props.locale;\n    return /*#__PURE__*/React.createElement(IntlProvider, {\n      locale: locale,\n      messages: messages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ErrorBoundary, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(BrowserRouter, {\n      basename: \"/web\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ScrollContext, {\n      shouldUpdateScroll: this.shouldUpdateScroll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      component: UI,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }))))));\n  };\n\n  return Mastodon;\n}(React.PureComponent);\n\nMastodon.propTypes = {\n  locale: PropTypes.string.isRequired\n};\nexport { Mastodon as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/containers/mastodon.js"],"names":["React","Provider","PropTypes","configureStore","BrowserRouter","Route","ScrollContext","UI","fetchCustomEmojis","hydrateStore","connectUserStream","IntlProvider","addLocaleData","getLocale","initialState","ErrorBoundary","localeData","messages","store","hydrateAction","dispatch","Mastodon","componentDidMount","disconnect","componentWillUnmount","shouldUpdateScroll","prevRouterProps","location","state","mastodonModalKey","render","locale","props","PureComponent","propTypes","string","isRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,kBAArC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,EAAP,MAAe,gBAAf;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,YAA5C;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;;AAEA,iBAAiCF,SAAS,EAA1C;AAAA,IAAQG,UAAR,cAAQA,UAAR;AAAA,IAAoBC,QAApB,cAAoBA,QAApB;;AACAL,aAAa,CAACI,UAAD,CAAb;AAEA,OAAO,IAAME,KAAK,GAAGf,cAAc,EAA5B;AACP,IAAMgB,aAAa,GAAGV,YAAY,CAACK,YAAD,CAAlC;AAEAI,KAAK,CAACE,QAAN,CAAeD,aAAf;AACAD,KAAK,CAACE,QAAN,CAAeZ,iBAAiB,EAAhC;;IAEqBa,Q;;;;;;;;;SAMnBC,iB,GAAA,6BAAoB;AAClB,SAAKC,UAAL,GAAkBL,KAAK,CAACE,QAAN,CAAeV,iBAAiB,EAAhC,CAAlB;AACD,G;;SAEDc,oB,GAAA,gCAAwB;AACtB,QAAI,KAAKD,UAAT,EAAqB;AACnB,WAAKA,UAAL;AACA,WAAKA,UAAL,GAAkB,IAAlB;AACD;AACF,G;;SAEDE,kB,GAAA,4BAAoBC,eAApB,QAAmD;AAAA;;AAAA,QAAZC,QAAY,QAAZA,QAAY;AACjD,WAAO,EAAE,mBAAAA,QAAQ,CAACC,KAAT,6BAAgBC,gBAAhB,IAAoC,qBAAAF,QAAQ,CAACC,KAAT,sCAAgBC,gBAAhB,OAAqCH,eAArC,6CAAqCA,eAAe,CAAEC,QAAtD,+CAAqC,sBAA2BC,KAAhE,qBAAqC,uBAAkCC,gBAAvE,CAAtC,CAAP;AACD,G;;SAEDC,M,GAAA,kBAAU;AACR,QAAQC,MAAR,GAAmB,KAAKC,KAAxB,CAAQD,MAAR;AAEA,wBACE,oBAAC,YAAD;AAAc,MAAA,MAAM,EAAEA,MAAtB;AAA8B,MAAA,QAAQ,EAAEd,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAe,MAAA,QAAQ,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAe,MAAA,kBAAkB,EAAE,KAAKO,kBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,SAAS,EAAElB,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CADF,CADF,CADF;AAaD,G;;;EArCmCP,KAAK,CAACiC,a;;AAAvBZ,Q,CAEZa,S,GAAY;AACjBH,EAAAA,MAAM,EAAE7B,SAAS,CAACiC,MAAV,CAAiBC;AADR,C;SAFAf,Q","sourcesContent":["import React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport configureStore from '../store/configureStore';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { ScrollContext } from 'react-router-scroll-4';\nimport UI from '../features/ui';\nimport { fetchCustomEmojis } from '../actions/custom_emojis';\nimport { hydrateStore } from '../actions/store';\nimport { connectUserStream } from '../actions/streaming';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport { getLocale } from '../locales';\nimport initialState from '../initial_state';\nimport ErrorBoundary from '../components/error_boundary';\n\nconst { localeData, messages } = getLocale();\naddLocaleData(localeData);\n\nexport const store = configureStore();\nconst hydrateAction = hydrateStore(initialState);\n\nstore.dispatch(hydrateAction);\nstore.dispatch(fetchCustomEmojis());\n\nexport default class Mastodon extends React.PureComponent {\n\n  static propTypes = {\n    locale: PropTypes.string.isRequired,\n  };\n\n  componentDidMount() {\n    this.disconnect = store.dispatch(connectUserStream());\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  shouldUpdateScroll (prevRouterProps, { location }) {\n    return !(location.state?.mastodonModalKey && location.state?.mastodonModalKey !== prevRouterProps?.location?.state?.mastodonModalKey);\n  }\n\n  render () {\n    const { locale } = this.props;\n\n    return (\n      <IntlProvider locale={locale} messages={messages}>\n        <Provider store={store}>\n          <ErrorBoundary>\n            <BrowserRouter basename='/web'>\n              <ScrollContext shouldUpdateScroll={this.shouldUpdateScroll}>\n                <Route path='/' component={UI} />\n              </ScrollContext>\n            </BrowserRouter>\n          </ErrorBoundary>\n        </Provider>\n      </IntlProvider>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}