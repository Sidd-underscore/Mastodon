{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport api from '../api';\nimport { importFetchedAccounts } from './importer';\nimport { fetchRelationships } from './accounts';\nexport var DIRECTORY_FETCH_REQUEST = 'DIRECTORY_FETCH_REQUEST';\nexport var DIRECTORY_FETCH_SUCCESS = 'DIRECTORY_FETCH_SUCCESS';\nexport var DIRECTORY_FETCH_FAIL = 'DIRECTORY_FETCH_FAIL';\nexport var DIRECTORY_EXPAND_REQUEST = 'DIRECTORY_EXPAND_REQUEST';\nexport var DIRECTORY_EXPAND_SUCCESS = 'DIRECTORY_EXPAND_SUCCESS';\nexport var DIRECTORY_EXPAND_FAIL = 'DIRECTORY_EXPAND_FAIL';\nexport var fetchDirectory = function fetchDirectory(params) {\n  return function (dispatch, getState) {\n    dispatch(fetchDirectoryRequest());\n    api(getState).get('/api/v1/directory', {\n      params: _extends({}, params, {\n        limit: 20\n      })\n    }).then(function (_ref) {\n      var data = _ref.data;\n      dispatch(importFetchedAccounts(data));\n      dispatch(fetchDirectorySuccess(data));\n      dispatch(fetchRelationships(data.map(function (x) {\n        return x.id;\n      })));\n    }).catch(function (error) {\n      return dispatch(fetchDirectoryFail(error));\n    });\n  };\n};\nexport var fetchDirectoryRequest = function fetchDirectoryRequest() {\n  return {\n    type: DIRECTORY_FETCH_REQUEST\n  };\n};\nexport var fetchDirectorySuccess = function fetchDirectorySuccess(accounts) {\n  return {\n    type: DIRECTORY_FETCH_SUCCESS,\n    accounts\n  };\n};\nexport var fetchDirectoryFail = function fetchDirectoryFail(error) {\n  return {\n    type: DIRECTORY_FETCH_FAIL,\n    error\n  };\n};\nexport var expandDirectory = function expandDirectory(params) {\n  return function (dispatch, getState) {\n    dispatch(expandDirectoryRequest());\n    var loadedItems = getState().getIn(['user_lists', 'directory', 'items']).size;\n    api(getState).get('/api/v1/directory', {\n      params: _extends({}, params, {\n        offset: loadedItems,\n        limit: 20\n      })\n    }).then(function (_ref2) {\n      var data = _ref2.data;\n      dispatch(importFetchedAccounts(data));\n      dispatch(expandDirectorySuccess(data));\n      dispatch(fetchRelationships(data.map(function (x) {\n        return x.id;\n      })));\n    }).catch(function (error) {\n      return dispatch(expandDirectoryFail(error));\n    });\n  };\n};\nexport var expandDirectoryRequest = function expandDirectoryRequest() {\n  return {\n    type: DIRECTORY_EXPAND_REQUEST\n  };\n};\nexport var expandDirectorySuccess = function expandDirectorySuccess(accounts) {\n  return {\n    type: DIRECTORY_EXPAND_SUCCESS,\n    accounts\n  };\n};\nexport var expandDirectoryFail = function expandDirectoryFail(error) {\n  return {\n    type: DIRECTORY_EXPAND_FAIL,\n    error\n  };\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/directory.js"],"names":["api","importFetchedAccounts","fetchRelationships","DIRECTORY_FETCH_REQUEST","DIRECTORY_FETCH_SUCCESS","DIRECTORY_FETCH_FAIL","DIRECTORY_EXPAND_REQUEST","DIRECTORY_EXPAND_SUCCESS","DIRECTORY_EXPAND_FAIL","fetchDirectory","params","dispatch","getState","fetchDirectoryRequest","get","limit","then","data","fetchDirectorySuccess","map","x","id","catch","error","fetchDirectoryFail","type","accounts","expandDirectory","expandDirectoryRequest","loadedItems","getIn","size","offset","expandDirectorySuccess","expandDirectoryFail"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,SAASC,qBAAT,QAAsC,YAAtC;AACA,SAASC,kBAAT,QAAmC,YAAnC;AAEA,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,oBAAoB,GAAM,sBAAhC;AAEP,OAAO,IAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,IAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,IAAMC,qBAAqB,GAAM,uBAAjC;AAEP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,MAAM;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9DD,IAAAA,QAAQ,CAACE,qBAAqB,EAAtB,CAAR;AAEAb,IAAAA,GAAG,CAACY,QAAD,CAAH,CAAcE,GAAd,CAAkB,mBAAlB,EAAuC;AAAEJ,MAAAA,MAAM,eAAOA,MAAP;AAAeK,QAAAA,KAAK,EAAE;AAAtB;AAAR,KAAvC,EAA6EC,IAA7E,CAAkF,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AAC9FN,MAAAA,QAAQ,CAACV,qBAAqB,CAACgB,IAAD,CAAtB,CAAR;AACAN,MAAAA,QAAQ,CAACO,qBAAqB,CAACD,IAAD,CAAtB,CAAR;AACAN,MAAAA,QAAQ,CAACT,kBAAkB,CAACe,IAAI,CAACE,GAAL,CAAS,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAN;AAAA,OAAV,CAAD,CAAnB,CAAR;AACD,KAJD,EAIGC,KAJH,CAIS,UAAAC,KAAK;AAAA,aAAIZ,QAAQ,CAACa,kBAAkB,CAACD,KAAD,CAAnB,CAAZ;AAAA,KAJd;AAKD,GARmC;AAAA,CAA7B;AAUP,OAAO,IAAMV,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAO;AAC1CY,IAAAA,IAAI,EAAEtB;AADoC,GAAP;AAAA,CAA9B;AAIP,OAAO,IAAMe,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAQ,QAAQ;AAAA,SAAK;AAChDD,IAAAA,IAAI,EAAErB,uBAD0C;AAEhDsB,IAAAA;AAFgD,GAAL;AAAA,CAAtC;AAKP,OAAO,IAAMF,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAD,KAAK;AAAA,SAAK;AAC1CE,IAAAA,IAAI,EAAEpB,oBADoC;AAE1CkB,IAAAA;AAF0C,GAAL;AAAA,CAAhC;AAKP,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAAjB,MAAM;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC/DD,IAAAA,QAAQ,CAACiB,sBAAsB,EAAvB,CAAR;AAEA,QAAMC,WAAW,GAAGjB,QAAQ,GAAGkB,KAAX,CAAiB,CAAC,YAAD,EAAe,WAAf,EAA4B,OAA5B,CAAjB,EAAuDC,IAA3E;AAEA/B,IAAAA,GAAG,CAACY,QAAD,CAAH,CAAcE,GAAd,CAAkB,mBAAlB,EAAuC;AAAEJ,MAAAA,MAAM,eAAOA,MAAP;AAAesB,QAAAA,MAAM,EAAEH,WAAvB;AAAoCd,QAAAA,KAAK,EAAE;AAA3C;AAAR,KAAvC,EAAkGC,IAAlG,CAAuG,iBAAc;AAAA,UAAXC,IAAW,SAAXA,IAAW;AACnHN,MAAAA,QAAQ,CAACV,qBAAqB,CAACgB,IAAD,CAAtB,CAAR;AACAN,MAAAA,QAAQ,CAACsB,sBAAsB,CAAChB,IAAD,CAAvB,CAAR;AACAN,MAAAA,QAAQ,CAACT,kBAAkB,CAACe,IAAI,CAACE,GAAL,CAAS,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAN;AAAA,OAAV,CAAD,CAAnB,CAAR;AACD,KAJD,EAIGC,KAJH,CAIS,UAAAC,KAAK;AAAA,aAAIZ,QAAQ,CAACuB,mBAAmB,CAACX,KAAD,CAApB,CAAZ;AAAA,KAJd;AAKD,GAVoC;AAAA,CAA9B;AAYP,OAAO,IAAMK,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,SAAO;AAC3CH,IAAAA,IAAI,EAAEnB;AADqC,GAAP;AAAA,CAA/B;AAIP,OAAO,IAAM2B,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAP,QAAQ;AAAA,SAAK;AACjDD,IAAAA,IAAI,EAAElB,wBAD2C;AAEjDmB,IAAAA;AAFiD,GAAL;AAAA,CAAvC;AAKP,OAAO,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAX,KAAK;AAAA,SAAK;AAC3CE,IAAAA,IAAI,EAAEjB,qBADqC;AAE3Ce,IAAAA;AAF2C,GAAL;AAAA,CAAjC","sourcesContent":["import api from '../api';\nimport { importFetchedAccounts } from './importer';\nimport { fetchRelationships } from './accounts';\n\nexport const DIRECTORY_FETCH_REQUEST = 'DIRECTORY_FETCH_REQUEST';\nexport const DIRECTORY_FETCH_SUCCESS = 'DIRECTORY_FETCH_SUCCESS';\nexport const DIRECTORY_FETCH_FAIL    = 'DIRECTORY_FETCH_FAIL';\n\nexport const DIRECTORY_EXPAND_REQUEST = 'DIRECTORY_EXPAND_REQUEST';\nexport const DIRECTORY_EXPAND_SUCCESS = 'DIRECTORY_EXPAND_SUCCESS';\nexport const DIRECTORY_EXPAND_FAIL    = 'DIRECTORY_EXPAND_FAIL';\n\nexport const fetchDirectory = params => (dispatch, getState) => {\n  dispatch(fetchDirectoryRequest());\n\n  api(getState).get('/api/v1/directory', { params: { ...params, limit: 20 } }).then(({ data }) => {\n    dispatch(importFetchedAccounts(data));\n    dispatch(fetchDirectorySuccess(data));\n    dispatch(fetchRelationships(data.map(x => x.id)));\n  }).catch(error => dispatch(fetchDirectoryFail(error)));\n};\n\nexport const fetchDirectoryRequest = () => ({\n  type: DIRECTORY_FETCH_REQUEST,\n});\n\nexport const fetchDirectorySuccess = accounts => ({\n  type: DIRECTORY_FETCH_SUCCESS,\n  accounts,\n});\n\nexport const fetchDirectoryFail = error => ({\n  type: DIRECTORY_FETCH_FAIL,\n  error,\n});\n\nexport const expandDirectory = params => (dispatch, getState) => {\n  dispatch(expandDirectoryRequest());\n\n  const loadedItems = getState().getIn(['user_lists', 'directory', 'items']).size;\n\n  api(getState).get('/api/v1/directory', { params: { ...params, offset: loadedItems, limit: 20 } }).then(({ data }) => {\n    dispatch(importFetchedAccounts(data));\n    dispatch(expandDirectorySuccess(data));\n    dispatch(fetchRelationships(data.map(x => x.id)));\n  }).catch(error => dispatch(expandDirectoryFail(error)));\n};\n\nexport const expandDirectoryRequest = () => ({\n  type: DIRECTORY_EXPAND_REQUEST,\n});\n\nexport const expandDirectorySuccess = accounts => ({\n  type: DIRECTORY_EXPAND_SUCCESS,\n  accounts,\n});\n\nexport const expandDirectoryFail = error => ({\n  type: DIRECTORY_EXPAND_FAIL,\n  error,\n});\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}