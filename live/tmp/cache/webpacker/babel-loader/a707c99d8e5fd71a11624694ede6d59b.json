{"ast":null,"code":"import { ANNOUNCEMENTS_FETCH_REQUEST, ANNOUNCEMENTS_FETCH_SUCCESS, ANNOUNCEMENTS_FETCH_FAIL, ANNOUNCEMENTS_UPDATE, ANNOUNCEMENTS_REACTION_UPDATE, ANNOUNCEMENTS_REACTION_ADD_REQUEST, ANNOUNCEMENTS_REACTION_ADD_FAIL, ANNOUNCEMENTS_REACTION_REMOVE_REQUEST, ANNOUNCEMENTS_REACTION_REMOVE_FAIL, ANNOUNCEMENTS_TOGGLE_SHOW, ANNOUNCEMENTS_DELETE, ANNOUNCEMENTS_DISMISS_SUCCESS } from '../actions/announcements';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\nvar initialState = ImmutableMap({\n  items: ImmutableList(),\n  isLoading: false,\n  show: false\n});\n\nvar updateReaction = function updateReaction(state, id, name, updater) {\n  return state.update('items', function (list) {\n    return list.map(function (announcement) {\n      if (announcement.get('id') === id) {\n        return announcement.update('reactions', function (reactions) {\n          var idx = reactions.findIndex(function (reaction) {\n            return reaction.get('name') === name;\n          });\n\n          if (idx > -1) {\n            return reactions.update(idx, function (reaction) {\n              return updater(reaction);\n            });\n          }\n\n          return reactions.push(updater(fromJS({\n            name,\n            count: 0\n          })));\n        });\n      }\n\n      return announcement;\n    });\n  });\n};\n\nvar updateReactionCount = function updateReactionCount(state, reaction) {\n  return updateReaction(state, reaction.announcement_id, reaction.name, function (x) {\n    return x.set('count', reaction.count);\n  });\n};\n\nvar addReaction = function addReaction(state, id, name) {\n  return updateReaction(state, id, name, function (x) {\n    return x.set('me', true).update('count', function (y) {\n      return y + 1;\n    });\n  });\n};\n\nvar removeReaction = function removeReaction(state, id, name) {\n  return updateReaction(state, id, name, function (x) {\n    return x.set('me', false).update('count', function (y) {\n      return y - 1;\n    });\n  });\n};\n\nvar sortAnnouncements = function sortAnnouncements(list) {\n  return list.sortBy(function (x) {\n    return x.get('starts_at') || x.get('published_at');\n  });\n};\n\nvar updateAnnouncement = function updateAnnouncement(state, announcement) {\n  var idx = state.get('items').findIndex(function (x) {\n    return x.get('id') === announcement.get('id');\n  });\n\n  if (idx > -1) {\n    // Deep merge is used because announcements from the streaming API do not contain\n    // personalized data about which reactions have been selected by the given user,\n    // and that is information we want to preserve\n    return state.update('items', function (list) {\n      return sortAnnouncements(list.update(idx, function (x) {\n        return x.mergeDeep(announcement);\n      }));\n    });\n  }\n\n  return state.update('items', function (list) {\n    return sortAnnouncements(list.unshift(announcement));\n  });\n};\n\nexport default function announcementsReducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case ANNOUNCEMENTS_TOGGLE_SHOW:\n      return state.withMutations(function (map) {\n        map.set('show', !map.get('show'));\n      });\n\n    case ANNOUNCEMENTS_FETCH_REQUEST:\n      return state.set('isLoading', true);\n\n    case ANNOUNCEMENTS_FETCH_SUCCESS:\n      return state.withMutations(function (map) {\n        var items = fromJS(action.announcements);\n        map.set('items', items);\n        map.set('isLoading', false);\n      });\n\n    case ANNOUNCEMENTS_FETCH_FAIL:\n      return state.set('isLoading', false);\n\n    case ANNOUNCEMENTS_UPDATE:\n      return updateAnnouncement(state, fromJS(action.announcement));\n\n    case ANNOUNCEMENTS_REACTION_UPDATE:\n      return updateReactionCount(state, action.reaction);\n\n    case ANNOUNCEMENTS_REACTION_ADD_REQUEST:\n    case ANNOUNCEMENTS_REACTION_REMOVE_FAIL:\n      return addReaction(state, action.id, action.name);\n\n    case ANNOUNCEMENTS_REACTION_REMOVE_REQUEST:\n    case ANNOUNCEMENTS_REACTION_ADD_FAIL:\n      return removeReaction(state, action.id, action.name);\n\n    case ANNOUNCEMENTS_DISMISS_SUCCESS:\n      return updateAnnouncement(state, fromJS({\n        'id': action.id,\n        'read': true\n      }));\n\n    case ANNOUNCEMENTS_DELETE:\n      return state.update('items', function (list) {\n        var idx = list.findIndex(function (x) {\n          return x.get('id') === action.id;\n        });\n\n        if (idx > -1) {\n          return list.delete(idx);\n        }\n\n        return list;\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/announcements.js"],"names":["ANNOUNCEMENTS_FETCH_REQUEST","ANNOUNCEMENTS_FETCH_SUCCESS","ANNOUNCEMENTS_FETCH_FAIL","ANNOUNCEMENTS_UPDATE","ANNOUNCEMENTS_REACTION_UPDATE","ANNOUNCEMENTS_REACTION_ADD_REQUEST","ANNOUNCEMENTS_REACTION_ADD_FAIL","ANNOUNCEMENTS_REACTION_REMOVE_REQUEST","ANNOUNCEMENTS_REACTION_REMOVE_FAIL","ANNOUNCEMENTS_TOGGLE_SHOW","ANNOUNCEMENTS_DELETE","ANNOUNCEMENTS_DISMISS_SUCCESS","Map","ImmutableMap","List","ImmutableList","fromJS","initialState","items","isLoading","show","updateReaction","state","id","name","updater","update","list","map","announcement","get","reactions","idx","findIndex","reaction","push","count","updateReactionCount","announcement_id","x","set","addReaction","y","removeReaction","sortAnnouncements","sortBy","updateAnnouncement","mergeDeep","unshift","announcementsReducer","action","type","withMutations","announcements","delete"],"mappings":"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","sourcesContent":["import {\n  ANNOUNCEMENTS_FETCH_REQUEST,\n  ANNOUNCEMENTS_FETCH_SUCCESS,\n  ANNOUNCEMENTS_FETCH_FAIL,\n  ANNOUNCEMENTS_UPDATE,\n  ANNOUNCEMENTS_REACTION_UPDATE,\n  ANNOUNCEMENTS_REACTION_ADD_REQUEST,\n  ANNOUNCEMENTS_REACTION_ADD_FAIL,\n  ANNOUNCEMENTS_REACTION_REMOVE_REQUEST,\n  ANNOUNCEMENTS_REACTION_REMOVE_FAIL,\n  ANNOUNCEMENTS_TOGGLE_SHOW,\n  ANNOUNCEMENTS_DELETE,\n  ANNOUNCEMENTS_DISMISS_SUCCESS,\n} from '../actions/announcements';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\n\nconst initialState = ImmutableMap({\n  items: ImmutableList(),\n  isLoading: false,\n  show: false,\n});\n\nconst updateReaction = (state, id, name, updater) => state.update('items', list => list.map(announcement => {\n  if (announcement.get('id') === id) {\n    return announcement.update('reactions', reactions => {\n      const idx = reactions.findIndex(reaction => reaction.get('name') === name);\n\n      if (idx > -1) {\n        return reactions.update(idx, reaction => updater(reaction));\n      }\n\n      return reactions.push(updater(fromJS({ name, count: 0 })));\n    });\n  }\n\n  return announcement;\n}));\n\nconst updateReactionCount = (state, reaction) => updateReaction(state, reaction.announcement_id, reaction.name, x => x.set('count', reaction.count));\n\nconst addReaction = (state, id, name) => updateReaction(state, id, name, x => x.set('me', true).update('count', y => y + 1));\n\nconst removeReaction = (state, id, name) => updateReaction(state, id, name, x => x.set('me', false).update('count', y => y - 1));\n\nconst sortAnnouncements = list => list.sortBy(x => x.get('starts_at') || x.get('published_at'));\n\nconst updateAnnouncement = (state, announcement) => {\n  const idx = state.get('items').findIndex(x => x.get('id') === announcement.get('id'));\n\n  if (idx > -1) {\n    // Deep merge is used because announcements from the streaming API do not contain\n    // personalized data about which reactions have been selected by the given user,\n    // and that is information we want to preserve\n    return state.update('items', list => sortAnnouncements(list.update(idx, x => x.mergeDeep(announcement))));\n  }\n\n  return state.update('items', list => sortAnnouncements(list.unshift(announcement)));\n};\n\nexport default function announcementsReducer(state = initialState, action) {\n  switch(action.type) {\n  case ANNOUNCEMENTS_TOGGLE_SHOW:\n    return state.withMutations(map => {\n      map.set('show', !map.get('show'));\n    });\n  case ANNOUNCEMENTS_FETCH_REQUEST:\n    return state.set('isLoading', true);\n  case ANNOUNCEMENTS_FETCH_SUCCESS:\n    return state.withMutations(map => {\n      const items = fromJS(action.announcements);\n\n      map.set('items', items);\n      map.set('isLoading', false);\n    });\n  case ANNOUNCEMENTS_FETCH_FAIL:\n    return state.set('isLoading', false);\n  case ANNOUNCEMENTS_UPDATE:\n    return updateAnnouncement(state, fromJS(action.announcement));\n  case ANNOUNCEMENTS_REACTION_UPDATE:\n    return updateReactionCount(state, action.reaction);\n  case ANNOUNCEMENTS_REACTION_ADD_REQUEST:\n  case ANNOUNCEMENTS_REACTION_REMOVE_FAIL:\n    return addReaction(state, action.id, action.name);\n  case ANNOUNCEMENTS_REACTION_REMOVE_REQUEST:\n  case ANNOUNCEMENTS_REACTION_ADD_FAIL:\n    return removeReaction(state, action.id, action.name);\n  case ANNOUNCEMENTS_DISMISS_SUCCESS:\n    return updateAnnouncement(state, fromJS({ 'id': action.id, 'read': true }));\n  case ANNOUNCEMENTS_DELETE:\n    return state.update('items', list => {\n      const idx = list.findIndex(x => x.get('id') === action.id);\n\n      if (idx > -1) {\n        return list.delete(idx);\n      }\n\n      return list;\n    });\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}