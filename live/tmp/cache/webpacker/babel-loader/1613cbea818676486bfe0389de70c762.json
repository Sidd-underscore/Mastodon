{"ast":null,"code":"// @ts-check\nimport { connectStream } from '../stream';\nimport { updateTimeline, deleteFromTimelines, expandHomeTimeline, connectTimeline, disconnectTimeline } from './timelines';\nimport { updateNotifications, expandNotifications } from './notifications';\nimport { updateConversations } from './conversations';\nimport { fetchAnnouncements, updateAnnouncements, updateReaction as updateAnnouncementsReaction, deleteAnnouncement } from './announcements';\nimport { fetchFilters } from './filters';\nimport { getLocale } from '../locales';\n\nvar _getLocale = getLocale(),\n    messages = _getLocale.messages;\n/**\n * @param {number} max\n * @return {number}\n */\n\n\nvar randomUpTo = function randomUpTo(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n/**\n * @param {string} timelineId\n * @param {string} channelName\n * @param {Object.<string, string>} params\n * @param {Object} options\n * @param {function(Function, Function): void} [options.fallback]\n * @param {function(object): boolean} [options.accept]\n * @return {function(): void}\n */\n\n\nexport var connectTimelineStream = function connectTimelineStream(timelineId, channelName, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  return connectStream(channelName, params, function (dispatch, getState) {\n    var locale = getState().getIn(['meta', 'locale']);\n    var pollingId;\n    /**\n     * @param {function(Function, Function): void} fallback\n     */\n\n    var useFallback = function useFallback(fallback) {\n      fallback(dispatch, function () {\n        pollingId = setTimeout(function () {\n          return useFallback(fallback);\n        }, 20000 + randomUpTo(20000));\n      });\n    };\n\n    return {\n      onConnect() {\n        dispatch(connectTimeline(timelineId));\n\n        if (pollingId) {\n          clearTimeout(pollingId);\n          pollingId = null;\n        }\n      },\n\n      onDisconnect() {\n        dispatch(disconnectTimeline(timelineId));\n\n        if (options.fallback) {\n          pollingId = setTimeout(function () {\n            return useFallback(options.fallback);\n          }, randomUpTo(40000));\n        }\n      },\n\n      onReceive(data) {\n        switch (data.event) {\n          case 'update':\n            dispatch(updateTimeline(timelineId, JSON.parse(data.payload), options.accept));\n            break;\n\n          case 'delete':\n            dispatch(deleteFromTimelines(data.payload));\n            break;\n\n          case 'notification':\n            dispatch(updateNotifications(JSON.parse(data.payload), messages, locale));\n            break;\n\n          case 'conversation':\n            dispatch(updateConversations(JSON.parse(data.payload)));\n            break;\n\n          case 'filters_changed':\n            dispatch(fetchFilters());\n            break;\n\n          case 'announcement':\n            dispatch(updateAnnouncements(JSON.parse(data.payload)));\n            break;\n\n          case 'announcement.reaction':\n            dispatch(updateAnnouncementsReaction(JSON.parse(data.payload)));\n            break;\n\n          case 'announcement.delete':\n            dispatch(deleteAnnouncement(data.payload));\n            break;\n        }\n      }\n\n    };\n  });\n};\n/**\n * @param {Function} dispatch\n * @param {function(): void} done\n */\n\nvar refreshHomeTimelineAndNotification = function refreshHomeTimelineAndNotification(dispatch, done) {\n  dispatch(expandHomeTimeline({}, function () {\n    return dispatch(expandNotifications({}, function () {\n      return dispatch(fetchAnnouncements(done));\n    }));\n  }));\n};\n/**\n * @return {function(): void}\n */\n\n\nexport var connectUserStream = function connectUserStream() {\n  return connectTimelineStream('home', 'user', {}, {\n    fallback: refreshHomeTimelineAndNotification\n  });\n};\n/**\n * @param {Object} options\n * @param {boolean} [options.onlyMedia]\n * @return {function(): void}\n */\n\nexport var connectCommunityStream = function connectCommunityStream(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      onlyMedia = _ref.onlyMedia;\n\n  return connectTimelineStream(\"community\" + (onlyMedia ? ':media' : ''), \"public:local\" + (onlyMedia ? ':media' : ''));\n};\n/**\n * @param {Object} options\n * @param {boolean} [options.onlyMedia]\n * @param {boolean} [options.onlyRemote]\n * @return {function(): void}\n */\n\nexport var connectPublicStream = function connectPublicStream(_temp2) {\n  var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      onlyMedia = _ref2.onlyMedia,\n      onlyRemote = _ref2.onlyRemote;\n\n  return connectTimelineStream(\"public\" + (onlyRemote ? ':remote' : '') + (onlyMedia ? ':media' : ''), \"public\" + (onlyRemote ? ':remote' : '') + (onlyMedia ? ':media' : ''));\n};\n/**\n * @param {string} columnId\n * @param {string} tagName\n * @param {boolean} onlyLocal\n * @param {function(object): boolean} accept\n * @return {function(): void}\n */\n\nexport var connectHashtagStream = function connectHashtagStream(columnId, tagName, onlyLocal, accept) {\n  return connectTimelineStream(\"hashtag:\" + columnId + (onlyLocal ? ':local' : ''), \"hashtag\" + (onlyLocal ? ':local' : ''), {\n    tag: tagName\n  }, {\n    accept\n  });\n};\n/**\n * @return {function(): void}\n */\n\nexport var connectDirectStream = function connectDirectStream() {\n  return connectTimelineStream('direct', 'direct');\n};\n/**\n * @param {string} listId\n * @return {function(): void}\n */\n\nexport var connectListStream = function connectListStream(listId) {\n  return connectTimelineStream(\"list:\" + listId, 'list', {\n    list: listId\n  });\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/streaming.js"],"names":["connectStream","updateTimeline","deleteFromTimelines","expandHomeTimeline","connectTimeline","disconnectTimeline","updateNotifications","expandNotifications","updateConversations","fetchAnnouncements","updateAnnouncements","updateReaction","updateAnnouncementsReaction","deleteAnnouncement","fetchFilters","getLocale","messages","randomUpTo","max","Math","floor","random","connectTimelineStream","timelineId","channelName","params","options","dispatch","getState","locale","getIn","pollingId","useFallback","fallback","setTimeout","onConnect","clearTimeout","onDisconnect","onReceive","data","event","JSON","parse","payload","accept","refreshHomeTimelineAndNotification","done","connectUserStream","connectCommunityStream","onlyMedia","connectPublicStream","onlyRemote","connectHashtagStream","columnId","tagName","onlyLocal","tag","connectDirectStream","connectListStream","listId","list"],"mappings":"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","sourcesContent":["// @ts-check\n\nimport { connectStream } from '../stream';\nimport {\n  updateTimeline,\n  deleteFromTimelines,\n  expandHomeTimeline,\n  connectTimeline,\n  disconnectTimeline,\n} from './timelines';\nimport { updateNotifications, expandNotifications } from './notifications';\nimport { updateConversations } from './conversations';\nimport {\n  fetchAnnouncements,\n  updateAnnouncements,\n  updateReaction as updateAnnouncementsReaction,\n  deleteAnnouncement,\n} from './announcements';\nimport { fetchFilters } from './filters';\nimport { getLocale } from '../locales';\n\nconst { messages } = getLocale();\n\n/**\n * @param {number} max\n * @return {number}\n */\nconst randomUpTo = max =>\n  Math.floor(Math.random() * Math.floor(max));\n\n/**\n * @param {string} timelineId\n * @param {string} channelName\n * @param {Object.<string, string>} params\n * @param {Object} options\n * @param {function(Function, Function): void} [options.fallback]\n * @param {function(object): boolean} [options.accept]\n * @return {function(): void}\n */\nexport const connectTimelineStream = (timelineId, channelName, params = {}, options = {}) =>\n  connectStream(channelName, params, (dispatch, getState) => {\n    const locale = getState().getIn(['meta', 'locale']);\n\n    let pollingId;\n\n    /**\n     * @param {function(Function, Function): void} fallback\n     */\n    const useFallback = fallback => {\n      fallback(dispatch, () => {\n        pollingId = setTimeout(() => useFallback(fallback), 20000 + randomUpTo(20000));\n      });\n    };\n\n    return {\n      onConnect() {\n        dispatch(connectTimeline(timelineId));\n\n        if (pollingId) {\n          clearTimeout(pollingId);\n          pollingId = null;\n        }\n      },\n\n      onDisconnect() {\n        dispatch(disconnectTimeline(timelineId));\n\n        if (options.fallback) {\n          pollingId = setTimeout(() => useFallback(options.fallback), randomUpTo(40000));\n        }\n      },\n\n      onReceive (data) {\n        switch(data.event) {\n        case 'update':\n          dispatch(updateTimeline(timelineId, JSON.parse(data.payload), options.accept));\n          break;\n        case 'delete':\n          dispatch(deleteFromTimelines(data.payload));\n          break;\n        case 'notification':\n          dispatch(updateNotifications(JSON.parse(data.payload), messages, locale));\n          break;\n        case 'conversation':\n          dispatch(updateConversations(JSON.parse(data.payload)));\n          break;\n        case 'filters_changed':\n          dispatch(fetchFilters());\n          break;\n        case 'announcement':\n          dispatch(updateAnnouncements(JSON.parse(data.payload)));\n          break;\n        case 'announcement.reaction':\n          dispatch(updateAnnouncementsReaction(JSON.parse(data.payload)));\n          break;\n        case 'announcement.delete':\n          dispatch(deleteAnnouncement(data.payload));\n          break;\n        }\n      },\n    };\n  });\n\n/**\n * @param {Function} dispatch\n * @param {function(): void} done\n */\nconst refreshHomeTimelineAndNotification = (dispatch, done) => {\n  dispatch(expandHomeTimeline({}, () =>\n    dispatch(expandNotifications({}, () =>\n      dispatch(fetchAnnouncements(done))))));\n};\n\n/**\n * @return {function(): void}\n */\nexport const connectUserStream = () =>\n  connectTimelineStream('home', 'user', {}, { fallback: refreshHomeTimelineAndNotification });\n\n/**\n * @param {Object} options\n * @param {boolean} [options.onlyMedia]\n * @return {function(): void}\n */\nexport const connectCommunityStream = ({ onlyMedia } = {}) =>\n  connectTimelineStream(`community${onlyMedia ? ':media' : ''}`, `public:local${onlyMedia ? ':media' : ''}`);\n\n/**\n * @param {Object} options\n * @param {boolean} [options.onlyMedia]\n * @param {boolean} [options.onlyRemote]\n * @return {function(): void}\n */\nexport const connectPublicStream = ({ onlyMedia, onlyRemote } = {}) =>\n  connectTimelineStream(`public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`, `public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`);\n\n/**\n * @param {string} columnId\n * @param {string} tagName\n * @param {boolean} onlyLocal\n * @param {function(object): boolean} accept\n * @return {function(): void}\n */\nexport const connectHashtagStream = (columnId, tagName, onlyLocal, accept) =>\n  connectTimelineStream(`hashtag:${columnId}${onlyLocal ? ':local' : ''}`, `hashtag${onlyLocal ? ':local' : ''}`, { tag: tagName }, { accept });\n\n/**\n * @return {function(): void}\n */\nexport const connectDirectStream = () =>\n  connectTimelineStream('direct', 'direct');\n\n/**\n * @param {string} listId\n * @return {function(): void}\n */\nexport const connectListStream = listId =>\n  connectTimelineStream(`list:${listId}`, 'list', { list: listId });\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}