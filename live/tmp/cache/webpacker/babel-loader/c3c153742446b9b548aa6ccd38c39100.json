{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/hashtag_timeline/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { expandHashtagTimeline, clearTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { FormattedMessage } from 'react-intl';\nimport { connectHashtagStream } from '../../actions/streaming';\nimport { isEqual } from 'lodash';\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    hasUnread: state.getIn(['timelines', \"hashtag:\" + props.params.id + (props.params.local ? ':local' : ''), 'unread']) > 0\n  };\n};\n\nvar HashtagTimeline = (_dec = connect(mapStateToProps), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(HashtagTimeline, _React$PureComponent);\n\n  function HashtagTimeline() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n    _this.disconnects = [];\n\n    _this.handlePin = function () {\n      var _this$props = _this.props,\n          columnId = _this$props.columnId,\n          dispatch = _this$props.dispatch;\n\n      if (columnId) {\n        dispatch(removeColumn(columnId));\n      } else {\n        dispatch(addColumn('HASHTAG', {\n          id: _this.props.params.id\n        }));\n      }\n    };\n\n    _this.title = function () {\n      var title = [_this.props.params.id];\n\n      if (_this.additionalFor('any')) {\n        title.push(' ', /*#__PURE__*/React.createElement(FormattedMessage, {\n          key: \"any\",\n          id: \"hashtag.column_header.tag_mode.any\",\n          values: {\n            additional: _this.additionalFor('any')\n          },\n          defaultMessage: \"or {additional}\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 23\n          }\n        }));\n      }\n\n      if (_this.additionalFor('all')) {\n        title.push(' ', /*#__PURE__*/React.createElement(FormattedMessage, {\n          key: \"all\",\n          id: \"hashtag.column_header.tag_mode.all\",\n          values: {\n            additional: _this.additionalFor('all')\n          },\n          defaultMessage: \"and {additional}\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 23\n          }\n        }));\n      }\n\n      if (_this.additionalFor('none')) {\n        title.push(' ', /*#__PURE__*/React.createElement(FormattedMessage, {\n          key: \"none\",\n          id: \"hashtag.column_header.tag_mode.none\",\n          values: {\n            additional: _this.additionalFor('none')\n          },\n          defaultMessage: \"without {additional}\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 23\n          }\n        }));\n      }\n\n      return title;\n    };\n\n    _this.additionalFor = function (mode) {\n      var tags = _this.props.params.tags;\n\n      if (tags && (tags[mode] || []).length > 0) {\n        return tags[mode].map(function (tag) {\n          return tag.value;\n        }).join('/');\n      } else {\n        return '';\n      }\n    };\n\n    _this.handleMove = function (dir) {\n      var _this$props2 = _this.props,\n          columnId = _this$props2.columnId,\n          dispatch = _this$props2.dispatch;\n      dispatch(moveColumn(columnId, dir));\n    };\n\n    _this.handleHeaderClick = function () {\n      _this.column.scrollTop();\n    };\n\n    _this.setRef = function (c) {\n      _this.column = c;\n    };\n\n    _this.handleLoadMore = function (maxId) {\n      var _this$props$params = _this.props.params,\n          id = _this$props$params.id,\n          tags = _this$props$params.tags,\n          local = _this$props$params.local;\n\n      _this.props.dispatch(expandHashtagTimeline(id, {\n        maxId,\n        tags,\n        local\n      }));\n    };\n\n    return _this;\n  }\n\n  var _proto = HashtagTimeline.prototype;\n\n  _proto._subscribe = function _subscribe(dispatch, id, tags, local) {\n    var _this2 = this;\n\n    if (tags === void 0) {\n      tags = {};\n    }\n\n    var any = (tags.any || []).map(function (tag) {\n      return tag.value;\n    });\n    var all = (tags.all || []).map(function (tag) {\n      return tag.value;\n    });\n    var none = (tags.none || []).map(function (tag) {\n      return tag.value;\n    });\n    [id].concat(any).map(function (tag) {\n      _this2.disconnects.push(dispatch(connectHashtagStream(id, tag, local, function (status) {\n        var tags = status.tags.map(function (tag) {\n          return tag.name;\n        });\n        return all.filter(function (tag) {\n          return tags.includes(tag);\n        }).length === all.length && none.filter(function (tag) {\n          return tags.includes(tag);\n        }).length === 0;\n      })));\n    });\n  };\n\n  _proto._unsubscribe = function _unsubscribe() {\n    this.disconnects.map(function (disconnect) {\n      return disconnect();\n    });\n    this.disconnects = [];\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    var dispatch = this.props.dispatch;\n    var _this$props$params2 = this.props.params,\n        id = _this$props$params2.id,\n        tags = _this$props$params2.tags,\n        local = _this$props$params2.local;\n\n    this._subscribe(dispatch, id, tags, local);\n\n    dispatch(expandHashtagTimeline(id, {\n      tags,\n      local\n    }));\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this$props3 = this.props,\n        dispatch = _this$props3.dispatch,\n        params = _this$props3.params;\n    var _nextProps$params = nextProps.params,\n        id = _nextProps$params.id,\n        tags = _nextProps$params.tags,\n        local = _nextProps$params.local;\n\n    if (id !== params.id || !isEqual(tags, params.tags) || !isEqual(local, params.local)) {\n      this._unsubscribe();\n\n      this._subscribe(dispatch, id, tags, local);\n\n      dispatch(clearTimeline(\"hashtag:\" + id + (local ? ':local' : '')));\n      dispatch(expandHashtagTimeline(id, {\n        tags,\n        local\n      }));\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this._unsubscribe();\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        hasUnread = _this$props4.hasUnread,\n        columnId = _this$props4.columnId,\n        multiColumn = _this$props4.multiColumn;\n    var _this$props$params3 = this.props.params,\n        id = _this$props$params3.id,\n        local = _this$props$params3.local;\n    var pinned = !!columnId;\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      ref: this.setRef,\n      label: \"#\" + id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      icon: \"hashtag\",\n      active: hasUnread,\n      title: this.title(),\n      onPin: this.handlePin,\n      onMove: this.handleMove,\n      onClick: this.handleHeaderClick,\n      pinned: pinned,\n      multiColumn: multiColumn,\n      showBackButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, columnId && /*#__PURE__*/React.createElement(ColumnSettingsContainer, {\n      columnId: columnId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 24\n      }\n    })), /*#__PURE__*/React.createElement(StatusListContainer, {\n      trackScroll: !pinned,\n      scrollKey: \"hashtag_timeline-\" + columnId,\n      timelineId: \"hashtag:\" + id + (local ? ':local' : ''),\n      onLoadMore: this.handleLoadMore,\n      emptyMessage: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"empty_column.hashtag\",\n        defaultMessage: \"There is nothing in this hashtag yet.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }\n      }),\n      bindToDocument: !multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return HashtagTimeline;\n}(React.PureComponent), _class2.propTypes = {\n  params: PropTypes.object.isRequired,\n  columnId: PropTypes.string,\n  dispatch: PropTypes.func.isRequired,\n  hasUnread: PropTypes.bool,\n  multiColumn: PropTypes.bool\n}, _temp)) || _class);\nexport { HashtagTimeline as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/hashtag_timeline/index.js"],"names":["React","connect","PropTypes","StatusListContainer","Column","ColumnHeader","ColumnSettingsContainer","expandHashtagTimeline","clearTimeline","addColumn","removeColumn","moveColumn","FormattedMessage","connectHashtagStream","isEqual","mapStateToProps","state","props","hasUnread","getIn","params","id","local","HashtagTimeline","disconnects","handlePin","columnId","dispatch","title","additionalFor","push","additional","mode","tags","length","map","tag","value","join","handleMove","dir","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","maxId","_subscribe","any","all","none","status","name","filter","includes","_unsubscribe","disconnect","componentDidMount","componentWillReceiveProps","nextProps","componentWillUnmount","render","multiColumn","pinned","PureComponent","propTypes","object","isRequired","string","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { expandHashtagTimeline, clearTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { FormattedMessage } from 'react-intl';\nimport { connectHashtagStream } from '../../actions/streaming';\nimport { isEqual } from 'lodash';\n\nconst mapStateToProps = (state, props) => ({\n  hasUnread: state.getIn(['timelines', `hashtag:${props.params.id}${props.params.local ? ':local' : ''}`, 'unread']) > 0,\n});\n\nexport default @connect(mapStateToProps)\nclass HashtagTimeline extends React.PureComponent {\n\n  disconnects = [];\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HASHTAG', { id: this.props.params.id }));\n    }\n  }\n\n  title = () => {\n    let title = [this.props.params.id];\n\n    if (this.additionalFor('any')) {\n      title.push(' ', <FormattedMessage key='any' id='hashtag.column_header.tag_mode.any'  values={{ additional: this.additionalFor('any') }} defaultMessage='or {additional}' />);\n    }\n\n    if (this.additionalFor('all')) {\n      title.push(' ', <FormattedMessage key='all' id='hashtag.column_header.tag_mode.all'  values={{ additional: this.additionalFor('all') }} defaultMessage='and {additional}' />);\n    }\n\n    if (this.additionalFor('none')) {\n      title.push(' ', <FormattedMessage key='none' id='hashtag.column_header.tag_mode.none' values={{ additional: this.additionalFor('none') }} defaultMessage='without {additional}' />);\n    }\n\n    return title;\n  }\n\n  additionalFor = (mode) => {\n    const { tags } = this.props.params;\n\n    if (tags && (tags[mode] || []).length > 0) {\n      return tags[mode].map(tag => tag.value).join('/');\n    } else {\n      return '';\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  _subscribe (dispatch, id, tags = {}, local) {\n    let any  = (tags.any || []).map(tag => tag.value);\n    let all  = (tags.all || []).map(tag => tag.value);\n    let none = (tags.none || []).map(tag => tag.value);\n\n    [id, ...any].map(tag => {\n      this.disconnects.push(dispatch(connectHashtagStream(id, tag, local, status => {\n        let tags = status.tags.map(tag => tag.name);\n\n        return all.filter(tag => tags.includes(tag)).length === all.length &&\n               none.filter(tag => tags.includes(tag)).length === 0;\n      })));\n    });\n  }\n\n  _unsubscribe () {\n    this.disconnects.map(disconnect => disconnect());\n    this.disconnects = [];\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id, tags, local } = this.props.params;\n\n    this._subscribe(dispatch, id, tags, local);\n    dispatch(expandHashtagTimeline(id, { tags, local }));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch, params } = this.props;\n    const { id, tags, local } = nextProps.params;\n\n    if (id !== params.id || !isEqual(tags, params.tags) || !isEqual(local, params.local)) {\n      this._unsubscribe();\n      this._subscribe(dispatch, id, tags, local);\n      dispatch(clearTimeline(`hashtag:${id}${local ? ':local' : ''}`));\n      dispatch(expandHashtagTimeline(id, { tags, local }));\n    }\n  }\n\n  componentWillUnmount () {\n    this._unsubscribe();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { id, tags, local } = this.props.params;\n    this.props.dispatch(expandHashtagTimeline(id, { maxId, tags, local }));\n  }\n\n  render () {\n    const { hasUnread, columnId, multiColumn } = this.props;\n    const { id, local } = this.props.params;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={`#${id}`}>\n        <ColumnHeader\n          icon='hashtag'\n          active={hasUnread}\n          title={this.title()}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          showBackButton\n        >\n          {columnId && <ColumnSettingsContainer columnId={columnId} />}\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`hashtag_timeline-${columnId}`}\n          timelineId={`hashtag:${id}${local ? ':local' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.hashtag' defaultMessage='There is nothing in this hashtag yet.' />}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"hashtag.column_header.tag_mode.any","defaultMessage":"or {additional}"},{"id":"hashtag.column_header.tag_mode.all","defaultMessage":"and {additional}"},{"id":"hashtag.column_header.tag_mode.none","defaultMessage":"without {additional}"},{"id":"empty_column.hashtag","defaultMessage":"There is nothing in this hashtag yet."}]}},"sourceType":"module"}