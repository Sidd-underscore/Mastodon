{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/compose/components/compose_form.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport CharacterCounter from './character_counter';\nimport Button from '../../../components/button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport ReplyIndicatorContainer from '../containers/reply_indicator_container';\nimport AutosuggestTextarea from '../../../components/autosuggest_textarea';\nimport AutosuggestInput from '../../../components/autosuggest_input';\nimport PollButtonContainer from '../containers/poll_button_container';\nimport UploadButtonContainer from '../containers/upload_button_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport SpoilerButtonContainer from '../containers/spoiler_button_container';\nimport PrivacyDropdownContainer from '../containers/privacy_dropdown_container';\nimport EmojiPickerDropdown from '../containers/emoji_picker_dropdown_container';\nimport PollFormContainer from '../containers/poll_form_container';\nimport UploadFormContainer from '../containers/upload_form_container';\nimport WarningContainer from '../containers/warning_container';\nimport { isMobile } from '../../../is_mobile';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { length } from 'stringz';\nimport { countableText } from '../util/counter';\nimport Icon from 'mastodon/components/icon';\nvar allowedAroundShortCode = '><\\u0085\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029\\u0009\\u000a\\u000b\\u000c\\u000d';\nvar messages = defineMessages({\n  placeholder: {\n    \"id\": \"compose_form.placeholder\",\n    \"defaultMessage\": \"What is on your mind?\"\n  },\n  spoiler_placeholder: {\n    \"id\": \"compose_form.spoiler_placeholder\",\n    \"defaultMessage\": \"Write your warning here\"\n  },\n  publish: {\n    \"id\": \"compose_form.publish\",\n    \"defaultMessage\": \"Toot\"\n  },\n  publishLoud: {\n    \"id\": \"compose_form.publish_loud\",\n    \"defaultMessage\": \"{publish}!\"\n  }\n});\n\nvar ComposeForm = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(ComposeForm, _ImmutablePureCompone);\n\n  function ComposeForm() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n\n    _this.handleChange = function (e) {\n      _this.props.onChange(e.target.value);\n    };\n\n    _this.handleKeyDown = function (e) {\n      if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n        _this.handleSubmit();\n      }\n    };\n\n    _this.getFulltextForCharacterCounting = function () {\n      return [_this.props.spoiler ? _this.props.spoilerText : '', countableText(_this.props.text)].join('');\n    };\n\n    _this.canSubmit = function () {\n      var _this$props = _this.props,\n          isSubmitting = _this$props.isSubmitting,\n          isChangingUpload = _this$props.isChangingUpload,\n          isUploading = _this$props.isUploading,\n          anyMedia = _this$props.anyMedia;\n\n      var fulltext = _this.getFulltextForCharacterCounting();\n\n      var isOnlyWhitespace = fulltext.length !== 0 && fulltext.trim().length === 0;\n      return !(isSubmitting || isUploading || isChangingUpload || length(fulltext) > 500 || isOnlyWhitespace && !anyMedia);\n    };\n\n    _this.handleSubmit = function () {\n      if (_this.props.text !== _this.autosuggestTextarea.textarea.value) {\n        // Something changed the text inside the textarea (e.g. browser extensions like Grammarly)\n        // Update the state to match the current text\n        _this.props.onChange(_this.autosuggestTextarea.textarea.value);\n      }\n\n      if (!_this.canSubmit()) {\n        return;\n      }\n\n      _this.props.onSubmit(_this.context.router ? _this.context.router.history : null);\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.props.onClearSuggestions();\n    };\n\n    _this.onSuggestionsFetchRequested = function (token) {\n      _this.props.onFetchSuggestions(token);\n    };\n\n    _this.onSuggestionSelected = function (tokenStart, token, value) {\n      _this.props.onSuggestionSelected(tokenStart, token, value, ['text']);\n    };\n\n    _this.onSpoilerSuggestionSelected = function (tokenStart, token, value) {\n      _this.props.onSuggestionSelected(tokenStart, token, value, ['spoiler_text']);\n    };\n\n    _this.handleChangeSpoilerText = function (e) {\n      _this.props.onChangeSpoilerText(e.target.value);\n    };\n\n    _this.handleFocus = function () {\n      if (_this.composeForm && !_this.props.singleColumn) {\n        var _this$composeForm$get = _this.composeForm.getBoundingClientRect(),\n            left = _this$composeForm$get.left,\n            right = _this$composeForm$get.right;\n\n        if (left < 0 || right > (window.innerWidth || document.documentElement.clientWidth)) {\n          _this.composeForm.scrollIntoView();\n        }\n      }\n    };\n\n    _this._updateFocusAndSelection = function (prevProps) {\n      // This statement does several things:\n      // - If we're beginning a reply, and,\n      //     - Replying to zero or one users, places the cursor at the end of the textbox.\n      //     - Replying to more than one user, selects any usernames past the first;\n      //       this provides a convenient shortcut to drop everyone else from the conversation.\n      if (_this.props.focusDate !== prevProps.focusDate) {\n        var selectionEnd, selectionStart;\n\n        if (_this.props.preselectDate !== prevProps.preselectDate) {\n          selectionEnd = _this.props.text.length;\n          selectionStart = _this.props.text.search(/\\s/) + 1;\n        } else if (typeof _this.props.caretPosition === 'number') {\n          selectionStart = _this.props.caretPosition;\n          selectionEnd = _this.props.caretPosition;\n        } else {\n          selectionEnd = _this.props.text.length;\n          selectionStart = selectionEnd;\n        }\n\n        _this.autosuggestTextarea.textarea.setSelectionRange(selectionStart, selectionEnd);\n\n        _this.autosuggestTextarea.textarea.focus();\n      } else if (prevProps.isSubmitting && !_this.props.isSubmitting) {\n        _this.autosuggestTextarea.textarea.focus();\n      } else if (_this.props.spoiler !== prevProps.spoiler) {\n        if (_this.props.spoiler) {\n          _this.spoilerText.input.focus();\n        } else {\n          _this.autosuggestTextarea.textarea.focus();\n        }\n      }\n    };\n\n    _this.setAutosuggestTextarea = function (c) {\n      _this.autosuggestTextarea = c;\n    };\n\n    _this.setSpoilerText = function (c) {\n      _this.spoilerText = c;\n    };\n\n    _this.setRef = function (c) {\n      _this.composeForm = c;\n    };\n\n    _this.handleEmojiPick = function (data) {\n      var text = _this.props.text;\n      var position = _this.autosuggestTextarea.textarea.selectionStart;\n      var needsSpace = data.custom && position > 0 && !allowedAroundShortCode.includes(text[position - 1]);\n\n      _this.props.onPickEmoji(position, data, needsSpace);\n    };\n\n    return _this;\n  }\n\n  var _proto = ComposeForm.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._updateFocusAndSelection({});\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    this._updateFocusAndSelection(prevProps);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        intl = _this$props2.intl,\n        onPaste = _this$props2.onPaste,\n        showSearch = _this$props2.showSearch;\n    var disabled = this.props.isSubmitting;\n    var publishText = '';\n\n    if (this.props.privacy === 'private' || this.props.privacy === 'direct') {\n      publishText = /*#__PURE__*/React.createElement(\"span\", {\n        className: \"compose-form__publish-private\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        id: \"lock\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 69\n        }\n      }), \" \", intl.formatMessage(messages.publish));\n    } else {\n      publishText = this.props.privacy !== 'unlisted' ? intl.formatMessage(messages.publishLoud, {\n        publish: intl.formatMessage(messages.publish)\n      }) : intl.formatMessage(messages.publish);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"compose-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(WarningContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ReplyIndicatorContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spoiler-input \" + (this.props.spoiler ? 'spoiler-input--visible' : ''),\n      ref: this.setRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AutosuggestInput, {\n      placeholder: intl.formatMessage(messages.spoiler_placeholder),\n      value: this.props.spoilerText,\n      onChange: this.handleChangeSpoilerText,\n      onKeyDown: this.handleKeyDown,\n      disabled: !this.props.spoiler,\n      ref: this.setSpoilerText,\n      suggestions: this.props.suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      onSuggestionSelected: this.onSpoilerSuggestionSelected,\n      searchTokens: [':'],\n      id: \"cw-spoiler-input\",\n      className: \"spoiler-input__input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(AutosuggestTextarea, {\n      ref: this.setAutosuggestTextarea,\n      placeholder: intl.formatMessage(messages.placeholder),\n      disabled: disabled,\n      value: this.props.text,\n      onChange: this.handleChange,\n      suggestions: this.props.suggestions,\n      onFocus: this.handleFocus,\n      onKeyDown: this.handleKeyDown,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      onSuggestionSelected: this.onSuggestionSelected,\n      onPaste: onPaste,\n      autoFocus: !showSearch && !isMobile(window.innerWidth),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EmojiPickerDropdown, {\n      onPickEmoji: this.handleEmojiPick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"compose-form__modifiers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(UploadFormContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(PollFormContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"compose-form__buttons-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"compose-form__buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(UploadButtonContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(PollButtonContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(PrivacyDropdownContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SpoilerButtonContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"character-counter__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CharacterCounter, {\n      max: 500,\n      text: this.getFulltextForCharacterCounting(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 55\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"compose-form__publish\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"compose-form__publish-button-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      text: publishText,\n      onClick: this.handleSubmit,\n      disabled: !this.canSubmit(),\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 65\n      }\n    }))));\n  };\n\n  return ComposeForm;\n}(ImmutablePureComponent), _class2.contextTypes = {\n  router: PropTypes.object\n}, _class2.propTypes = {\n  intl: PropTypes.object.isRequired,\n  text: PropTypes.string.isRequired,\n  suggestions: ImmutablePropTypes.list,\n  spoiler: PropTypes.bool,\n  privacy: PropTypes.string,\n  spoilerText: PropTypes.string,\n  focusDate: PropTypes.instanceOf(Date),\n  caretPosition: PropTypes.number,\n  preselectDate: PropTypes.instanceOf(Date),\n  isSubmitting: PropTypes.bool,\n  isChangingUpload: PropTypes.bool,\n  isUploading: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onClearSuggestions: PropTypes.func.isRequired,\n  onFetchSuggestions: PropTypes.func.isRequired,\n  onSuggestionSelected: PropTypes.func.isRequired,\n  onChangeSpoilerText: PropTypes.func.isRequired,\n  onPaste: PropTypes.func.isRequired,\n  onPickEmoji: PropTypes.func.isRequired,\n  showSearch: PropTypes.bool,\n  anyMedia: PropTypes.bool,\n  singleColumn: PropTypes.bool\n}, _class2.defaultProps = {\n  showSearch: false\n}, _temp)) || _class;\n\nexport { ComposeForm as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/compose/components/compose_form.js"],"names":["React","CharacterCounter","Button","ImmutablePropTypes","PropTypes","ReplyIndicatorContainer","AutosuggestTextarea","AutosuggestInput","PollButtonContainer","UploadButtonContainer","defineMessages","injectIntl","SpoilerButtonContainer","PrivacyDropdownContainer","EmojiPickerDropdown","PollFormContainer","UploadFormContainer","WarningContainer","isMobile","ImmutablePureComponent","length","countableText","Icon","allowedAroundShortCode","messages","placeholder","spoiler_placeholder","publish","publishLoud","ComposeForm","handleChange","e","props","onChange","target","value","handleKeyDown","keyCode","ctrlKey","metaKey","handleSubmit","getFulltextForCharacterCounting","spoiler","spoilerText","text","join","canSubmit","isSubmitting","isChangingUpload","isUploading","anyMedia","fulltext","isOnlyWhitespace","trim","autosuggestTextarea","textarea","onSubmit","context","router","history","onSuggestionsClearRequested","onClearSuggestions","onSuggestionsFetchRequested","token","onFetchSuggestions","onSuggestionSelected","tokenStart","onSpoilerSuggestionSelected","handleChangeSpoilerText","onChangeSpoilerText","handleFocus","composeForm","singleColumn","getBoundingClientRect","left","right","window","innerWidth","document","documentElement","clientWidth","scrollIntoView","_updateFocusAndSelection","prevProps","focusDate","selectionEnd","selectionStart","preselectDate","search","caretPosition","setSelectionRange","focus","input","setAutosuggestTextarea","c","setSpoilerText","setRef","handleEmojiPick","data","position","needsSpace","custom","includes","onPickEmoji","componentDidMount","componentDidUpdate","render","intl","onPaste","showSearch","disabled","publishText","privacy","formatMessage","suggestions","contextTypes","object","propTypes","isRequired","string","list","bool","instanceOf","Date","number","func","defaultProps"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,uBAAP,MAAoC,yCAApC;AACA,OAAOC,mBAAP,MAAgC,0CAAhC;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,qBAAP,MAAkC,uCAAlC;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,YAA3C;AACA,OAAOC,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,wBAAP,MAAqC,0CAArC;AACA,OAAOC,mBAAP,MAAgC,+CAAhC;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,sBAAP,MAAmC,gCAAnC;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEA,IAAMC,sBAAsB,GAAG,0JAA/B;AAEA,IAAMC,QAAQ,GAAGd,cAAc,CAAC;AAC9Be,EAAAA,WAAW;AAAA;AAAA;AAAA,GADmB;AAE9BC,EAAAA,mBAAmB;AAAA;AAAA;AAAA,GAFW;AAG9BC,EAAAA,OAAO;AAAA;AAAA;AAAA,GAHuB;AAI9BC,EAAAA,WAAW;AAAA;AAAA;AAAA;AAJmB,CAAD,CAA/B;;IAQMC,W,GADUlB,U;;;;;;;;;;;;UAqCdmB,Y,GAAe,UAACC,CAAD,EAAO;AACpB,YAAKC,KAAL,CAAWC,QAAX,CAAoBF,CAAC,CAACG,MAAF,CAASC,KAA7B;AACD,K;;UAEDC,a,GAAgB,UAACL,CAAD,EAAO;AACrB,UAAIA,CAAC,CAACM,OAAF,KAAc,EAAd,KAAqBN,CAAC,CAACO,OAAF,IAAaP,CAAC,CAACQ,OAApC,CAAJ,EAAkD;AAChD,cAAKC,YAAL;AACD;AACF,K;;UAEDC,+B,GAAkC,YAAM;AACtC,aAAO,CAAC,MAAKT,KAAL,CAAWU,OAAX,GAAoB,MAAKV,KAAL,CAAWW,WAA/B,GAA4C,EAA7C,EAAiDtB,aAAa,CAAC,MAAKW,KAAL,CAAWY,IAAZ,CAA9D,EAAiFC,IAAjF,CAAsF,EAAtF,CAAP;AACD,K;;UAEDC,S,GAAY,YAAM;AAChB,wBAAkE,MAAKd,KAAvE;AAAA,UAAQe,YAAR,eAAQA,YAAR;AAAA,UAAsBC,gBAAtB,eAAsBA,gBAAtB;AAAA,UAAwCC,WAAxC,eAAwCA,WAAxC;AAAA,UAAqDC,QAArD,eAAqDA,QAArD;;AACA,UAAMC,QAAQ,GAAG,MAAKV,+BAAL,EAAjB;;AACA,UAAMW,gBAAgB,GAAGD,QAAQ,CAAC/B,MAAT,KAAoB,CAApB,IAAyB+B,QAAQ,CAACE,IAAT,GAAgBjC,MAAhB,KAA2B,CAA7E;AAEA,aAAO,EAAE2B,YAAY,IAAIE,WAAhB,IAA+BD,gBAA/B,IAAmD5B,MAAM,CAAC+B,QAAD,CAAN,GAAmB,GAAtE,IAA8EC,gBAAgB,IAAI,CAACF,QAArG,CAAP;AACD,K;;UAEDV,Y,GAAe,YAAM;AACnB,UAAI,MAAKR,KAAL,CAAWY,IAAX,KAAoB,MAAKU,mBAAL,CAAyBC,QAAzB,CAAkCpB,KAA1D,EAAiE;AAC/D;AACA;AACA,cAAKH,KAAL,CAAWC,QAAX,CAAoB,MAAKqB,mBAAL,CAAyBC,QAAzB,CAAkCpB,KAAtD;AACD;;AAED,UAAI,CAAC,MAAKW,SAAL,EAAL,EAAuB;AACrB;AACD;;AAED,YAAKd,KAAL,CAAWwB,QAAX,CAAoB,MAAKC,OAAL,CAAaC,MAAb,GAAsB,MAAKD,OAAL,CAAaC,MAAb,CAAoBC,OAA1C,GAAoD,IAAxE;AACD,K;;UAEDC,2B,GAA8B,YAAM;AAClC,YAAK5B,KAAL,CAAW6B,kBAAX;AACD,K;;UAEDC,2B,GAA8B,UAACC,KAAD,EAAW;AACvC,YAAK/B,KAAL,CAAWgC,kBAAX,CAA8BD,KAA9B;AACD,K;;UAEDE,oB,GAAuB,UAACC,UAAD,EAAaH,KAAb,EAAoB5B,KAApB,EAA8B;AACnD,YAAKH,KAAL,CAAWiC,oBAAX,CAAgCC,UAAhC,EAA4CH,KAA5C,EAAmD5B,KAAnD,EAA0D,CAAC,MAAD,CAA1D;AACD,K;;UAEDgC,2B,GAA8B,UAACD,UAAD,EAAaH,KAAb,EAAoB5B,KAApB,EAA8B;AAC1D,YAAKH,KAAL,CAAWiC,oBAAX,CAAgCC,UAAhC,EAA4CH,KAA5C,EAAmD5B,KAAnD,EAA0D,CAAC,cAAD,CAA1D;AACD,K;;UAEDiC,uB,GAA0B,UAACrC,CAAD,EAAO;AAC/B,YAAKC,KAAL,CAAWqC,mBAAX,CAA+BtC,CAAC,CAACG,MAAF,CAASC,KAAxC;AACD,K;;UAEDmC,W,GAAc,YAAM;AAClB,UAAI,MAAKC,WAAL,IAAoB,CAAC,MAAKvC,KAAL,CAAWwC,YAApC,EAAkD;AAChD,oCAAwB,MAAKD,WAAL,CAAiBE,qBAAjB,EAAxB;AAAA,YAAQC,IAAR,yBAAQA,IAAR;AAAA,YAAcC,KAAd,yBAAcA,KAAd;;AACA,YAAID,IAAI,GAAG,CAAP,IAAYC,KAAK,IAAIC,MAAM,CAACC,UAAP,IAAqBC,QAAQ,CAACC,eAAT,CAAyBC,WAAlD,CAArB,EAAqF;AACnF,gBAAKT,WAAL,CAAiBU,cAAjB;AACD;AACF;AACF,K;;UAUDC,wB,GAA2B,UAACC,SAAD,EAAe;AACxC;AACA;AACA;AACA;AACA;AACA,UAAI,MAAKnD,KAAL,CAAWoD,SAAX,KAAyBD,SAAS,CAACC,SAAvC,EAAkD;AAChD,YAAIC,YAAJ,EAAkBC,cAAlB;;AAEA,YAAI,MAAKtD,KAAL,CAAWuD,aAAX,KAA6BJ,SAAS,CAACI,aAA3C,EAA0D;AACxDF,UAAAA,YAAY,GAAK,MAAKrD,KAAL,CAAWY,IAAX,CAAgBxB,MAAjC;AACAkE,UAAAA,cAAc,GAAG,MAAKtD,KAAL,CAAWY,IAAX,CAAgB4C,MAAhB,CAAuB,IAAvB,IAA+B,CAAhD;AACD,SAHD,MAGO,IAAI,OAAO,MAAKxD,KAAL,CAAWyD,aAAlB,KAAoC,QAAxC,EAAkD;AACvDH,UAAAA,cAAc,GAAG,MAAKtD,KAAL,CAAWyD,aAA5B;AACAJ,UAAAA,YAAY,GAAK,MAAKrD,KAAL,CAAWyD,aAA5B;AACD,SAHM,MAGA;AACLJ,UAAAA,YAAY,GAAK,MAAKrD,KAAL,CAAWY,IAAX,CAAgBxB,MAAjC;AACAkE,UAAAA,cAAc,GAAGD,YAAjB;AACD;;AAED,cAAK/B,mBAAL,CAAyBC,QAAzB,CAAkCmC,iBAAlC,CAAoDJ,cAApD,EAAoED,YAApE;;AACA,cAAK/B,mBAAL,CAAyBC,QAAzB,CAAkCoC,KAAlC;AACD,OAhBD,MAgBO,IAAGR,SAAS,CAACpC,YAAV,IAA0B,CAAC,MAAKf,KAAL,CAAWe,YAAzC,EAAuD;AAC5D,cAAKO,mBAAL,CAAyBC,QAAzB,CAAkCoC,KAAlC;AACD,OAFM,MAEA,IAAI,MAAK3D,KAAL,CAAWU,OAAX,KAAuByC,SAAS,CAACzC,OAArC,EAA8C;AACnD,YAAI,MAAKV,KAAL,CAAWU,OAAf,EAAwB;AACtB,gBAAKC,WAAL,CAAiBiD,KAAjB,CAAuBD,KAAvB;AACD,SAFD,MAEO;AACL,gBAAKrC,mBAAL,CAAyBC,QAAzB,CAAkCoC,KAAlC;AACD;AACF;AACF,K;;UAEDE,sB,GAAyB,UAACC,CAAD,EAAO;AAC9B,YAAKxC,mBAAL,GAA2BwC,CAA3B;AACD,K;;UAEDC,c,GAAiB,UAACD,CAAD,EAAO;AACtB,YAAKnD,WAAL,GAAmBmD,CAAnB;AACD,K;;UAEDE,M,GAAS,UAAAF,CAAC,EAAI;AACZ,YAAKvB,WAAL,GAAmBuB,CAAnB;AACD,K;;UAEDG,e,GAAkB,UAACC,IAAD,EAAU;AAC1B,UAAQtD,IAAR,GAAqB,MAAKZ,KAA1B,CAAQY,IAAR;AACA,UAAMuD,QAAQ,GAAO,MAAK7C,mBAAL,CAAyBC,QAAzB,CAAkC+B,cAAvD;AACA,UAAMc,UAAU,GAAKF,IAAI,CAACG,MAAL,IAAeF,QAAQ,GAAG,CAA1B,IAA+B,CAAC5E,sBAAsB,CAAC+E,QAAvB,CAAgC1D,IAAI,CAACuD,QAAQ,GAAG,CAAZ,CAApC,CAArD;;AAEA,YAAKnE,KAAL,CAAWuE,WAAX,CAAuBJ,QAAvB,EAAiCD,IAAjC,EAAuCE,UAAvC;AACD,K;;;;;;;SA3DDI,iB,GAAA,6BAAqB;AACnB,SAAKtB,wBAAL,CAA8B,EAA9B;AACD,G;;SAEDuB,kB,GAAA,4BAAoBtB,SAApB,EAA+B;AAC7B,SAAKD,wBAAL,CAA8BC,SAA9B;AACD,G;;SAuDDuB,M,GAAA,kBAAU;AACR,uBAAsC,KAAK1E,KAA3C;AAAA,QAAQ2E,IAAR,gBAAQA,IAAR;AAAA,QAAcC,OAAd,gBAAcA,OAAd;AAAA,QAAuBC,UAAvB,gBAAuBA,UAAvB;AACA,QAAMC,QAAQ,GAAG,KAAK9E,KAAL,CAAWe,YAA5B;AACA,QAAIgE,WAAW,GAAG,EAAlB;;AAEA,QAAI,KAAK/E,KAAL,CAAWgF,OAAX,KAAuB,SAAvB,IAAoC,KAAKhF,KAAL,CAAWgF,OAAX,KAAuB,QAA/D,EAAyE;AACvED,MAAAA,WAAW,gBAAG;AAAM,QAAA,SAAS,EAAC,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgD,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhD,OAAoEJ,IAAI,CAACM,aAAL,CAAmBzF,QAAQ,CAACG,OAA5B,CAApE,CAAd;AACD,KAFD,MAEO;AACLoF,MAAAA,WAAW,GAAG,KAAK/E,KAAL,CAAWgF,OAAX,KAAuB,UAAvB,GAAoCL,IAAI,CAACM,aAAL,CAAmBzF,QAAQ,CAACI,WAA5B,EAAyC;AAAED,QAAAA,OAAO,EAAEgF,IAAI,CAACM,aAAL,CAAmBzF,QAAQ,CAACG,OAA5B;AAAX,OAAzC,CAApC,GAAkIgF,IAAI,CAACM,aAAL,CAAmBzF,QAAQ,CAACG,OAA5B,CAAhJ;AACD;;AAED,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAGE,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAKE;AAAK,MAAA,SAAS,sBAAmB,KAAKK,KAAL,CAAWU,OAAX,GAAqB,wBAArB,GAAgD,EAAnE,CAAd;AAAuF,MAAA,GAAG,EAAE,KAAKsD,MAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AACE,MAAA,WAAW,EAAEW,IAAI,CAACM,aAAL,CAAmBzF,QAAQ,CAACE,mBAA5B,CADf;AAEE,MAAA,KAAK,EAAE,KAAKM,KAAL,CAAWW,WAFpB;AAGE,MAAA,QAAQ,EAAE,KAAKyB,uBAHjB;AAIE,MAAA,SAAS,EAAE,KAAKhC,aAJlB;AAKE,MAAA,QAAQ,EAAE,CAAC,KAAKJ,KAAL,CAAWU,OALxB;AAME,MAAA,GAAG,EAAE,KAAKqD,cANZ;AAOE,MAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWkF,WAP1B;AAQE,MAAA,2BAA2B,EAAE,KAAKpD,2BARpC;AASE,MAAA,2BAA2B,EAAE,KAAKF,2BATpC;AAUE,MAAA,oBAAoB,EAAE,KAAKO,2BAV7B;AAWE,MAAA,YAAY,EAAE,CAAC,GAAD,CAXhB;AAYE,MAAA,EAAE,EAAC,kBAZL;AAaE,MAAA,SAAS,EAAC,sBAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CALF,eAuBE,oBAAC,mBAAD;AACE,MAAA,GAAG,EAAE,KAAK0B,sBADZ;AAEE,MAAA,WAAW,EAAEc,IAAI,CAACM,aAAL,CAAmBzF,QAAQ,CAACC,WAA5B,CAFf;AAGE,MAAA,QAAQ,EAAEqF,QAHZ;AAIE,MAAA,KAAK,EAAE,KAAK9E,KAAL,CAAWY,IAJpB;AAKE,MAAA,QAAQ,EAAE,KAAKd,YALjB;AAME,MAAA,WAAW,EAAE,KAAKE,KAAL,CAAWkF,WAN1B;AAOE,MAAA,OAAO,EAAE,KAAK5C,WAPhB;AAQE,MAAA,SAAS,EAAE,KAAKlC,aARlB;AASE,MAAA,2BAA2B,EAAE,KAAK0B,2BATpC;AAUE,MAAA,2BAA2B,EAAE,KAAKF,2BAVpC;AAWE,MAAA,oBAAoB,EAAE,KAAKK,oBAX7B;AAYE,MAAA,OAAO,EAAE2C,OAZX;AAaE,MAAA,SAAS,EAAE,CAACC,UAAD,IAAe,CAAC3F,QAAQ,CAAC0D,MAAM,CAACC,UAAR,CAbrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAeE,oBAAC,mBAAD;AAAqB,MAAA,WAAW,EAAE,KAAKoB,eAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,eAgBE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAhBF,CAvBF,eA6CE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF,eAOE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA4C,oBAAC,gBAAD;AAAkB,MAAA,GAAG,EAAE,GAAvB;AAA4B,MAAA,IAAI,EAAE,KAAKxD,+BAAL,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5C,CAPF,CA7CF,eAuDE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsD,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAEsE,WAAd;AAA2B,MAAA,OAAO,EAAE,KAAKvE,YAAzC;AAAuD,MAAA,QAAQ,EAAE,CAAC,KAAKM,SAAL,EAAlE;AAAoF,MAAA,KAAK,MAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtD,CADF,CAvDF,CADF;AA6DD,G;;;EA1OuB3B,sB,WAEjBgG,Y,GAAe;AACpBzD,EAAAA,MAAM,EAAEtD,SAAS,CAACgH;AADE,C,UAIfC,S,GAAY;AACjBV,EAAAA,IAAI,EAAEvG,SAAS,CAACgH,MAAV,CAAiBE,UADN;AAEjB1E,EAAAA,IAAI,EAAExC,SAAS,CAACmH,MAAV,CAAiBD,UAFN;AAGjBJ,EAAAA,WAAW,EAAE/G,kBAAkB,CAACqH,IAHf;AAIjB9E,EAAAA,OAAO,EAAEtC,SAAS,CAACqH,IAJF;AAKjBT,EAAAA,OAAO,EAAE5G,SAAS,CAACmH,MALF;AAMjB5E,EAAAA,WAAW,EAAEvC,SAAS,CAACmH,MANN;AAOjBnC,EAAAA,SAAS,EAAEhF,SAAS,CAACsH,UAAV,CAAqBC,IAArB,CAPM;AAQjBlC,EAAAA,aAAa,EAAErF,SAAS,CAACwH,MARR;AASjBrC,EAAAA,aAAa,EAAEnF,SAAS,CAACsH,UAAV,CAAqBC,IAArB,CATE;AAUjB5E,EAAAA,YAAY,EAAE3C,SAAS,CAACqH,IAVP;AAWjBzE,EAAAA,gBAAgB,EAAE5C,SAAS,CAACqH,IAXX;AAYjBxE,EAAAA,WAAW,EAAE7C,SAAS,CAACqH,IAZN;AAajBxF,EAAAA,QAAQ,EAAE7B,SAAS,CAACyH,IAAV,CAAeP,UAbR;AAcjB9D,EAAAA,QAAQ,EAAEpD,SAAS,CAACyH,IAAV,CAAeP,UAdR;AAejBzD,EAAAA,kBAAkB,EAAEzD,SAAS,CAACyH,IAAV,CAAeP,UAflB;AAgBjBtD,EAAAA,kBAAkB,EAAE5D,SAAS,CAACyH,IAAV,CAAeP,UAhBlB;AAiBjBrD,EAAAA,oBAAoB,EAAE7D,SAAS,CAACyH,IAAV,CAAeP,UAjBpB;AAkBjBjD,EAAAA,mBAAmB,EAAEjE,SAAS,CAACyH,IAAV,CAAeP,UAlBnB;AAmBjBV,EAAAA,OAAO,EAAExG,SAAS,CAACyH,IAAV,CAAeP,UAnBP;AAoBjBf,EAAAA,WAAW,EAAEnG,SAAS,CAACyH,IAAV,CAAeP,UApBX;AAqBjBT,EAAAA,UAAU,EAAEzG,SAAS,CAACqH,IArBL;AAsBjBvE,EAAAA,QAAQ,EAAE9C,SAAS,CAACqH,IAtBH;AAuBjBjD,EAAAA,YAAY,EAAEpE,SAAS,CAACqH;AAvBP,C,UA0BZK,Y,GAAe;AACpBjB,EAAAA,UAAU,EAAE;AADQ,C;;SAhClBhF,W","sourcesContent":["import React from 'react';\nimport CharacterCounter from './character_counter';\nimport Button from '../../../components/button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport ReplyIndicatorContainer from '../containers/reply_indicator_container';\nimport AutosuggestTextarea from '../../../components/autosuggest_textarea';\nimport AutosuggestInput from '../../../components/autosuggest_input';\nimport PollButtonContainer from '../containers/poll_button_container';\nimport UploadButtonContainer from '../containers/upload_button_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport SpoilerButtonContainer from '../containers/spoiler_button_container';\nimport PrivacyDropdownContainer from '../containers/privacy_dropdown_container';\nimport EmojiPickerDropdown from '../containers/emoji_picker_dropdown_container';\nimport PollFormContainer from '../containers/poll_form_container';\nimport UploadFormContainer from '../containers/upload_form_container';\nimport WarningContainer from '../containers/warning_container';\nimport { isMobile } from '../../../is_mobile';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { length } from 'stringz';\nimport { countableText } from '../util/counter';\nimport Icon from 'mastodon/components/icon';\n\nconst allowedAroundShortCode = '><\\u0085\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029\\u0009\\u000a\\u000b\\u000c\\u000d';\n\nconst messages = defineMessages({\n  placeholder: { id: 'compose_form.placeholder', defaultMessage: 'What is on your mind?' },\n  spoiler_placeholder: { id: 'compose_form.spoiler_placeholder', defaultMessage: 'Write your warning here' },\n  publish: { id: 'compose_form.publish', defaultMessage: 'Toot' },\n  publishLoud: { id: 'compose_form.publish_loud', defaultMessage: '{publish}!' },\n});\n\nexport default @injectIntl\nclass ComposeForm extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    text: PropTypes.string.isRequired,\n    suggestions: ImmutablePropTypes.list,\n    spoiler: PropTypes.bool,\n    privacy: PropTypes.string,\n    spoilerText: PropTypes.string,\n    focusDate: PropTypes.instanceOf(Date),\n    caretPosition: PropTypes.number,\n    preselectDate: PropTypes.instanceOf(Date),\n    isSubmitting: PropTypes.bool,\n    isChangingUpload: PropTypes.bool,\n    isUploading: PropTypes.bool,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    onClearSuggestions: PropTypes.func.isRequired,\n    onFetchSuggestions: PropTypes.func.isRequired,\n    onSuggestionSelected: PropTypes.func.isRequired,\n    onChangeSpoilerText: PropTypes.func.isRequired,\n    onPaste: PropTypes.func.isRequired,\n    onPickEmoji: PropTypes.func.isRequired,\n    showSearch: PropTypes.bool,\n    anyMedia: PropTypes.bool,\n    singleColumn: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    showSearch: false,\n  };\n\n  handleChange = (e) => {\n    this.props.onChange(e.target.value);\n  }\n\n  handleKeyDown = (e) => {\n    if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n      this.handleSubmit();\n    }\n  }\n\n  getFulltextForCharacterCounting = () => {\n    return [this.props.spoiler? this.props.spoilerText: '', countableText(this.props.text)].join('');\n  }\n\n  canSubmit = () => {\n    const { isSubmitting, isChangingUpload, isUploading, anyMedia } = this.props;\n    const fulltext = this.getFulltextForCharacterCounting();\n    const isOnlyWhitespace = fulltext.length !== 0 && fulltext.trim().length === 0;\n\n    return !(isSubmitting || isUploading || isChangingUpload || length(fulltext) > 500 || (isOnlyWhitespace && !anyMedia));\n  }\n\n  handleSubmit = () => {\n    if (this.props.text !== this.autosuggestTextarea.textarea.value) {\n      // Something changed the text inside the textarea (e.g. browser extensions like Grammarly)\n      // Update the state to match the current text\n      this.props.onChange(this.autosuggestTextarea.textarea.value);\n    }\n\n    if (!this.canSubmit()) {\n      return;\n    }\n\n    this.props.onSubmit(this.context.router ? this.context.router.history : null);\n  }\n\n  onSuggestionsClearRequested = () => {\n    this.props.onClearSuggestions();\n  }\n\n  onSuggestionsFetchRequested = (token) => {\n    this.props.onFetchSuggestions(token);\n  }\n\n  onSuggestionSelected = (tokenStart, token, value) => {\n    this.props.onSuggestionSelected(tokenStart, token, value, ['text']);\n  }\n\n  onSpoilerSuggestionSelected = (tokenStart, token, value) => {\n    this.props.onSuggestionSelected(tokenStart, token, value, ['spoiler_text']);\n  }\n\n  handleChangeSpoilerText = (e) => {\n    this.props.onChangeSpoilerText(e.target.value);\n  }\n\n  handleFocus = () => {\n    if (this.composeForm && !this.props.singleColumn) {\n      const { left, right } = this.composeForm.getBoundingClientRect();\n      if (left < 0 || right > (window.innerWidth || document.documentElement.clientWidth)) {\n        this.composeForm.scrollIntoView();\n      }\n    }\n  }\n\n  componentDidMount () {\n    this._updateFocusAndSelection({ });\n  }\n\n  componentDidUpdate (prevProps) {\n    this._updateFocusAndSelection(prevProps);\n  }\n\n  _updateFocusAndSelection = (prevProps) => {\n    // This statement does several things:\n    // - If we're beginning a reply, and,\n    //     - Replying to zero or one users, places the cursor at the end of the textbox.\n    //     - Replying to more than one user, selects any usernames past the first;\n    //       this provides a convenient shortcut to drop everyone else from the conversation.\n    if (this.props.focusDate !== prevProps.focusDate) {\n      let selectionEnd, selectionStart;\n\n      if (this.props.preselectDate !== prevProps.preselectDate) {\n        selectionEnd   = this.props.text.length;\n        selectionStart = this.props.text.search(/\\s/) + 1;\n      } else if (typeof this.props.caretPosition === 'number') {\n        selectionStart = this.props.caretPosition;\n        selectionEnd   = this.props.caretPosition;\n      } else {\n        selectionEnd   = this.props.text.length;\n        selectionStart = selectionEnd;\n      }\n\n      this.autosuggestTextarea.textarea.setSelectionRange(selectionStart, selectionEnd);\n      this.autosuggestTextarea.textarea.focus();\n    } else if(prevProps.isSubmitting && !this.props.isSubmitting) {\n      this.autosuggestTextarea.textarea.focus();\n    } else if (this.props.spoiler !== prevProps.spoiler) {\n      if (this.props.spoiler) {\n        this.spoilerText.input.focus();\n      } else {\n        this.autosuggestTextarea.textarea.focus();\n      }\n    }\n  }\n\n  setAutosuggestTextarea = (c) => {\n    this.autosuggestTextarea = c;\n  }\n\n  setSpoilerText = (c) => {\n    this.spoilerText = c;\n  }\n\n  setRef = c => {\n    this.composeForm = c;\n  };\n\n  handleEmojiPick = (data) => {\n    const { text }     = this.props;\n    const position     = this.autosuggestTextarea.textarea.selectionStart;\n    const needsSpace   = data.custom && position > 0 && !allowedAroundShortCode.includes(text[position - 1]);\n\n    this.props.onPickEmoji(position, data, needsSpace);\n  }\n\n  render () {\n    const { intl, onPaste, showSearch } = this.props;\n    const disabled = this.props.isSubmitting;\n    let publishText = '';\n\n    if (this.props.privacy === 'private' || this.props.privacy === 'direct') {\n      publishText = <span className='compose-form__publish-private'><Icon id='lock' /> {intl.formatMessage(messages.publish)}</span>;\n    } else {\n      publishText = this.props.privacy !== 'unlisted' ? intl.formatMessage(messages.publishLoud, { publish: intl.formatMessage(messages.publish) }) : intl.formatMessage(messages.publish);\n    }\n\n    return (\n      <div className='compose-form'>\n        <WarningContainer />\n\n        <ReplyIndicatorContainer />\n\n        <div className={`spoiler-input ${this.props.spoiler ? 'spoiler-input--visible' : ''}`} ref={this.setRef}>\n          <AutosuggestInput\n            placeholder={intl.formatMessage(messages.spoiler_placeholder)}\n            value={this.props.spoilerText}\n            onChange={this.handleChangeSpoilerText}\n            onKeyDown={this.handleKeyDown}\n            disabled={!this.props.spoiler}\n            ref={this.setSpoilerText}\n            suggestions={this.props.suggestions}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            onSuggestionSelected={this.onSpoilerSuggestionSelected}\n            searchTokens={[':']}\n            id='cw-spoiler-input'\n            className='spoiler-input__input'\n          />\n        </div>\n\n        <AutosuggestTextarea\n          ref={this.setAutosuggestTextarea}\n          placeholder={intl.formatMessage(messages.placeholder)}\n          disabled={disabled}\n          value={this.props.text}\n          onChange={this.handleChange}\n          suggestions={this.props.suggestions}\n          onFocus={this.handleFocus}\n          onKeyDown={this.handleKeyDown}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          onSuggestionSelected={this.onSuggestionSelected}\n          onPaste={onPaste}\n          autoFocus={!showSearch && !isMobile(window.innerWidth)}\n        >\n          <EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} />\n          <div className='compose-form__modifiers'>\n            <UploadFormContainer />\n            <PollFormContainer />\n          </div>\n        </AutosuggestTextarea>\n\n        <div className='compose-form__buttons-wrapper'>\n          <div className='compose-form__buttons'>\n            <UploadButtonContainer />\n            <PollButtonContainer />\n            <PrivacyDropdownContainer />\n            <SpoilerButtonContainer />\n          </div>\n          <div className='character-counter__wrapper'><CharacterCounter max={500} text={this.getFulltextForCharacterCounting()} /></div>\n        </div>\n\n        <div className='compose-form__publish'>\n          <div className='compose-form__publish-button-wrapper'><Button text={publishText} onClick={this.handleSubmit} disabled={!this.canSubmit()} block /></div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"compose_form.placeholder","defaultMessage":"What is on your mind?"},{"id":"compose_form.spoiler_placeholder","defaultMessage":"Write your warning here"},{"id":"compose_form.publish","defaultMessage":"Toot"},{"id":"compose_form.publish_loud","defaultMessage":"{publish}!"}]}},"sourceType":"module"}