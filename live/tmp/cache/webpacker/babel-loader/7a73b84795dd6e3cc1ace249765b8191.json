{"ast":null,"code":"// Dynamically set webpack's loading path depending on a meta header, in order\n// to share the same assets regardless of instance configuration.\n// See https://webpack.js.org/guides/public-path/#on-the-fly\nfunction removeOuterSlashes(string) {\n  return string.replace(/^\\/*/, '').replace(/\\/*$/, '');\n}\n\nfunction formatPublicPath(host, path) {\n  if (host === void 0) {\n    host = '';\n  }\n\n  if (path === void 0) {\n    path = '';\n  }\n\n  var formattedHost = removeOuterSlashes(host);\n\n  if (formattedHost && !/^http/i.test(formattedHost)) {\n    formattedHost = \"//\" + formattedHost;\n  }\n\n  var formattedPath = removeOuterSlashes(path);\n  return formattedHost + \"/\" + formattedPath + \"/\";\n}\n\nvar cdnHost = document.querySelector('meta[name=cdn-host]'); // eslint-disable-next-line camelcase, no-undef, no-unused-vars\n\n__webpack_public_path__ = formatPublicPath(cdnHost ? cdnHost.content : '', process.env.PUBLIC_OUTPUT_PATH);","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/packs/public-path.js"],"names":["removeOuterSlashes","string","replace","formatPublicPath","host","path","formattedHost","test","formattedPath","cdnHost","document","querySelector","__webpack_public_path__","content","process","env","PUBLIC_OUTPUT_PATH"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC,SAAOA,MAAM,CAACC,OAAP,CAAe,MAAf,EAAuB,EAAvB,EAA2BA,OAA3B,CAAmC,MAAnC,EAA2C,EAA3C,CAAP;AACD;;AAED,SAASC,gBAAT,CAA0BC,IAA1B,EAAqCC,IAArC,EAAgD;AAAA,MAAtBD,IAAsB;AAAtBA,IAAAA,IAAsB,GAAf,EAAe;AAAA;;AAAA,MAAXC,IAAW;AAAXA,IAAAA,IAAW,GAAJ,EAAI;AAAA;;AAC9C,MAAIC,aAAa,GAAGN,kBAAkB,CAACI,IAAD,CAAtC;;AACA,MAAIE,aAAa,IAAI,CAAC,SAASC,IAAT,CAAcD,aAAd,CAAtB,EAAoD;AAClDA,IAAAA,aAAa,UAAQA,aAArB;AACD;;AACD,MAAME,aAAa,GAAGR,kBAAkB,CAACK,IAAD,CAAxC;AACA,SAAUC,aAAV,SAA2BE,aAA3B;AACD;;AAED,IAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,qBAAvB,CAAhB,C,CAEA;;AACAC,uBAAuB,GAAGT,gBAAgB,CAACM,OAAO,GAAGA,OAAO,CAACI,OAAX,GAAqB,EAA7B,EAAiCC,OAAO,CAACC,GAAR,CAAYC,kBAA7C,CAA1C","sourcesContent":["// Dynamically set webpack's loading path depending on a meta header, in order\n// to share the same assets regardless of instance configuration.\n// See https://webpack.js.org/guides/public-path/#on-the-fly\n\nfunction removeOuterSlashes(string) {\n  return string.replace(/^\\/*/, '').replace(/\\/*$/, '');\n}\n\nfunction formatPublicPath(host = '', path = '') {\n  let formattedHost = removeOuterSlashes(host);\n  if (formattedHost && !/^http/i.test(formattedHost)) {\n    formattedHost = `//${formattedHost}`;\n  }\n  const formattedPath = removeOuterSlashes(path);\n  return `${formattedHost}/${formattedPath}/`;\n}\n\nconst cdnHost = document.querySelector('meta[name=cdn-host]');\n\n// eslint-disable-next-line camelcase, no-undef, no-unused-vars\n__webpack_public_path__ = formatPublicPath(cdnHost ? cdnHost.content : '', process.env.PUBLIC_OUTPUT_PATH);\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}