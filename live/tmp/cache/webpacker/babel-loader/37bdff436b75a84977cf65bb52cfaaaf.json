{"ast":null,"code":"import { TIMELINE_UPDATE, TIMELINE_DELETE, TIMELINE_CLEAR, TIMELINE_EXPAND_SUCCESS, TIMELINE_EXPAND_REQUEST, TIMELINE_EXPAND_FAIL, TIMELINE_SCROLL_TOP, TIMELINE_CONNECT, TIMELINE_DISCONNECT, TIMELINE_LOAD_PENDING, TIMELINE_MARK_AS_PARTIAL } from '../actions/timelines';\nimport { ACCOUNT_BLOCK_SUCCESS, ACCOUNT_MUTE_SUCCESS, ACCOUNT_UNFOLLOW_SUCCESS } from '../actions/accounts';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\nimport compareId from '../compare_id';\nvar initialState = ImmutableMap();\nvar initialTimeline = ImmutableMap({\n  unread: 0,\n  online: false,\n  top: true,\n  isLoading: false,\n  hasMore: true,\n  pendingItems: ImmutableList(),\n  items: ImmutableList()\n});\n\nvar expandNormalizedTimeline = function expandNormalizedTimeline(state, timeline, statuses, next, isPartial, isLoadingRecent, usePendingItems) {\n  return state.update(timeline, initialTimeline, function (map) {\n    return map.withMutations(function (mMap) {\n      mMap.set('isLoading', false);\n      mMap.set('isPartial', isPartial);\n      if (!next && !isLoadingRecent) mMap.set('hasMore', false);\n\n      if (timeline.endsWith(':pinned')) {\n        mMap.set('items', statuses.map(function (status) {\n          return status.get('id');\n        }));\n      } else if (!statuses.isEmpty()) {\n        usePendingItems = isLoadingRecent && (usePendingItems || !mMap.get('pendingItems').isEmpty());\n        mMap.update(usePendingItems ? 'pendingItems' : 'items', ImmutableList(), function (oldIds) {\n          var newIds = statuses.map(function (status) {\n            return status.get('id');\n          });\n          var lastIndex = oldIds.findLastIndex(function (id) {\n            return id !== null && compareId(id, newIds.last()) >= 0;\n          }) + 1;\n          var firstIndex = oldIds.take(lastIndex).findLastIndex(function (id) {\n            return id !== null && compareId(id, newIds.first()) > 0;\n          });\n\n          if (firstIndex < 0) {\n            return (isPartial ? newIds.unshift(null) : newIds).concat(oldIds.skip(lastIndex));\n          }\n\n          return oldIds.take(firstIndex + 1).concat(isPartial && oldIds.get(firstIndex) !== null ? newIds.unshift(null) : newIds, oldIds.skip(lastIndex));\n        });\n      }\n    });\n  });\n};\n\nvar updateTimeline = function updateTimeline(state, timeline, status, usePendingItems) {\n  var top = state.getIn([timeline, 'top']);\n\n  if (usePendingItems || !state.getIn([timeline, 'pendingItems']).isEmpty()) {\n    if (state.getIn([timeline, 'pendingItems'], ImmutableList()).includes(status.get('id')) || state.getIn([timeline, 'items'], ImmutableList()).includes(status.get('id'))) {\n      return state;\n    }\n\n    return state.update(timeline, initialTimeline, function (map) {\n      return map.update('pendingItems', function (list) {\n        return list.unshift(status.get('id'));\n      }).update('unread', function (unread) {\n        return unread + 1;\n      });\n    });\n  }\n\n  var ids = state.getIn([timeline, 'items'], ImmutableList());\n  var includesId = ids.includes(status.get('id'));\n  var unread = state.getIn([timeline, 'unread'], 0);\n\n  if (includesId) {\n    return state;\n  }\n\n  var newIds = ids;\n  return state.update(timeline, initialTimeline, function (map) {\n    return map.withMutations(function (mMap) {\n      if (!top) mMap.set('unread', unread + 1);\n      if (top && ids.size > 40) newIds = newIds.take(20);\n      mMap.set('items', newIds.unshift(status.get('id')));\n    });\n  });\n};\n\nvar deleteStatus = function deleteStatus(state, id, references, exclude_account) {\n  if (exclude_account === void 0) {\n    exclude_account = null;\n  }\n\n  state.keySeq().forEach(function (timeline) {\n    if (exclude_account === null || timeline !== \"account:\" + exclude_account && !timeline.startsWith(\"account:\" + exclude_account + \":\")) {\n      var helper = function helper(list) {\n        return list.filterNot(function (item) {\n          return item === id;\n        });\n      };\n\n      state = state.updateIn([timeline, 'items'], helper).updateIn([timeline, 'pendingItems'], helper);\n    }\n  }); // Remove reblogs of deleted status\n\n  references.forEach(function (ref) {\n    state = deleteStatus(state, ref, [], exclude_account);\n  });\n  return state;\n};\n\nvar clearTimeline = function clearTimeline(state, timeline) {\n  return state.set(timeline, initialTimeline);\n};\n\nvar filterTimelines = function filterTimelines(state, relationship, statuses) {\n  var references;\n  statuses.forEach(function (status) {\n    if (status.get('account') !== relationship.id) {\n      return;\n    }\n\n    references = statuses.filter(function (item) {\n      return item.get('reblog') === status.get('id');\n    }).map(function (item) {\n      return item.get('id');\n    });\n    state = deleteStatus(state, status.get('id'), references, relationship.id);\n  });\n  return state;\n};\n\nvar filterTimeline = function filterTimeline(timeline, state, relationship, statuses) {\n  var helper = function helper(list) {\n    return list.filterNot(function (statusId) {\n      return statuses.getIn([statusId, 'account']) === relationship.id;\n    });\n  };\n\n  return state.updateIn([timeline, 'items'], ImmutableList(), helper).updateIn([timeline, 'pendingItems'], ImmutableList(), helper);\n};\n\nvar updateTop = function updateTop(state, timeline, top) {\n  return state.update(timeline, initialTimeline, function (map) {\n    return map.withMutations(function (mMap) {\n      if (top) mMap.set('unread', mMap.get('pendingItems').size);\n      mMap.set('top', top);\n    });\n  });\n};\n\nexport default function timelines(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case TIMELINE_LOAD_PENDING:\n      return state.update(action.timeline, initialTimeline, function (map) {\n        return map.update('items', function (list) {\n          return map.get('pendingItems').concat(list.take(40));\n        }).set('pendingItems', ImmutableList()).set('unread', 0);\n      });\n\n    case TIMELINE_EXPAND_REQUEST:\n      return state.update(action.timeline, initialTimeline, function (map) {\n        return map.set('isLoading', true);\n      });\n\n    case TIMELINE_EXPAND_FAIL:\n      return state.update(action.timeline, initialTimeline, function (map) {\n        return map.set('isLoading', false);\n      });\n\n    case TIMELINE_EXPAND_SUCCESS:\n      return expandNormalizedTimeline(state, action.timeline, fromJS(action.statuses), action.next, action.partial, action.isLoadingRecent, action.usePendingItems);\n\n    case TIMELINE_UPDATE:\n      return updateTimeline(state, action.timeline, fromJS(action.status), action.usePendingItems);\n\n    case TIMELINE_DELETE:\n      return deleteStatus(state, action.id, action.references, action.reblogOf);\n\n    case TIMELINE_CLEAR:\n      return clearTimeline(state, action.timeline);\n\n    case ACCOUNT_BLOCK_SUCCESS:\n    case ACCOUNT_MUTE_SUCCESS:\n      return filterTimelines(state, action.relationship, action.statuses);\n\n    case ACCOUNT_UNFOLLOW_SUCCESS:\n      return filterTimeline('home', state, action.relationship, action.statuses);\n\n    case TIMELINE_SCROLL_TOP:\n      return updateTop(state, action.timeline, action.top);\n\n    case TIMELINE_CONNECT:\n      return state.update(action.timeline, initialTimeline, function (map) {\n        return map.set('online', true);\n      });\n\n    case TIMELINE_DISCONNECT:\n      return state.update(action.timeline, initialTimeline, function (map) {\n        return map.set('online', false).update(action.usePendingItems ? 'pendingItems' : 'items', function (items) {\n          return items.first() ? items.unshift(null) : items;\n        });\n      });\n\n    case TIMELINE_MARK_AS_PARTIAL:\n      return state.update(action.timeline, initialTimeline, function (map) {\n        return map.set('isPartial', true).set('items', ImmutableList()).set('pendingItems', ImmutableList()).set('unread', 0);\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/timelines.js"],"names":["TIMELINE_UPDATE","TIMELINE_DELETE","TIMELINE_CLEAR","TIMELINE_EXPAND_SUCCESS","TIMELINE_EXPAND_REQUEST","TIMELINE_EXPAND_FAIL","TIMELINE_SCROLL_TOP","TIMELINE_CONNECT","TIMELINE_DISCONNECT","TIMELINE_LOAD_PENDING","TIMELINE_MARK_AS_PARTIAL","ACCOUNT_BLOCK_SUCCESS","ACCOUNT_MUTE_SUCCESS","ACCOUNT_UNFOLLOW_SUCCESS","Map","ImmutableMap","List","ImmutableList","fromJS","compareId","initialState","initialTimeline","unread","online","top","isLoading","hasMore","pendingItems","items","expandNormalizedTimeline","state","timeline","statuses","next","isPartial","isLoadingRecent","usePendingItems","update","map","withMutations","mMap","set","endsWith","status","get","isEmpty","oldIds","newIds","lastIndex","findLastIndex","id","last","firstIndex","take","first","unshift","concat","skip","updateTimeline","getIn","includes","list","ids","includesId","size","deleteStatus","references","exclude_account","keySeq","forEach","startsWith","helper","filterNot","item","updateIn","ref","clearTimeline","filterTimelines","relationship","filter","filterTimeline","statusId","updateTop","timelines","action","type","partial","reblogOf"],"mappings":"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","sourcesContent":["import {\n  TIMELINE_UPDATE,\n  TIMELINE_DELETE,\n  TIMELINE_CLEAR,\n  TIMELINE_EXPAND_SUCCESS,\n  TIMELINE_EXPAND_REQUEST,\n  TIMELINE_EXPAND_FAIL,\n  TIMELINE_SCROLL_TOP,\n  TIMELINE_CONNECT,\n  TIMELINE_DISCONNECT,\n  TIMELINE_LOAD_PENDING,\n  TIMELINE_MARK_AS_PARTIAL,\n} from '../actions/timelines';\nimport {\n  ACCOUNT_BLOCK_SUCCESS,\n  ACCOUNT_MUTE_SUCCESS,\n  ACCOUNT_UNFOLLOW_SUCCESS,\n} from '../actions/accounts';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\nimport compareId from '../compare_id';\n\nconst initialState = ImmutableMap();\n\nconst initialTimeline = ImmutableMap({\n  unread: 0,\n  online: false,\n  top: true,\n  isLoading: false,\n  hasMore: true,\n  pendingItems: ImmutableList(),\n  items: ImmutableList(),\n});\n\nconst expandNormalizedTimeline = (state, timeline, statuses, next, isPartial, isLoadingRecent, usePendingItems) => {\n  return state.update(timeline, initialTimeline, map => map.withMutations(mMap => {\n    mMap.set('isLoading', false);\n    mMap.set('isPartial', isPartial);\n\n    if (!next && !isLoadingRecent) mMap.set('hasMore', false);\n\n    if (timeline.endsWith(':pinned')) {\n      mMap.set('items', statuses.map(status => status.get('id')));\n    } else if (!statuses.isEmpty()) {\n      usePendingItems = isLoadingRecent && (usePendingItems || !mMap.get('pendingItems').isEmpty());\n\n      mMap.update(usePendingItems ? 'pendingItems' : 'items', ImmutableList(), oldIds => {\n        const newIds = statuses.map(status => status.get('id'));\n\n        const lastIndex = oldIds.findLastIndex(id => id !== null && compareId(id, newIds.last()) >= 0) + 1;\n        const firstIndex = oldIds.take(lastIndex).findLastIndex(id => id !== null && compareId(id, newIds.first()) > 0);\n\n        if (firstIndex < 0) {\n          return (isPartial ? newIds.unshift(null) : newIds).concat(oldIds.skip(lastIndex));\n        }\n\n        return oldIds.take(firstIndex + 1).concat(\n          isPartial && oldIds.get(firstIndex) !== null ? newIds.unshift(null) : newIds,\n          oldIds.skip(lastIndex),\n        );\n      });\n    }\n  }));\n};\n\nconst updateTimeline = (state, timeline, status, usePendingItems) => {\n  const top = state.getIn([timeline, 'top']);\n\n  if (usePendingItems || !state.getIn([timeline, 'pendingItems']).isEmpty()) {\n    if (state.getIn([timeline, 'pendingItems'], ImmutableList()).includes(status.get('id')) || state.getIn([timeline, 'items'], ImmutableList()).includes(status.get('id'))) {\n      return state;\n    }\n\n    return state.update(timeline, initialTimeline, map => map.update('pendingItems', list => list.unshift(status.get('id'))).update('unread', unread => unread + 1));\n  }\n\n  const ids        = state.getIn([timeline, 'items'], ImmutableList());\n  const includesId = ids.includes(status.get('id'));\n  const unread     = state.getIn([timeline, 'unread'], 0);\n\n  if (includesId) {\n    return state;\n  }\n\n  let newIds = ids;\n\n  return state.update(timeline, initialTimeline, map => map.withMutations(mMap => {\n    if (!top) mMap.set('unread', unread + 1);\n    if (top && ids.size > 40) newIds = newIds.take(20);\n    mMap.set('items', newIds.unshift(status.get('id')));\n  }));\n};\n\nconst deleteStatus = (state, id, references, exclude_account = null) => {\n  state.keySeq().forEach(timeline => {\n    if (exclude_account === null || (timeline !== `account:${exclude_account}` && !timeline.startsWith(`account:${exclude_account}:`))) {\n      const helper = list => list.filterNot(item => item === id);\n      state = state.updateIn([timeline, 'items'], helper).updateIn([timeline, 'pendingItems'], helper);\n    }\n  });\n\n  // Remove reblogs of deleted status\n  references.forEach(ref => {\n    state = deleteStatus(state, ref, [], exclude_account);\n  });\n\n  return state;\n};\n\nconst clearTimeline = (state, timeline) => {\n  return state.set(timeline, initialTimeline);\n};\n\nconst filterTimelines = (state, relationship, statuses) => {\n  let references;\n\n  statuses.forEach(status => {\n    if (status.get('account') !== relationship.id) {\n      return;\n    }\n\n    references = statuses.filter(item => item.get('reblog') === status.get('id')).map(item => item.get('id'));\n    state      = deleteStatus(state, status.get('id'), references, relationship.id);\n  });\n\n  return state;\n};\n\nconst filterTimeline = (timeline, state, relationship, statuses) => {\n  const helper = list => list.filterNot(statusId => statuses.getIn([statusId, 'account']) === relationship.id);\n  return state.updateIn([timeline, 'items'], ImmutableList(), helper).updateIn([timeline, 'pendingItems'], ImmutableList(), helper);\n};\n\nconst updateTop = (state, timeline, top) => {\n  return state.update(timeline, initialTimeline, map => map.withMutations(mMap => {\n    if (top) mMap.set('unread', mMap.get('pendingItems').size);\n    mMap.set('top', top);\n  }));\n};\n\nexport default function timelines(state = initialState, action) {\n  switch(action.type) {\n  case TIMELINE_LOAD_PENDING:\n    return state.update(action.timeline, initialTimeline, map =>\n      map.update('items', list => map.get('pendingItems').concat(list.take(40))).set('pendingItems', ImmutableList()).set('unread', 0));\n  case TIMELINE_EXPAND_REQUEST:\n    return state.update(action.timeline, initialTimeline, map => map.set('isLoading', true));\n  case TIMELINE_EXPAND_FAIL:\n    return state.update(action.timeline, initialTimeline, map => map.set('isLoading', false));\n  case TIMELINE_EXPAND_SUCCESS:\n    return expandNormalizedTimeline(state, action.timeline, fromJS(action.statuses), action.next, action.partial, action.isLoadingRecent, action.usePendingItems);\n  case TIMELINE_UPDATE:\n    return updateTimeline(state, action.timeline, fromJS(action.status), action.usePendingItems);\n  case TIMELINE_DELETE:\n    return deleteStatus(state, action.id, action.references, action.reblogOf);\n  case TIMELINE_CLEAR:\n    return clearTimeline(state, action.timeline);\n  case ACCOUNT_BLOCK_SUCCESS:\n  case ACCOUNT_MUTE_SUCCESS:\n    return filterTimelines(state, action.relationship, action.statuses);\n  case ACCOUNT_UNFOLLOW_SUCCESS:\n    return filterTimeline('home', state, action.relationship, action.statuses);\n  case TIMELINE_SCROLL_TOP:\n    return updateTop(state, action.timeline, action.top);\n  case TIMELINE_CONNECT:\n    return state.update(action.timeline, initialTimeline, map => map.set('online', true));\n  case TIMELINE_DISCONNECT:\n    return state.update(\n      action.timeline,\n      initialTimeline,\n      map => map.set('online', false).update(action.usePendingItems ? 'pendingItems' : 'items', items => items.first() ? items.unshift(null) : items),\n    );\n  case TIMELINE_MARK_AS_PARTIAL:\n    return state.update(\n      action.timeline,\n      initialTimeline,\n      map => map.set('isPartial', true).set('items', ImmutableList()).set('pendingItems', ImmutableList()).set('unread', 0),\n    );\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}