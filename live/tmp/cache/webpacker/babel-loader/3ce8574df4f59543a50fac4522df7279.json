{"ast":null,"code":"import { DOMAIN_BLOCKS_FETCH_SUCCESS, DOMAIN_BLOCKS_EXPAND_SUCCESS, DOMAIN_UNBLOCK_SUCCESS } from '../actions/domain_blocks';\nimport { Map as ImmutableMap, OrderedSet as ImmutableOrderedSet } from 'immutable';\nvar initialState = ImmutableMap({\n  blocks: ImmutableMap({\n    items: ImmutableOrderedSet()\n  })\n});\nexport default function domainLists(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case DOMAIN_BLOCKS_FETCH_SUCCESS:\n      return state.setIn(['blocks', 'items'], ImmutableOrderedSet(action.domains)).setIn(['blocks', 'next'], action.next);\n\n    case DOMAIN_BLOCKS_EXPAND_SUCCESS:\n      return state.updateIn(['blocks', 'items'], function (set) {\n        return set.union(action.domains);\n      }).setIn(['blocks', 'next'], action.next);\n\n    case DOMAIN_UNBLOCK_SUCCESS:\n      return state.updateIn(['blocks', 'items'], function (set) {\n        return set.delete(action.domain);\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/domain_lists.js"],"names":["DOMAIN_BLOCKS_FETCH_SUCCESS","DOMAIN_BLOCKS_EXPAND_SUCCESS","DOMAIN_UNBLOCK_SUCCESS","Map","ImmutableMap","OrderedSet","ImmutableOrderedSet","initialState","blocks","items","domainLists","state","action","type","setIn","domains","next","updateIn","set","union","delete","domain"],"mappings":"AAAA,SACEA,2BADF,EAEEC,4BAFF,EAGEC,sBAHF,QAIO,0BAJP;AAKA,SAASC,GAAG,IAAIC,YAAhB,EAA8BC,UAAU,IAAIC,mBAA5C,QAAuE,WAAvE;AAEA,IAAMC,YAAY,GAAGH,YAAY,CAAC;AAChCI,EAAAA,MAAM,EAAEJ,YAAY,CAAC;AACnBK,IAAAA,KAAK,EAAEH,mBAAmB;AADP,GAAD;AADY,CAAD,CAAjC;AAMA,eAAe,SAASI,WAAT,CAAqBC,KAArB,EAA2CC,MAA3C,EAAmD;AAAA,MAA9BD,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBJ,YAAsB;AAAA;;AAChE,UAAOK,MAAM,CAACC,IAAd;AACA,SAAKb,2BAAL;AACE,aAAOW,KAAK,CAACG,KAAN,CAAY,CAAC,QAAD,EAAW,OAAX,CAAZ,EAAiCR,mBAAmB,CAACM,MAAM,CAACG,OAAR,CAApD,EAAsED,KAAtE,CAA4E,CAAC,QAAD,EAAW,MAAX,CAA5E,EAAgGF,MAAM,CAACI,IAAvG,CAAP;;AACF,SAAKf,4BAAL;AACE,aAAOU,KAAK,CAACM,QAAN,CAAe,CAAC,QAAD,EAAW,OAAX,CAAf,EAAoC,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,KAAJ,CAAUP,MAAM,CAACG,OAAjB,CAAJ;AAAA,OAAvC,EAAsED,KAAtE,CAA4E,CAAC,QAAD,EAAW,MAAX,CAA5E,EAAgGF,MAAM,CAACI,IAAvG,CAAP;;AACF,SAAKd,sBAAL;AACE,aAAOS,KAAK,CAACM,QAAN,CAAe,CAAC,QAAD,EAAW,OAAX,CAAf,EAAoC,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACE,MAAJ,CAAWR,MAAM,CAACS,MAAlB,CAAJ;AAAA,OAAvC,CAAP;;AACF;AACE,aAAOV,KAAP;AARF;AAUD;AAAA","sourcesContent":["import {\n  DOMAIN_BLOCKS_FETCH_SUCCESS,\n  DOMAIN_BLOCKS_EXPAND_SUCCESS,\n  DOMAIN_UNBLOCK_SUCCESS,\n} from '../actions/domain_blocks';\nimport { Map as ImmutableMap, OrderedSet as ImmutableOrderedSet } from 'immutable';\n\nconst initialState = ImmutableMap({\n  blocks: ImmutableMap({\n    items: ImmutableOrderedSet(),\n  }),\n});\n\nexport default function domainLists(state = initialState, action) {\n  switch(action.type) {\n  case DOMAIN_BLOCKS_FETCH_SUCCESS:\n    return state.setIn(['blocks', 'items'], ImmutableOrderedSet(action.domains)).setIn(['blocks', 'next'], action.next);\n  case DOMAIN_BLOCKS_EXPAND_SUCCESS:\n    return state.updateIn(['blocks', 'items'], set => set.union(action.domains)).setIn(['blocks', 'next'], action.next);\n  case DOMAIN_UNBLOCK_SUCCESS:\n    return state.updateIn(['blocks', 'items'], set => set.delete(action.domain));\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}