{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/community_timeline/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandCommunityTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectCommunityStream } from '../../actions/streaming';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"column.community\",\n    \"defaultMessage\": \"Local timeline\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var columnId = _ref.columnId;\n  var uuid = columnId;\n  var columns = state.getIn(['settings', 'columns']);\n  var index = columns.findIndex(function (c) {\n    return c.get('uuid') === uuid;\n  });\n  var onlyMedia = columnId && index >= 0 ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  var timelineState = state.getIn(['timelines', \"community\" + (onlyMedia ? ':media' : '')]);\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia\n  };\n};\n\nvar CommunityTimeline = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(CommunityTimeline, _React$PureComponent);\n\n  function CommunityTimeline() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handlePin = function () {\n      var _this$props = _this.props,\n          columnId = _this$props.columnId,\n          dispatch = _this$props.dispatch,\n          onlyMedia = _this$props.onlyMedia;\n\n      if (columnId) {\n        dispatch(removeColumn(columnId));\n      } else {\n        dispatch(addColumn('COMMUNITY', {\n          other: {\n            onlyMedia\n          }\n        }));\n      }\n    };\n\n    _this.handleMove = function (dir) {\n      var _this$props2 = _this.props,\n          columnId = _this$props2.columnId,\n          dispatch = _this$props2.dispatch;\n      dispatch(moveColumn(columnId, dir));\n    };\n\n    _this.handleHeaderClick = function () {\n      _this.column.scrollTop();\n    };\n\n    _this.setRef = function (c) {\n      _this.column = c;\n    };\n\n    _this.handleLoadMore = function (maxId) {\n      var _this$props3 = _this.props,\n          dispatch = _this$props3.dispatch,\n          onlyMedia = _this$props3.onlyMedia;\n      dispatch(expandCommunityTimeline({\n        maxId,\n        onlyMedia\n      }));\n    };\n\n    return _this;\n  }\n\n  var _proto = CommunityTimeline.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props4 = this.props,\n        dispatch = _this$props4.dispatch,\n        onlyMedia = _this$props4.onlyMedia;\n    dispatch(expandCommunityTimeline({\n      onlyMedia\n    }));\n    this.disconnect = dispatch(connectCommunityStream({\n      onlyMedia\n    }));\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      var _this$props5 = this.props,\n          dispatch = _this$props5.dispatch,\n          onlyMedia = _this$props5.onlyMedia;\n      this.disconnect();\n      dispatch(expandCommunityTimeline({\n        onlyMedia\n      }));\n      this.disconnect = dispatch(connectCommunityStream({\n        onlyMedia\n      }));\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props6 = this.props,\n        intl = _this$props6.intl,\n        hasUnread = _this$props6.hasUnread,\n        columnId = _this$props6.columnId,\n        multiColumn = _this$props6.multiColumn,\n        onlyMedia = _this$props6.onlyMedia;\n    var pinned = !!columnId;\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      ref: this.setRef,\n      label: intl.formatMessage(messages.title),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      icon: \"users\",\n      active: hasUnread,\n      title: intl.formatMessage(messages.title),\n      onPin: this.handlePin,\n      onMove: this.handleMove,\n      onClick: this.handleHeaderClick,\n      pinned: pinned,\n      multiColumn: multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ColumnSettingsContainer, {\n      columnId: columnId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(StatusListContainer, {\n      trackScroll: !pinned,\n      scrollKey: \"community_timeline-\" + columnId,\n      timelineId: \"community\" + (onlyMedia ? ':media' : ''),\n      onLoadMore: this.handleLoadMore,\n      emptyMessage: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"empty_column.community\",\n        defaultMessage: \"The local timeline is empty. Write something publicly to get the ball rolling!\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      }),\n      bindToDocument: !multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return CommunityTimeline;\n}(React.PureComponent), _class2.contextTypes = {\n  router: PropTypes.object\n}, _class2.defaultProps = {\n  onlyMedia: false\n}, _class2.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  columnId: PropTypes.string,\n  intl: PropTypes.object.isRequired,\n  hasUnread: PropTypes.bool,\n  multiColumn: PropTypes.bool,\n  onlyMedia: PropTypes.bool\n}, _temp)) || _class) || _class);\nexport { CommunityTimeline as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/community_timeline/index.js"],"names":["React","connect","defineMessages","injectIntl","FormattedMessage","PropTypes","StatusListContainer","Column","ColumnHeader","expandCommunityTimeline","addColumn","removeColumn","moveColumn","ColumnSettingsContainer","connectCommunityStream","messages","title","mapStateToProps","state","columnId","uuid","columns","getIn","index","findIndex","c","get","onlyMedia","timelineState","hasUnread","CommunityTimeline","handlePin","props","dispatch","other","handleMove","dir","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","componentDidMount","disconnect","componentDidUpdate","prevProps","componentWillUnmount","render","intl","multiColumn","pinned","formatMessage","PureComponent","contextTypes","router","object","defaultProps","propTypes","func","isRequired","string","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandCommunityTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectCommunityStream } from '../../actions/streaming';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  const timelineState = state.getIn(['timelines', `community${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass CommunityTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n    this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      this.disconnect();\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, onlyMedia } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`community_timeline-${columnId}`}\n          timelineId={`community${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"column.community","defaultMessage":"Local timeline"},{"id":"empty_column.community","defaultMessage":"The local timeline is empty. Write something publicly to get the ball rolling!"}]}},"sourceType":"module"}