{"ast":null,"code":"import { connect } from 'react-redux';\nimport EmojiPickerDropdown from '../components/emoji_picker_dropdown';\nimport { changeSetting } from '../../../actions/settings';\nimport { createSelector } from 'reselect';\nimport { Map as ImmutableMap } from 'immutable';\nimport { useEmoji } from '../../../actions/emojis';\nvar perLine = 8;\nvar lines = 2;\nvar DEFAULTS = ['+1', 'grinning', 'kissing_heart', 'heart_eyes', 'laughing', 'stuck_out_tongue_winking_eye', 'sweat_smile', 'joy', 'yum', 'disappointed', 'thinking_face', 'weary', 'sob', 'sunglasses', 'heart', 'ok_hand'];\nvar getFrequentlyUsedEmojis = createSelector([function (state) {\n  return state.getIn(['settings', 'frequentlyUsedEmojis'], ImmutableMap());\n}], function (emojiCounters) {\n  var emojis = emojiCounters.keySeq().sort(function (a, b) {\n    return emojiCounters.get(a) - emojiCounters.get(b);\n  }).reverse().slice(0, perLine * lines).toArray();\n\n  if (emojis.length < DEFAULTS.length) {\n    var uniqueDefaults = DEFAULTS.filter(function (emoji) {\n      return !emojis.includes(emoji);\n    });\n    emojis = emojis.concat(uniqueDefaults.slice(0, DEFAULTS.length - emojis.length));\n  }\n\n  return emojis;\n});\nvar getCustomEmojis = createSelector([function (state) {\n  return state.get('custom_emojis');\n}], function (emojis) {\n  return emojis.filter(function (e) {\n    return e.get('visible_in_picker');\n  }).sort(function (a, b) {\n    var aShort = a.get('shortcode').toLowerCase();\n    var bShort = b.get('shortcode').toLowerCase();\n\n    if (aShort < bShort) {\n      return -1;\n    } else if (aShort > bShort) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    custom_emojis: getCustomEmojis(state),\n    skinTone: state.getIn(['settings', 'skinTone']),\n    frequentlyUsedEmojis: getFrequentlyUsedEmojis(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {\n  var _onPickEmoji = _ref.onPickEmoji;\n  return {\n    onSkinTone: function onSkinTone(skinTone) {\n      dispatch(changeSetting(['skinTone'], skinTone));\n    },\n    onPickEmoji: function onPickEmoji(emoji) {\n      dispatch(useEmoji(emoji));\n\n      if (_onPickEmoji) {\n        _onPickEmoji(emoji);\n      }\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiPickerDropdown);","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/compose/containers/emoji_picker_dropdown_container.js"],"names":["connect","EmojiPickerDropdown","changeSetting","createSelector","Map","ImmutableMap","useEmoji","perLine","lines","DEFAULTS","getFrequentlyUsedEmojis","state","getIn","emojiCounters","emojis","keySeq","sort","a","b","get","reverse","slice","toArray","length","uniqueDefaults","filter","emoji","includes","concat","getCustomEmojis","e","aShort","toLowerCase","bShort","mapStateToProps","custom_emojis","skinTone","frequentlyUsedEmojis","mapDispatchToProps","dispatch","onPickEmoji","onSkinTone"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport EmojiPickerDropdown from '../components/emoji_picker_dropdown';\nimport { changeSetting } from '../../../actions/settings';\nimport { createSelector } from 'reselect';\nimport { Map as ImmutableMap } from 'immutable';\nimport { useEmoji } from '../../../actions/emojis';\n\nconst perLine = 8;\nconst lines   = 2;\n\nconst DEFAULTS = [\n  '+1',\n  'grinning',\n  'kissing_heart',\n  'heart_eyes',\n  'laughing',\n  'stuck_out_tongue_winking_eye',\n  'sweat_smile',\n  'joy',\n  'yum',\n  'disappointed',\n  'thinking_face',\n  'weary',\n  'sob',\n  'sunglasses',\n  'heart',\n  'ok_hand',\n];\n\nconst getFrequentlyUsedEmojis = createSelector([\n  state => state.getIn(['settings', 'frequentlyUsedEmojis'], ImmutableMap()),\n], emojiCounters => {\n  let emojis = emojiCounters\n    .keySeq()\n    .sort((a, b) => emojiCounters.get(a) - emojiCounters.get(b))\n    .reverse()\n    .slice(0, perLine * lines)\n    .toArray();\n\n  if (emojis.length < DEFAULTS.length) {\n    let uniqueDefaults = DEFAULTS.filter(emoji => !emojis.includes(emoji));\n    emojis = emojis.concat(uniqueDefaults.slice(0, DEFAULTS.length - emojis.length));\n  }\n\n  return emojis;\n});\n\nconst getCustomEmojis = createSelector([\n  state => state.get('custom_emojis'),\n], emojis => emojis.filter(e => e.get('visible_in_picker')).sort((a, b) => {\n  const aShort = a.get('shortcode').toLowerCase();\n  const bShort = b.get('shortcode').toLowerCase();\n\n  if (aShort < bShort) {\n    return -1;\n  } else if (aShort > bShort ) {\n    return 1;\n  } else {\n    return 0;\n  }\n}));\n\nconst mapStateToProps = state => ({\n  custom_emojis: getCustomEmojis(state),\n  skinTone: state.getIn(['settings', 'skinTone']),\n  frequentlyUsedEmojis: getFrequentlyUsedEmojis(state),\n});\n\nconst mapDispatchToProps = (dispatch, { onPickEmoji }) => ({\n  onSkinTone: skinTone => {\n    dispatch(changeSetting(['skinTone'], skinTone));\n  },\n\n  onPickEmoji: emoji => {\n    dispatch(useEmoji(emoji));\n\n    if (onPickEmoji) {\n      onPickEmoji(emoji);\n    }\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiPickerDropdown);\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}