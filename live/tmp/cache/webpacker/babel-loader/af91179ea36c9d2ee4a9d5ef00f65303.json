{"ast":null,"code":"import api, { getLinks } from '../api';\nimport { importFetchedAccounts, importFetchedStatuses, importFetchedStatus } from './importer';\nexport var CONVERSATIONS_MOUNT = 'CONVERSATIONS_MOUNT';\nexport var CONVERSATIONS_UNMOUNT = 'CONVERSATIONS_UNMOUNT';\nexport var CONVERSATIONS_FETCH_REQUEST = 'CONVERSATIONS_FETCH_REQUEST';\nexport var CONVERSATIONS_FETCH_SUCCESS = 'CONVERSATIONS_FETCH_SUCCESS';\nexport var CONVERSATIONS_FETCH_FAIL = 'CONVERSATIONS_FETCH_FAIL';\nexport var CONVERSATIONS_UPDATE = 'CONVERSATIONS_UPDATE';\nexport var CONVERSATIONS_READ = 'CONVERSATIONS_READ';\nexport var CONVERSATIONS_DELETE_REQUEST = 'CONVERSATIONS_DELETE_REQUEST';\nexport var CONVERSATIONS_DELETE_SUCCESS = 'CONVERSATIONS_DELETE_SUCCESS';\nexport var CONVERSATIONS_DELETE_FAIL = 'CONVERSATIONS_DELETE_FAIL';\nexport var mountConversations = function mountConversations() {\n  return {\n    type: CONVERSATIONS_MOUNT\n  };\n};\nexport var unmountConversations = function unmountConversations() {\n  return {\n    type: CONVERSATIONS_UNMOUNT\n  };\n};\nexport var markConversationRead = function markConversationRead(conversationId) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: CONVERSATIONS_READ,\n      id: conversationId\n    });\n    api(getState).post(\"/api/v1/conversations/\" + conversationId + \"/read\");\n  };\n};\nexport var expandConversations = function expandConversations(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      maxId = _ref.maxId;\n\n  return function (dispatch, getState) {\n    dispatch(expandConversationsRequest());\n    var params = {\n      max_id: maxId\n    };\n\n    if (!maxId) {\n      params.since_id = getState().getIn(['conversations', 'items', 0, 'last_status']);\n    }\n\n    var isLoadingRecent = !!params.since_id;\n    api(getState).get('/api/v1/conversations', {\n      params\n    }).then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(importFetchedAccounts(response.data.reduce(function (aggr, item) {\n        return aggr.concat(item.accounts);\n      }, [])));\n      dispatch(importFetchedStatuses(response.data.map(function (item) {\n        return item.last_status;\n      }).filter(function (x) {\n        return !!x;\n      })));\n      dispatch(expandConversationsSuccess(response.data, next ? next.uri : null, isLoadingRecent));\n    }).catch(function (err) {\n      return dispatch(expandConversationsFail(err));\n    });\n  };\n};\nexport var expandConversationsRequest = function expandConversationsRequest() {\n  return {\n    type: CONVERSATIONS_FETCH_REQUEST\n  };\n};\nexport var expandConversationsSuccess = function expandConversationsSuccess(conversations, next, isLoadingRecent) {\n  return {\n    type: CONVERSATIONS_FETCH_SUCCESS,\n    conversations,\n    next,\n    isLoadingRecent\n  };\n};\nexport var expandConversationsFail = function expandConversationsFail(error) {\n  return {\n    type: CONVERSATIONS_FETCH_FAIL,\n    error\n  };\n};\nexport var updateConversations = function updateConversations(conversation) {\n  return function (dispatch) {\n    dispatch(importFetchedAccounts(conversation.accounts));\n\n    if (conversation.last_status) {\n      dispatch(importFetchedStatus(conversation.last_status));\n    }\n\n    dispatch({\n      type: CONVERSATIONS_UPDATE,\n      conversation\n    });\n  };\n};\nexport var deleteConversation = function deleteConversation(conversationId) {\n  return function (dispatch, getState) {\n    dispatch(deleteConversationRequest(conversationId));\n    api(getState).delete(\"/api/v1/conversations/\" + conversationId).then(function () {\n      return dispatch(deleteConversationSuccess(conversationId));\n    }).catch(function (error) {\n      return dispatch(deleteConversationFail(conversationId, error));\n    });\n  };\n};\nexport var deleteConversationRequest = function deleteConversationRequest(id) {\n  return {\n    type: CONVERSATIONS_DELETE_REQUEST,\n    id\n  };\n};\nexport var deleteConversationSuccess = function deleteConversationSuccess(id) {\n  return {\n    type: CONVERSATIONS_DELETE_SUCCESS,\n    id\n  };\n};\nexport var deleteConversationFail = function deleteConversationFail(id, error) {\n  return {\n    type: CONVERSATIONS_DELETE_FAIL,\n    id,\n    error\n  };\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/conversations.js"],"names":["api","getLinks","importFetchedAccounts","importFetchedStatuses","importFetchedStatus","CONVERSATIONS_MOUNT","CONVERSATIONS_UNMOUNT","CONVERSATIONS_FETCH_REQUEST","CONVERSATIONS_FETCH_SUCCESS","CONVERSATIONS_FETCH_FAIL","CONVERSATIONS_UPDATE","CONVERSATIONS_READ","CONVERSATIONS_DELETE_REQUEST","CONVERSATIONS_DELETE_SUCCESS","CONVERSATIONS_DELETE_FAIL","mountConversations","type","unmountConversations","markConversationRead","conversationId","dispatch","getState","id","post","expandConversations","maxId","expandConversationsRequest","params","max_id","since_id","getIn","isLoadingRecent","get","then","response","next","refs","find","link","rel","data","reduce","aggr","item","concat","accounts","map","last_status","filter","x","expandConversationsSuccess","uri","catch","err","expandConversationsFail","conversations","error","updateConversations","conversation","deleteConversation","deleteConversationRequest","delete","deleteConversationSuccess","deleteConversationFail"],"mappings":"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","sourcesContent":["import api, { getLinks } from '../api';\nimport {\n  importFetchedAccounts,\n  importFetchedStatuses,\n  importFetchedStatus,\n} from './importer';\n\nexport const CONVERSATIONS_MOUNT   = 'CONVERSATIONS_MOUNT';\nexport const CONVERSATIONS_UNMOUNT = 'CONVERSATIONS_UNMOUNT';\n\nexport const CONVERSATIONS_FETCH_REQUEST = 'CONVERSATIONS_FETCH_REQUEST';\nexport const CONVERSATIONS_FETCH_SUCCESS = 'CONVERSATIONS_FETCH_SUCCESS';\nexport const CONVERSATIONS_FETCH_FAIL    = 'CONVERSATIONS_FETCH_FAIL';\nexport const CONVERSATIONS_UPDATE        = 'CONVERSATIONS_UPDATE';\n\nexport const CONVERSATIONS_READ = 'CONVERSATIONS_READ';\n\nexport const CONVERSATIONS_DELETE_REQUEST = 'CONVERSATIONS_DELETE_REQUEST';\nexport const CONVERSATIONS_DELETE_SUCCESS = 'CONVERSATIONS_DELETE_SUCCESS';\nexport const CONVERSATIONS_DELETE_FAIL    = 'CONVERSATIONS_DELETE_FAIL';\n\nexport const mountConversations = () => ({\n  type: CONVERSATIONS_MOUNT,\n});\n\nexport const unmountConversations = () => ({\n  type: CONVERSATIONS_UNMOUNT,\n});\n\nexport const markConversationRead = conversationId => (dispatch, getState) => {\n  dispatch({\n    type: CONVERSATIONS_READ,\n    id: conversationId,\n  });\n\n  api(getState).post(`/api/v1/conversations/${conversationId}/read`);\n};\n\nexport const expandConversations = ({ maxId } = {}) => (dispatch, getState) => {\n  dispatch(expandConversationsRequest());\n\n  const params = { max_id: maxId };\n\n  if (!maxId) {\n    params.since_id = getState().getIn(['conversations', 'items', 0, 'last_status']);\n  }\n\n  const isLoadingRecent = !!params.since_id;\n\n  api(getState).get('/api/v1/conversations', { params })\n    .then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n\n      dispatch(importFetchedAccounts(response.data.reduce((aggr, item) => aggr.concat(item.accounts), [])));\n      dispatch(importFetchedStatuses(response.data.map(item => item.last_status).filter(x => !!x)));\n      dispatch(expandConversationsSuccess(response.data, next ? next.uri : null, isLoadingRecent));\n    })\n    .catch(err => dispatch(expandConversationsFail(err)));\n};\n\nexport const expandConversationsRequest = () => ({\n  type: CONVERSATIONS_FETCH_REQUEST,\n});\n\nexport const expandConversationsSuccess = (conversations, next, isLoadingRecent) => ({\n  type: CONVERSATIONS_FETCH_SUCCESS,\n  conversations,\n  next,\n  isLoadingRecent,\n});\n\nexport const expandConversationsFail = error => ({\n  type: CONVERSATIONS_FETCH_FAIL,\n  error,\n});\n\nexport const updateConversations = conversation => dispatch => {\n  dispatch(importFetchedAccounts(conversation.accounts));\n\n  if (conversation.last_status) {\n    dispatch(importFetchedStatus(conversation.last_status));\n  }\n\n  dispatch({\n    type: CONVERSATIONS_UPDATE,\n    conversation,\n  });\n};\n\nexport const deleteConversation = conversationId => (dispatch, getState) => {\n  dispatch(deleteConversationRequest(conversationId));\n\n  api(getState).delete(`/api/v1/conversations/${conversationId}`)\n    .then(() => dispatch(deleteConversationSuccess(conversationId)))\n    .catch(error => dispatch(deleteConversationFail(conversationId, error)));\n};\n\nexport const deleteConversationRequest = id => ({\n  type: CONVERSATIONS_DELETE_REQUEST,\n  id,\n});\n\nexport const deleteConversationSuccess = id => ({\n  type: CONVERSATIONS_DELETE_SUCCESS,\n  id,\n});\n\nexport const deleteConversationFail = (id, error) => ({\n  type: CONVERSATIONS_DELETE_FAIL,\n  id,\n  error,\n});\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}