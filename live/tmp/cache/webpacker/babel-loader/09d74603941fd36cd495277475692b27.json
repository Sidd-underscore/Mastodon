{"ast":null,"code":"import { connect } from 'react-redux';\nimport StatusList from '../../../components/status_list';\nimport { scrollTopTimeline, loadPending } from '../../../actions/timelines';\nimport { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport { createSelector } from 'reselect';\nimport { debounce } from 'lodash';\nimport { me } from '../../../initial_state';\n\nvar makeGetStatusIds = function makeGetStatusIds(pending) {\n  if (pending === void 0) {\n    pending = false;\n  }\n\n  return createSelector([function (state, _ref) {\n    var type = _ref.type;\n    return state.getIn(['settings', type], ImmutableMap());\n  }, function (state, _ref2) {\n    var type = _ref2.type;\n    return state.getIn(['timelines', type, pending ? 'pendingItems' : 'items'], ImmutableList());\n  }, function (state) {\n    return state.get('statuses');\n  }], function (columnSettings, statusIds, statuses) {\n    return statusIds.filter(function (id) {\n      if (id === null) return true;\n      var statusForId = statuses.get(id);\n      var showStatus = true;\n      if (statusForId.get('account') === me) return true;\n\n      if (columnSettings.getIn(['shows', 'reblog']) === false) {\n        showStatus = showStatus && statusForId.get('reblog') === null;\n      }\n\n      if (columnSettings.getIn(['shows', 'reply']) === false) {\n        showStatus = showStatus && (statusForId.get('in_reply_to_id') === null || statusForId.get('in_reply_to_account_id') === me);\n      }\n\n      return showStatus;\n    });\n  });\n};\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var getStatusIds = makeGetStatusIds();\n  var getPendingStatusIds = makeGetStatusIds(true);\n\n  var mapStateToProps = function mapStateToProps(state, _ref3) {\n    var timelineId = _ref3.timelineId;\n    return {\n      statusIds: getStatusIds(state, {\n        type: timelineId\n      }),\n      isLoading: state.getIn(['timelines', timelineId, 'isLoading'], true),\n      isPartial: state.getIn(['timelines', timelineId, 'isPartial'], false),\n      hasMore: state.getIn(['timelines', timelineId, 'hasMore']),\n      numPending: getPendingStatusIds(state, {\n        type: timelineId\n      }).size\n    };\n  };\n\n  return mapStateToProps;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref4) {\n  var timelineId = _ref4.timelineId;\n  return {\n    onScrollToTop: debounce(function () {\n      dispatch(scrollTopTimeline(timelineId, true));\n    }, 100),\n    onScroll: debounce(function () {\n      dispatch(scrollTopTimeline(timelineId, false));\n    }, 100),\n    onLoadPending: function onLoadPending() {\n      return dispatch(loadPending(timelineId));\n    }\n  };\n};\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(StatusList);","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/containers/status_list_container.js"],"names":["connect","StatusList","scrollTopTimeline","loadPending","Map","ImmutableMap","List","ImmutableList","createSelector","debounce","me","makeGetStatusIds","pending","state","type","getIn","get","columnSettings","statusIds","statuses","filter","id","statusForId","showStatus","makeMapStateToProps","getStatusIds","getPendingStatusIds","mapStateToProps","timelineId","isLoading","isPartial","hasMore","numPending","size","mapDispatchToProps","dispatch","onScrollToTop","onScroll","onLoadPending"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport StatusList from '../../../components/status_list';\nimport { scrollTopTimeline, loadPending } from '../../../actions/timelines';\nimport { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport { createSelector } from 'reselect';\nimport { debounce } from 'lodash';\nimport { me } from '../../../initial_state';\n\nconst makeGetStatusIds = (pending = false) => createSelector([\n  (state, { type }) => state.getIn(['settings', type], ImmutableMap()),\n  (state, { type }) => state.getIn(['timelines', type, pending ? 'pendingItems' : 'items'], ImmutableList()),\n  (state)           => state.get('statuses'),\n], (columnSettings, statusIds, statuses) => {\n  return statusIds.filter(id => {\n    if (id === null) return true;\n\n    const statusForId = statuses.get(id);\n    let showStatus    = true;\n\n    if (statusForId.get('account') === me) return true;\n\n    if (columnSettings.getIn(['shows', 'reblog']) === false) {\n      showStatus = showStatus && statusForId.get('reblog') === null;\n    }\n\n    if (columnSettings.getIn(['shows', 'reply']) === false) {\n      showStatus = showStatus && (statusForId.get('in_reply_to_id') === null || statusForId.get('in_reply_to_account_id') === me);\n    }\n\n    return showStatus;\n  });\n});\n\nconst makeMapStateToProps = () => {\n  const getStatusIds = makeGetStatusIds();\n  const getPendingStatusIds = makeGetStatusIds(true);\n\n  const mapStateToProps = (state, { timelineId }) => ({\n    statusIds: getStatusIds(state, { type: timelineId }),\n    isLoading: state.getIn(['timelines', timelineId, 'isLoading'], true),\n    isPartial: state.getIn(['timelines', timelineId, 'isPartial'], false),\n    hasMore:   state.getIn(['timelines', timelineId, 'hasMore']),\n    numPending: getPendingStatusIds(state, { type: timelineId }).size,\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { timelineId }) => ({\n\n  onScrollToTop: debounce(() => {\n    dispatch(scrollTopTimeline(timelineId, true));\n  }, 100),\n\n  onScroll: debounce(() => {\n    dispatch(scrollTopTimeline(timelineId, false));\n  }, 100),\n\n  onLoadPending: () => dispatch(loadPending(timelineId)),\n\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(StatusList);\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}