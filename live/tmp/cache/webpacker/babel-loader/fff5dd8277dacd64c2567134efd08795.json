{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { SUGGESTIONS_FETCH_REQUEST, SUGGESTIONS_FETCH_SUCCESS, SUGGESTIONS_FETCH_FAIL, SUGGESTIONS_DISMISS } from '../actions/suggestions';\nimport { ACCOUNT_BLOCK_SUCCESS, ACCOUNT_MUTE_SUCCESS } from 'mastodon/actions/accounts';\nimport { DOMAIN_BLOCK_SUCCESS } from 'mastodon/actions/domain_blocks';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\nvar initialState = ImmutableMap({\n  items: ImmutableList(),\n  isLoading: false\n});\nexport default function suggestionsReducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case SUGGESTIONS_FETCH_REQUEST:\n      return state.set('isLoading', true);\n\n    case SUGGESTIONS_FETCH_SUCCESS:\n      return state.withMutations(function (map) {\n        map.set('items', fromJS(action.suggestions.map(function (x) {\n          return _extends({}, x, {\n            account: x.account.id\n          });\n        })));\n        map.set('isLoading', false);\n      });\n\n    case SUGGESTIONS_FETCH_FAIL:\n      return state.set('isLoading', false);\n\n    case SUGGESTIONS_DISMISS:\n      return state.update('items', function (list) {\n        return list.filterNot(function (x) {\n          return x.account === action.id;\n        });\n      });\n\n    case ACCOUNT_BLOCK_SUCCESS:\n    case ACCOUNT_MUTE_SUCCESS:\n      return state.update('items', function (list) {\n        return list.filterNot(function (x) {\n          return x.account === action.relationship.id;\n        });\n      });\n\n    case DOMAIN_BLOCK_SUCCESS:\n      return state.update('items', function (list) {\n        return list.filterNot(function (x) {\n          return action.accounts.includes(x.account);\n        });\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/suggestions.js"],"names":["SUGGESTIONS_FETCH_REQUEST","SUGGESTIONS_FETCH_SUCCESS","SUGGESTIONS_FETCH_FAIL","SUGGESTIONS_DISMISS","ACCOUNT_BLOCK_SUCCESS","ACCOUNT_MUTE_SUCCESS","DOMAIN_BLOCK_SUCCESS","Map","ImmutableMap","List","ImmutableList","fromJS","initialState","items","isLoading","suggestionsReducer","state","action","type","set","withMutations","map","suggestions","x","account","id","update","list","filterNot","relationship","accounts","includes"],"mappings":";;AAAA,SACEA,yBADF,EAEEC,yBAFF,EAGEC,sBAHF,EAIEC,mBAJF,QAKO,wBALP;AAMA,SAASC,qBAAT,EAAgCC,oBAAhC,QAA4D,2BAA5D;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,GAAG,IAAIC,YAAhB,EAA8BC,IAAI,IAAIC,aAAtC,EAAqDC,MAArD,QAAmE,WAAnE;AAEA,IAAMC,YAAY,GAAGJ,YAAY,CAAC;AAChCK,EAAAA,KAAK,EAAEH,aAAa,EADY;AAEhCI,EAAAA,SAAS,EAAE;AAFqB,CAAD,CAAjC;AAKA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAkDC,MAAlD,EAA0D;AAAA,MAA9BD,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBJ,YAAsB;AAAA;;AACvE,UAAOK,MAAM,CAACC,IAAd;AACA,SAAKlB,yBAAL;AACE,aAAOgB,KAAK,CAACG,GAAN,CAAU,WAAV,EAAuB,IAAvB,CAAP;;AACF,SAAKlB,yBAAL;AACE,aAAOe,KAAK,CAACI,aAAN,CAAoB,UAAAC,GAAG,EAAI;AAChCA,QAAAA,GAAG,CAACF,GAAJ,CAAQ,OAAR,EAAiBR,MAAM,CAACM,MAAM,CAACK,WAAP,CAAmBD,GAAnB,CAAuB,UAAAE,CAAC;AAAA,8BAAUA,CAAV;AAAaC,YAAAA,OAAO,EAAED,CAAC,CAACC,OAAF,CAAUC;AAAhC;AAAA,SAAxB,CAAD,CAAvB;AACAJ,QAAAA,GAAG,CAACF,GAAJ,CAAQ,WAAR,EAAqB,KAArB;AACD,OAHM,CAAP;;AAIF,SAAKjB,sBAAL;AACE,aAAOc,KAAK,CAACG,GAAN,CAAU,WAAV,EAAuB,KAAvB,CAAP;;AACF,SAAKhB,mBAAL;AACE,aAAOa,KAAK,CAACU,MAAN,CAAa,OAAb,EAAsB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,SAAL,CAAe,UAAAL,CAAC;AAAA,iBAAIA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACQ,EAAzB;AAAA,SAAhB,CAAJ;AAAA,OAA1B,CAAP;;AACF,SAAKrB,qBAAL;AACA,SAAKC,oBAAL;AACE,aAAOW,KAAK,CAACU,MAAN,CAAa,OAAb,EAAsB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,SAAL,CAAe,UAAAL,CAAC;AAAA,iBAAIA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACY,YAAP,CAAoBJ,EAAtC;AAAA,SAAhB,CAAJ;AAAA,OAA1B,CAAP;;AACF,SAAKnB,oBAAL;AACE,aAAOU,KAAK,CAACU,MAAN,CAAa,OAAb,EAAsB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,SAAL,CAAe,UAAAL,CAAC;AAAA,iBAAIN,MAAM,CAACa,QAAP,CAAgBC,QAAhB,CAAyBR,CAAC,CAACC,OAA3B,CAAJ;AAAA,SAAhB,CAAJ;AAAA,OAA1B,CAAP;;AACF;AACE,aAAOR,KAAP;AAlBF;AAoBD;AAAA","sourcesContent":["import {\n  SUGGESTIONS_FETCH_REQUEST,\n  SUGGESTIONS_FETCH_SUCCESS,\n  SUGGESTIONS_FETCH_FAIL,\n  SUGGESTIONS_DISMISS,\n} from '../actions/suggestions';\nimport { ACCOUNT_BLOCK_SUCCESS, ACCOUNT_MUTE_SUCCESS } from 'mastodon/actions/accounts';\nimport { DOMAIN_BLOCK_SUCCESS } from 'mastodon/actions/domain_blocks';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\n\nconst initialState = ImmutableMap({\n  items: ImmutableList(),\n  isLoading: false,\n});\n\nexport default function suggestionsReducer(state = initialState, action) {\n  switch(action.type) {\n  case SUGGESTIONS_FETCH_REQUEST:\n    return state.set('isLoading', true);\n  case SUGGESTIONS_FETCH_SUCCESS:\n    return state.withMutations(map => {\n      map.set('items', fromJS(action.suggestions.map(x => ({ ...x, account: x.account.id }))));\n      map.set('isLoading', false);\n    });\n  case SUGGESTIONS_FETCH_FAIL:\n    return state.set('isLoading', false);\n  case SUGGESTIONS_DISMISS:\n    return state.update('items', list => list.filterNot(x => x.account === action.id));\n  case ACCOUNT_BLOCK_SUCCESS:\n  case ACCOUNT_MUTE_SUCCESS:\n    return state.update('items', list => list.filterNot(x => x.account === action.relationship.id));\n  case DOMAIN_BLOCK_SUCCESS:\n    return state.update('items', list => list.filterNot(x => action.accounts.includes(x.account)));\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}