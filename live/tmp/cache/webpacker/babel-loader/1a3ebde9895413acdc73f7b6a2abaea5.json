{"ast":null,"code":"// Convenience function to load polyfills and return a promise when it's done.\n// If there are no polyfills, then this is just Promise.resolve() which means\n// it will execute in the same tick of the event loop (i.e. near-instant).\nfunction importBasePolyfills() {\n  return import(\n  /* webpackChunkName: \"base_polyfills\" */\n  './base_polyfills');\n}\n\nfunction importExtraPolyfills() {\n  return import(\n  /* webpackChunkName: \"extra_polyfills\" */\n  './extra_polyfills');\n}\n\nfunction loadPolyfills() {\n  var needsBasePolyfills = !(Array.prototype.includes && HTMLCanvasElement.prototype.toBlob && window.Intl && Number.isNaN && Object.assign && Object.values && window.Symbol && Promise.prototype.finally); // Latest version of Firefox and Safari do not have IntersectionObserver.\n  // Edge does not have requestIdleCallback and object-fit CSS property.\n  // This avoids shipping them all the polyfills.\n\n  var needsExtraPolyfills = !(window.IntersectionObserver && window.IntersectionObserverEntry && 'isIntersecting' in IntersectionObserverEntry.prototype && window.requestIdleCallback && 'object-fit' in new Image().style);\n  return Promise.all([needsBasePolyfills && importBasePolyfills(), needsExtraPolyfills && importExtraPolyfills()]);\n}\n\nexport default loadPolyfills;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/load_polyfills.js"],"names":["importBasePolyfills","importExtraPolyfills","loadPolyfills","needsBasePolyfills","Array","prototype","includes","HTMLCanvasElement","toBlob","window","Intl","Number","isNaN","Object","assign","values","Symbol","Promise","finally","needsExtraPolyfills","IntersectionObserver","IntersectionObserverEntry","requestIdleCallback","Image","style","all"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,mBAAT,GAA+B;AAC7B,SAAO;AAAO;AAAyC,oBAAhD,CAAP;AACD;;AAED,SAASC,oBAAT,GAAgC;AAC9B,SAAO;AAAO;AAA0C,qBAAjD,CAAP;AACD;;AAED,SAASC,aAAT,GAAyB;AACvB,MAAMC,kBAAkB,GAAG,EACzBC,KAAK,CAACC,SAAN,CAAgBC,QAAhB,IACAC,iBAAiB,CAACF,SAAlB,CAA4BG,MAD5B,IAEAC,MAAM,CAACC,IAFP,IAGAC,MAAM,CAACC,KAHP,IAIAC,MAAM,CAACC,MAJP,IAKAD,MAAM,CAACE,MALP,IAMAN,MAAM,CAACO,MANP,IAOAC,OAAO,CAACZ,SAAR,CAAkBa,OARO,CAA3B,CADuB,CAYvB;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,EAC1BV,MAAM,CAACW,oBAAP,IACAX,MAAM,CAACY,yBADP,IAEA,oBAAoBA,yBAAyB,CAAChB,SAF9C,IAGAI,MAAM,CAACa,mBAHP,IAIA,gBAAiB,IAAIC,KAAJ,EAAD,CAAcC,KALJ,CAA5B;AAQA,SAAOP,OAAO,CAACQ,GAAR,CAAY,CACjBtB,kBAAkB,IAAIH,mBAAmB,EADxB,EAEjBmB,mBAAmB,IAAIlB,oBAAoB,EAF1B,CAAZ,CAAP;AAID;;AAED,eAAeC,aAAf","sourcesContent":["// Convenience function to load polyfills and return a promise when it's done.\n// If there are no polyfills, then this is just Promise.resolve() which means\n// it will execute in the same tick of the event loop (i.e. near-instant).\n\nfunction importBasePolyfills() {\n  return import(/* webpackChunkName: \"base_polyfills\" */ './base_polyfills');\n}\n\nfunction importExtraPolyfills() {\n  return import(/* webpackChunkName: \"extra_polyfills\" */ './extra_polyfills');\n}\n\nfunction loadPolyfills() {\n  const needsBasePolyfills = !(\n    Array.prototype.includes &&\n    HTMLCanvasElement.prototype.toBlob &&\n    window.Intl &&\n    Number.isNaN &&\n    Object.assign &&\n    Object.values &&\n    window.Symbol &&\n    Promise.prototype.finally\n  );\n\n  // Latest version of Firefox and Safari do not have IntersectionObserver.\n  // Edge does not have requestIdleCallback and object-fit CSS property.\n  // This avoids shipping them all the polyfills.\n  const needsExtraPolyfills = !(\n    window.IntersectionObserver &&\n    window.IntersectionObserverEntry &&\n    'isIntersecting' in IntersectionObserverEntry.prototype &&\n    window.requestIdleCallback &&\n    'object-fit' in (new Image()).style\n  );\n\n  return Promise.all([\n    needsBasePolyfills && importBasePolyfills(),\n    needsExtraPolyfills && importExtraPolyfills(),\n  ]);\n}\n\nexport default loadPolyfills;\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}