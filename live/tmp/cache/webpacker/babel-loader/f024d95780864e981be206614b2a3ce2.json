{"ast":null,"code":"import { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport { LIST_CREATE_REQUEST, LIST_CREATE_FAIL, LIST_CREATE_SUCCESS, LIST_UPDATE_REQUEST, LIST_UPDATE_FAIL, LIST_UPDATE_SUCCESS, LIST_EDITOR_RESET, LIST_EDITOR_SETUP, LIST_EDITOR_TITLE_CHANGE, LIST_ACCOUNTS_FETCH_REQUEST, LIST_ACCOUNTS_FETCH_SUCCESS, LIST_ACCOUNTS_FETCH_FAIL, LIST_EDITOR_SUGGESTIONS_READY, LIST_EDITOR_SUGGESTIONS_CLEAR, LIST_EDITOR_SUGGESTIONS_CHANGE, LIST_EDITOR_ADD_SUCCESS, LIST_EDITOR_REMOVE_SUCCESS } from '../actions/lists';\nvar initialState = ImmutableMap({\n  listId: null,\n  isSubmitting: false,\n  isChanged: false,\n  title: '',\n  accounts: ImmutableMap({\n    items: ImmutableList(),\n    loaded: false,\n    isLoading: false\n  }),\n  suggestions: ImmutableMap({\n    value: '',\n    items: ImmutableList()\n  })\n});\nexport default function listEditorReducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case LIST_EDITOR_RESET:\n      return initialState;\n\n    case LIST_EDITOR_SETUP:\n      return state.withMutations(function (map) {\n        map.set('listId', action.list.get('id'));\n        map.set('title', action.list.get('title'));\n        map.set('isSubmitting', false);\n      });\n\n    case LIST_EDITOR_TITLE_CHANGE:\n      return state.withMutations(function (map) {\n        map.set('title', action.value);\n        map.set('isChanged', true);\n      });\n\n    case LIST_CREATE_REQUEST:\n    case LIST_UPDATE_REQUEST:\n      return state.withMutations(function (map) {\n        map.set('isSubmitting', true);\n        map.set('isChanged', false);\n      });\n\n    case LIST_CREATE_FAIL:\n    case LIST_UPDATE_FAIL:\n      return state.set('isSubmitting', false);\n\n    case LIST_CREATE_SUCCESS:\n    case LIST_UPDATE_SUCCESS:\n      return state.withMutations(function (map) {\n        map.set('isSubmitting', false);\n        map.set('listId', action.list.id);\n      });\n\n    case LIST_ACCOUNTS_FETCH_REQUEST:\n      return state.setIn(['accounts', 'isLoading'], true);\n\n    case LIST_ACCOUNTS_FETCH_FAIL:\n      return state.setIn(['accounts', 'isLoading'], false);\n\n    case LIST_ACCOUNTS_FETCH_SUCCESS:\n      return state.update('accounts', function (accounts) {\n        return accounts.withMutations(function (map) {\n          map.set('isLoading', false);\n          map.set('loaded', true);\n          map.set('items', ImmutableList(action.accounts.map(function (item) {\n            return item.id;\n          })));\n        });\n      });\n\n    case LIST_EDITOR_SUGGESTIONS_CHANGE:\n      return state.setIn(['suggestions', 'value'], action.value);\n\n    case LIST_EDITOR_SUGGESTIONS_READY:\n      return state.setIn(['suggestions', 'items'], ImmutableList(action.accounts.map(function (item) {\n        return item.id;\n      })));\n\n    case LIST_EDITOR_SUGGESTIONS_CLEAR:\n      return state.update('suggestions', function (suggestions) {\n        return suggestions.withMutations(function (map) {\n          map.set('items', ImmutableList());\n          map.set('value', '');\n        });\n      });\n\n    case LIST_EDITOR_ADD_SUCCESS:\n      return state.updateIn(['accounts', 'items'], function (list) {\n        return list.unshift(action.accountId);\n      });\n\n    case LIST_EDITOR_REMOVE_SUCCESS:\n      return state.updateIn(['accounts', 'items'], function (list) {\n        return list.filterNot(function (item) {\n          return item === action.accountId;\n        });\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/list_editor.js"],"names":["Map","ImmutableMap","List","ImmutableList","LIST_CREATE_REQUEST","LIST_CREATE_FAIL","LIST_CREATE_SUCCESS","LIST_UPDATE_REQUEST","LIST_UPDATE_FAIL","LIST_UPDATE_SUCCESS","LIST_EDITOR_RESET","LIST_EDITOR_SETUP","LIST_EDITOR_TITLE_CHANGE","LIST_ACCOUNTS_FETCH_REQUEST","LIST_ACCOUNTS_FETCH_SUCCESS","LIST_ACCOUNTS_FETCH_FAIL","LIST_EDITOR_SUGGESTIONS_READY","LIST_EDITOR_SUGGESTIONS_CLEAR","LIST_EDITOR_SUGGESTIONS_CHANGE","LIST_EDITOR_ADD_SUCCESS","LIST_EDITOR_REMOVE_SUCCESS","initialState","listId","isSubmitting","isChanged","title","accounts","items","loaded","isLoading","suggestions","value","listEditorReducer","state","action","type","withMutations","map","set","list","get","id","setIn","update","item","updateIn","unshift","accountId","filterNot"],"mappings":"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","sourcesContent":["import { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport {\n  LIST_CREATE_REQUEST,\n  LIST_CREATE_FAIL,\n  LIST_CREATE_SUCCESS,\n  LIST_UPDATE_REQUEST,\n  LIST_UPDATE_FAIL,\n  LIST_UPDATE_SUCCESS,\n  LIST_EDITOR_RESET,\n  LIST_EDITOR_SETUP,\n  LIST_EDITOR_TITLE_CHANGE,\n  LIST_ACCOUNTS_FETCH_REQUEST,\n  LIST_ACCOUNTS_FETCH_SUCCESS,\n  LIST_ACCOUNTS_FETCH_FAIL,\n  LIST_EDITOR_SUGGESTIONS_READY,\n  LIST_EDITOR_SUGGESTIONS_CLEAR,\n  LIST_EDITOR_SUGGESTIONS_CHANGE,\n  LIST_EDITOR_ADD_SUCCESS,\n  LIST_EDITOR_REMOVE_SUCCESS,\n} from '../actions/lists';\n\nconst initialState = ImmutableMap({\n  listId: null,\n  isSubmitting: false,\n  isChanged: false,\n  title: '',\n\n  accounts: ImmutableMap({\n    items: ImmutableList(),\n    loaded: false,\n    isLoading: false,\n  }),\n\n  suggestions: ImmutableMap({\n    value: '',\n    items: ImmutableList(),\n  }),\n});\n\nexport default function listEditorReducer(state = initialState, action) {\n  switch(action.type) {\n  case LIST_EDITOR_RESET:\n    return initialState;\n  case LIST_EDITOR_SETUP:\n    return state.withMutations(map => {\n      map.set('listId', action.list.get('id'));\n      map.set('title', action.list.get('title'));\n      map.set('isSubmitting', false);\n    });\n  case LIST_EDITOR_TITLE_CHANGE:\n    return state.withMutations(map => {\n      map.set('title', action.value);\n      map.set('isChanged', true);\n    });\n  case LIST_CREATE_REQUEST:\n  case LIST_UPDATE_REQUEST:\n    return state.withMutations(map => {\n      map.set('isSubmitting', true);\n      map.set('isChanged', false);\n    });\n  case LIST_CREATE_FAIL:\n  case LIST_UPDATE_FAIL:\n    return state.set('isSubmitting', false);\n  case LIST_CREATE_SUCCESS:\n  case LIST_UPDATE_SUCCESS:\n    return state.withMutations(map => {\n      map.set('isSubmitting', false);\n      map.set('listId', action.list.id);\n    });\n  case LIST_ACCOUNTS_FETCH_REQUEST:\n    return state.setIn(['accounts', 'isLoading'], true);\n  case LIST_ACCOUNTS_FETCH_FAIL:\n    return state.setIn(['accounts', 'isLoading'], false);\n  case LIST_ACCOUNTS_FETCH_SUCCESS:\n    return state.update('accounts', accounts => accounts.withMutations(map => {\n      map.set('isLoading', false);\n      map.set('loaded', true);\n      map.set('items', ImmutableList(action.accounts.map(item => item.id)));\n    }));\n  case LIST_EDITOR_SUGGESTIONS_CHANGE:\n    return state.setIn(['suggestions', 'value'], action.value);\n  case LIST_EDITOR_SUGGESTIONS_READY:\n    return state.setIn(['suggestions', 'items'], ImmutableList(action.accounts.map(item => item.id)));\n  case LIST_EDITOR_SUGGESTIONS_CLEAR:\n    return state.update('suggestions', suggestions => suggestions.withMutations(map => {\n      map.set('items', ImmutableList());\n      map.set('value', '');\n    }));\n  case LIST_EDITOR_ADD_SUCCESS:\n    return state.updateIn(['accounts', 'items'], list => list.unshift(action.accountId));\n  case LIST_EDITOR_REMOVE_SUCCESS:\n    return state.updateIn(['accounts', 'items'], list => list.filterNot(item => item === action.accountId));\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}