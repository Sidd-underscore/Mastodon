{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/status/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport Immutable from 'immutable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { createSelector } from 'reselect';\nimport { fetchStatus } from '../../actions/statuses';\nimport MissingIndicator from '../../components/missing_indicator';\nimport DetailedStatus from './components/detailed_status';\nimport ActionBar from './components/action_bar';\nimport Column from '../ui/components/column';\nimport { favourite, unfavourite, bookmark, unbookmark, reblog, unreblog, pin, unpin } from '../../actions/interactions';\nimport { replyCompose, mentionCompose, directCompose } from '../../actions/compose';\nimport { muteStatus, unmuteStatus, deleteStatus, hideStatus, revealStatus } from '../../actions/statuses';\nimport { unblockAccount, unmuteAccount } from '../../actions/accounts';\nimport { blockDomain, unblockDomain } from '../../actions/domain_blocks';\nimport { initMuteModal } from '../../actions/mutes';\nimport { initBlockModal } from '../../actions/blocks';\nimport { initBoostModal } from '../../actions/boosts';\nimport { initReport } from '../../actions/reports';\nimport { makeGetStatus, makeGetPictureInPicture } from '../../selectors';\nimport ScrollContainer from 'mastodon/containers/scroll_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport StatusContainer from '../../containers/status_container';\nimport { openModal } from '../../actions/modal';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport { boostModal, deleteModal } from '../../initial_state';\nimport { attachFullscreenListener, detachFullscreenListener, isFullscreen } from '../ui/util/fullscreen';\nimport { textForScreenReader, defaultMediaVisibility } from '../../components/status';\nimport Icon from 'mastodon/components/icon';\nvar messages = defineMessages({\n  deleteConfirm: {\n    \"id\": \"confirmations.delete.confirm\",\n    \"defaultMessage\": \"Delete\"\n  },\n  deleteMessage: {\n    \"id\": \"confirmations.delete.message\",\n    \"defaultMessage\": \"Are you sure you want to delete this status?\"\n  },\n  redraftConfirm: {\n    \"id\": \"confirmations.redraft.confirm\",\n    \"defaultMessage\": \"Delete & redraft\"\n  },\n  redraftMessage: {\n    \"id\": \"confirmations.redraft.message\",\n    \"defaultMessage\": \"Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.\"\n  },\n  revealAll: {\n    \"id\": \"status.show_more_all\",\n    \"defaultMessage\": \"Show more for all\"\n  },\n  hideAll: {\n    \"id\": \"status.show_less_all\",\n    \"defaultMessage\": \"Show less for all\"\n  },\n  detailedStatus: {\n    \"id\": \"status.detailed_status\",\n    \"defaultMessage\": \"Detailed conversation view\"\n  },\n  replyConfirm: {\n    \"id\": \"confirmations.reply.confirm\",\n    \"defaultMessage\": \"Reply\"\n  },\n  replyMessage: {\n    \"id\": \"confirmations.reply.message\",\n    \"defaultMessage\": \"Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?\"\n  },\n  blockDomainConfirm: {\n    \"id\": \"confirmations.domain_block.confirm\",\n    \"defaultMessage\": \"Hide entire domain\"\n  }\n});\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var getStatus = makeGetStatus();\n  var getPictureInPicture = makeGetPictureInPicture();\n  var getAncestorsIds = createSelector([function (_, _ref) {\n    var id = _ref.id;\n    return id;\n  }, function (state) {\n    return state.getIn(['contexts', 'inReplyTos']);\n  }], function (statusId, inReplyTos) {\n    var ancestorsIds = Immutable.List();\n    ancestorsIds = ancestorsIds.withMutations(function (mutable) {\n      var id = statusId;\n\n      while (id && !mutable.includes(id)) {\n        mutable.unshift(id);\n        id = inReplyTos.get(id);\n      }\n    });\n    return ancestorsIds;\n  });\n  var getDescendantsIds = createSelector([function (_, _ref2) {\n    var id = _ref2.id;\n    return id;\n  }, function (state) {\n    return state.getIn(['contexts', 'replies']);\n  }, function (state) {\n    return state.get('statuses');\n  }], function (statusId, contextReplies, statuses) {\n    var descendantsIds = [];\n    var ids = [statusId];\n\n    while (ids.length > 0) {\n      var id = ids.pop();\n      var replies = contextReplies.get(id);\n\n      if (statusId !== id) {\n        descendantsIds.push(id);\n      }\n\n      if (replies) {\n        replies.reverse().forEach(function (reply) {\n          if (!ids.includes(reply) && !descendantsIds.includes(reply) && statusId !== reply) ids.push(reply);\n        });\n      }\n    }\n\n    var insertAt = descendantsIds.findIndex(function (id) {\n      return statuses.get(id).get('in_reply_to_account_id') !== statuses.get(id).get('account');\n    });\n\n    if (insertAt !== -1) {\n      descendantsIds.forEach(function (id, idx) {\n        if (idx > insertAt && statuses.get(id).get('in_reply_to_account_id') === statuses.get(id).get('account')) {\n          descendantsIds.splice(idx, 1);\n          descendantsIds.splice(insertAt, 0, id);\n          insertAt += 1;\n        }\n      });\n    }\n\n    return Immutable.List(descendantsIds);\n  });\n\n  var mapStateToProps = function mapStateToProps(state, props) {\n    var status = getStatus(state, {\n      id: props.params.statusId\n    });\n    var ancestorsIds = Immutable.List();\n    var descendantsIds = Immutable.List();\n\n    if (status) {\n      ancestorsIds = getAncestorsIds(state, {\n        id: status.get('in_reply_to_id')\n      });\n      descendantsIds = getDescendantsIds(state, {\n        id: status.get('id')\n      });\n    }\n\n    return {\n      status,\n      ancestorsIds,\n      descendantsIds,\n      askReplyConfirmation: state.getIn(['compose', 'text']).trim().length !== 0,\n      domain: state.getIn(['meta', 'domain']),\n      pictureInPicture: getPictureInPicture(state, {\n        id: props.params.statusId\n      })\n    };\n  };\n\n  return mapStateToProps;\n};\n\nvar Status = (_dec = connect(makeMapStateToProps), injectIntl(_class = _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(Status, _ImmutablePureCompone);\n\n  function Status() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n    _this.state = {\n      fullscreen: false,\n      showMedia: defaultMediaVisibility(_this.props.status),\n      loadedStatusId: undefined\n    };\n\n    _this.handleToggleMediaVisibility = function () {\n      _this.setState({\n        showMedia: !_this.state.showMedia\n      });\n    };\n\n    _this.handleFavouriteClick = function (status) {\n      if (status.get('favourited')) {\n        _this.props.dispatch(unfavourite(status));\n      } else {\n        _this.props.dispatch(favourite(status));\n      }\n    };\n\n    _this.handlePin = function (status) {\n      if (status.get('pinned')) {\n        _this.props.dispatch(unpin(status));\n      } else {\n        _this.props.dispatch(pin(status));\n      }\n    };\n\n    _this.handleReplyClick = function (status) {\n      var _this$props = _this.props,\n          askReplyConfirmation = _this$props.askReplyConfirmation,\n          dispatch = _this$props.dispatch,\n          intl = _this$props.intl;\n\n      if (askReplyConfirmation) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: function onConfirm() {\n            return dispatch(replyCompose(status, _this.context.router.history));\n          }\n        }));\n      } else {\n        dispatch(replyCompose(status, _this.context.router.history));\n      }\n    };\n\n    _this.handleModalReblog = function (status, privacy) {\n      _this.props.dispatch(reblog(status, privacy));\n    };\n\n    _this.handleReblogClick = function (status, e) {\n      if (status.get('reblogged')) {\n        _this.props.dispatch(unreblog(status));\n      } else {\n        if (e && e.shiftKey || !boostModal) {\n          _this.handleModalReblog(status);\n        } else {\n          _this.props.dispatch(initBoostModal({\n            status,\n            onReblog: _this.handleModalReblog\n          }));\n        }\n      }\n    };\n\n    _this.handleBookmarkClick = function (status) {\n      if (status.get('bookmarked')) {\n        _this.props.dispatch(unbookmark(status));\n      } else {\n        _this.props.dispatch(bookmark(status));\n      }\n    };\n\n    _this.handleDeleteClick = function (status, history, withRedraft) {\n      if (withRedraft === void 0) {\n        withRedraft = false;\n      }\n\n      var _this$props2 = _this.props,\n          dispatch = _this$props2.dispatch,\n          intl = _this$props2.intl;\n\n      if (!deleteModal) {\n        dispatch(deleteStatus(status.get('id'), history, withRedraft));\n      } else {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n          confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n          onConfirm: function onConfirm() {\n            return dispatch(deleteStatus(status.get('id'), history, withRedraft));\n          }\n        }));\n      }\n    };\n\n    _this.handleDirectClick = function (account, router) {\n      _this.props.dispatch(directCompose(account, router));\n    };\n\n    _this.handleMentionClick = function (account, router) {\n      _this.props.dispatch(mentionCompose(account, router));\n    };\n\n    _this.handleOpenMedia = function (media, index) {\n      _this.props.dispatch(openModal('MEDIA', {\n        statusId: _this.props.status.get('id'),\n        media,\n        index\n      }));\n    };\n\n    _this.handleOpenVideo = function (media, options) {\n      _this.props.dispatch(openModal('VIDEO', {\n        statusId: _this.props.status.get('id'),\n        media,\n        options\n      }));\n    };\n\n    _this.handleHotkeyOpenMedia = function (e) {\n      var status = _this.props.status;\n      e.preventDefault();\n\n      if (status.get('media_attachments').size > 0) {\n        if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n          _this.handleOpenVideo(status.getIn(['media_attachments', 0]), {\n            startTime: 0\n          });\n        } else {\n          _this.handleOpenMedia(status.get('media_attachments'), 0);\n        }\n      }\n    };\n\n    _this.handleMuteClick = function (account) {\n      _this.props.dispatch(initMuteModal(account));\n    };\n\n    _this.handleConversationMuteClick = function (status) {\n      if (status.get('muted')) {\n        _this.props.dispatch(unmuteStatus(status.get('id')));\n      } else {\n        _this.props.dispatch(muteStatus(status.get('id')));\n      }\n    };\n\n    _this.handleToggleHidden = function (status) {\n      if (status.get('hidden')) {\n        _this.props.dispatch(revealStatus(status.get('id')));\n      } else {\n        _this.props.dispatch(hideStatus(status.get('id')));\n      }\n    };\n\n    _this.handleToggleAll = function () {\n      var _this$props3 = _this.props,\n          status = _this$props3.status,\n          ancestorsIds = _this$props3.ancestorsIds,\n          descendantsIds = _this$props3.descendantsIds;\n      var statusIds = [status.get('id')].concat(ancestorsIds.toJS(), descendantsIds.toJS());\n\n      if (status.get('hidden')) {\n        _this.props.dispatch(revealStatus(statusIds));\n      } else {\n        _this.props.dispatch(hideStatus(statusIds));\n      }\n    };\n\n    _this.handleBlockClick = function (status) {\n      var dispatch = _this.props.dispatch;\n      var account = status.get('account');\n      dispatch(initBlockModal(account));\n    };\n\n    _this.handleReport = function (status) {\n      _this.props.dispatch(initReport(status.get('account'), status));\n    };\n\n    _this.handleEmbed = function (status) {\n      _this.props.dispatch(openModal('EMBED', {\n        url: status.get('url')\n      }));\n    };\n\n    _this.handleUnmuteClick = function (account) {\n      _this.props.dispatch(unmuteAccount(account.get('id')));\n    };\n\n    _this.handleUnblockClick = function (account) {\n      _this.props.dispatch(unblockAccount(account.get('id')));\n    };\n\n    _this.handleBlockDomainClick = function (domain) {\n      _this.props.dispatch(openModal('CONFIRM', {\n        message: /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"confirmations.domain_block.message\",\n          defaultMessage: \"Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.\",\n          values: {\n            domain: /*#__PURE__*/React.createElement(\"strong\", {\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 390\n              }\n            }, domain)\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 16\n          }\n        }),\n        confirm: _this.props.intl.formatMessage(messages.blockDomainConfirm),\n        onConfirm: function onConfirm() {\n          return _this.props.dispatch(blockDomain(domain));\n        }\n      }));\n    };\n\n    _this.handleUnblockDomainClick = function (domain) {\n      _this.props.dispatch(unblockDomain(domain));\n    };\n\n    _this.handleHotkeyMoveUp = function () {\n      _this.handleMoveUp(_this.props.status.get('id'));\n    };\n\n    _this.handleHotkeyMoveDown = function () {\n      _this.handleMoveDown(_this.props.status.get('id'));\n    };\n\n    _this.handleHotkeyReply = function (e) {\n      e.preventDefault();\n\n      _this.handleReplyClick(_this.props.status);\n    };\n\n    _this.handleHotkeyFavourite = function () {\n      _this.handleFavouriteClick(_this.props.status);\n    };\n\n    _this.handleHotkeyBoost = function () {\n      _this.handleReblogClick(_this.props.status);\n    };\n\n    _this.handleHotkeyMention = function (e) {\n      e.preventDefault();\n\n      _this.handleMentionClick(_this.props.status.get('account'));\n    };\n\n    _this.handleHotkeyOpenProfile = function () {\n      _this.context.router.history.push(\"/accounts/\" + _this.props.status.getIn(['account', 'id']));\n    };\n\n    _this.handleHotkeyToggleHidden = function () {\n      _this.handleToggleHidden(_this.props.status);\n    };\n\n    _this.handleHotkeyToggleSensitive = function () {\n      _this.handleToggleMediaVisibility();\n    };\n\n    _this.handleMoveUp = function (id) {\n      var _this$props4 = _this.props,\n          status = _this$props4.status,\n          ancestorsIds = _this$props4.ancestorsIds,\n          descendantsIds = _this$props4.descendantsIds;\n\n      if (id === status.get('id')) {\n        _this._selectChild(ancestorsIds.size - 1, true);\n      } else {\n        var index = ancestorsIds.indexOf(id);\n\n        if (index === -1) {\n          index = descendantsIds.indexOf(id);\n\n          _this._selectChild(ancestorsIds.size + index, true);\n        } else {\n          _this._selectChild(index - 1, true);\n        }\n      }\n    };\n\n    _this.handleMoveDown = function (id) {\n      var _this$props5 = _this.props,\n          status = _this$props5.status,\n          ancestorsIds = _this$props5.ancestorsIds,\n          descendantsIds = _this$props5.descendantsIds;\n\n      if (id === status.get('id')) {\n        _this._selectChild(ancestorsIds.size + 1, false);\n      } else {\n        var index = ancestorsIds.indexOf(id);\n\n        if (index === -1) {\n          index = descendantsIds.indexOf(id);\n\n          _this._selectChild(ancestorsIds.size + index + 2, false);\n        } else {\n          _this._selectChild(index + 1, false);\n        }\n      }\n    };\n\n    _this.setRef = function (c) {\n      _this.node = c;\n    };\n\n    _this.onFullScreenChange = function () {\n      _this.setState({\n        fullscreen: isFullscreen()\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = Status.prototype;\n\n  _proto.componentWillMount = function componentWillMount() {\n    this.props.dispatch(fetchStatus(this.props.params.statusId));\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    attachFullscreenListener(this.onFullScreenChange);\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this._scrolledIntoView = false;\n      this.props.dispatch(fetchStatus(nextProps.params.statusId));\n    }\n\n    if (nextProps.status && nextProps.status.get('id') !== this.state.loadedStatusId) {\n      this.setState({\n        showMedia: defaultMediaVisibility(nextProps.status),\n        loadedStatusId: nextProps.status.get('id')\n      });\n    }\n  };\n\n  _proto._selectChild = function _selectChild(index, align_top) {\n    var container = this.node;\n    var element = container.querySelectorAll('.focusable')[index];\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n\n      element.focus();\n    }\n  };\n\n  _proto.renderChildren = function renderChildren(list) {\n    var _this2 = this;\n\n    return list.map(function (id) {\n      return /*#__PURE__*/React.createElement(StatusContainer, {\n        key: id,\n        id: id,\n        onMoveUp: _this2.handleMoveUp,\n        onMoveDown: _this2.handleMoveDown,\n        contextType: \"thread\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 7\n        }\n      });\n    });\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    if (this._scrolledIntoView) {\n      return;\n    }\n\n    var _this$props6 = this.props,\n        status = _this$props6.status,\n        ancestorsIds = _this$props6.ancestorsIds;\n\n    if (status && ancestorsIds && ancestorsIds.size > 0) {\n      var element = this.node.querySelectorAll('.focusable')[ancestorsIds.size - 1];\n      window.requestAnimationFrame(function () {\n        element.scrollIntoView(true);\n      });\n      this._scrolledIntoView = true;\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    detachFullscreenListener(this.onFullScreenChange);\n  };\n\n  _proto.render = function render() {\n    var ancestors, descendants;\n    var _this$props7 = this.props,\n        status = _this$props7.status,\n        ancestorsIds = _this$props7.ancestorsIds,\n        descendantsIds = _this$props7.descendantsIds,\n        intl = _this$props7.intl,\n        domain = _this$props7.domain,\n        multiColumn = _this$props7.multiColumn,\n        pictureInPicture = _this$props7.pictureInPicture;\n    var fullscreen = this.state.fullscreen;\n\n    if (status === null) {\n      return /*#__PURE__*/React.createElement(Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ColumnBackButton, {\n        multiColumn: multiColumn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(MissingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    if (ancestorsIds && ancestorsIds.size > 0) {\n      ancestors = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 19\n        }\n      }, this.renderChildren(ancestorsIds));\n    }\n\n    if (descendantsIds && descendantsIds.size > 0) {\n      descendants = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 21\n        }\n      }, this.renderChildren(descendantsIds));\n    }\n\n    var handlers = {\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      reply: this.handleHotkeyReply,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleHotkeyMention,\n      openProfile: this.handleHotkeyOpenProfile,\n      toggleHidden: this.handleHotkeyToggleHidden,\n      toggleSensitive: this.handleHotkeyToggleSensitive,\n      openMedia: this.handleHotkeyOpenMedia\n    };\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      label: intl.formatMessage(messages.detailedStatus),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      showBackButton: true,\n      multiColumn: multiColumn,\n      extraButton: /*#__PURE__*/React.createElement(\"button\", {\n        className: \"column-header__button\",\n        title: intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll),\n        \"aria-label\": intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll),\n        onClick: this.handleToggleAll,\n        \"aria-pressed\": status.get('hidden') ? 'false' : 'true',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        id: status.get('hidden') ? 'eye-slash' : 'eye',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 324\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ScrollContainer, {\n      scrollKey: \"thread\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('scrollable', {\n        fullscreen\n      }),\n      ref: this.setRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 11\n      }\n    }, ancestors, /*#__PURE__*/React.createElement(HotKeys, {\n      handlers: handlers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('focusable', 'detailed-status__wrapper'),\n      tabIndex: \"0\",\n      \"aria-label\": textForScreenReader(intl, status, false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(DetailedStatus, {\n      key: \"details-\" + status.get('id'),\n      status: status,\n      onOpenVideo: this.handleOpenVideo,\n      onOpenMedia: this.handleOpenMedia,\n      onToggleHidden: this.handleToggleHidden,\n      domain: domain,\n      showMedia: this.state.showMedia,\n      onToggleMediaVisibility: this.handleToggleMediaVisibility,\n      pictureInPicture: pictureInPicture,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ActionBar, {\n      key: \"action-bar-\" + status.get('id'),\n      status: status,\n      onReply: this.handleReplyClick,\n      onFavourite: this.handleFavouriteClick,\n      onReblog: this.handleReblogClick,\n      onBookmark: this.handleBookmarkClick,\n      onDelete: this.handleDeleteClick,\n      onDirect: this.handleDirectClick,\n      onMention: this.handleMentionClick,\n      onMute: this.handleMuteClick,\n      onUnmute: this.handleUnmuteClick,\n      onMuteConversation: this.handleConversationMuteClick,\n      onBlock: this.handleBlockClick,\n      onUnblock: this.handleUnblockClick,\n      onBlockDomain: this.handleBlockDomainClick,\n      onUnblockDomain: this.handleUnblockDomainClick,\n      onReport: this.handleReport,\n      onPin: this.handlePin,\n      onEmbed: this.handleEmbed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 17\n      }\n    }))), descendants)));\n  };\n\n  return Status;\n}(ImmutablePureComponent), _class2.contextTypes = {\n  router: PropTypes.object\n}, _class2.propTypes = {\n  params: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  status: ImmutablePropTypes.map,\n  ancestorsIds: ImmutablePropTypes.list,\n  descendantsIds: ImmutablePropTypes.list,\n  intl: PropTypes.object.isRequired,\n  askReplyConfirmation: PropTypes.bool,\n  multiColumn: PropTypes.bool,\n  domain: PropTypes.string.isRequired,\n  pictureInPicture: ImmutablePropTypes.contains({\n    inUse: PropTypes.bool,\n    available: PropTypes.bool\n  })\n}, _temp)) || _class) || _class);\nexport { Status as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/status/index.js"],"names":["Immutable","React","connect","PropTypes","classNames","ImmutablePropTypes","createSelector","fetchStatus","MissingIndicator","DetailedStatus","ActionBar","Column","favourite","unfavourite","bookmark","unbookmark","reblog","unreblog","pin","unpin","replyCompose","mentionCompose","directCompose","muteStatus","unmuteStatus","deleteStatus","hideStatus","revealStatus","unblockAccount","unmuteAccount","blockDomain","unblockDomain","initMuteModal","initBlockModal","initBoostModal","initReport","makeGetStatus","makeGetPictureInPicture","ScrollContainer","ColumnBackButton","ColumnHeader","StatusContainer","openModal","defineMessages","injectIntl","FormattedMessage","ImmutablePureComponent","HotKeys","boostModal","deleteModal","attachFullscreenListener","detachFullscreenListener","isFullscreen","textForScreenReader","defaultMediaVisibility","Icon","messages","deleteConfirm","deleteMessage","redraftConfirm","redraftMessage","revealAll","hideAll","detailedStatus","replyConfirm","replyMessage","blockDomainConfirm","makeMapStateToProps","getStatus","getPictureInPicture","getAncestorsIds","_","id","state","getIn","statusId","inReplyTos","ancestorsIds","List","withMutations","mutable","includes","unshift","get","getDescendantsIds","contextReplies","statuses","descendantsIds","ids","length","pop","replies","push","reverse","forEach","reply","insertAt","findIndex","idx","splice","mapStateToProps","props","status","params","askReplyConfirmation","trim","domain","pictureInPicture","Status","fullscreen","showMedia","loadedStatusId","undefined","handleToggleMediaVisibility","setState","handleFavouriteClick","dispatch","handlePin","handleReplyClick","intl","message","formatMessage","confirm","onConfirm","context","router","history","handleModalReblog","privacy","handleReblogClick","e","shiftKey","onReblog","handleBookmarkClick","handleDeleteClick","withRedraft","handleDirectClick","account","handleMentionClick","handleOpenMedia","media","index","handleOpenVideo","options","handleHotkeyOpenMedia","preventDefault","size","startTime","handleMuteClick","handleConversationMuteClick","handleToggleHidden","handleToggleAll","statusIds","concat","toJS","handleBlockClick","handleReport","handleEmbed","url","handleUnmuteClick","handleUnblockClick","handleBlockDomainClick","handleUnblockDomainClick","handleHotkeyMoveUp","handleMoveUp","handleHotkeyMoveDown","handleMoveDown","handleHotkeyReply","handleHotkeyFavourite","handleHotkeyBoost","handleHotkeyMention","handleHotkeyOpenProfile","handleHotkeyToggleHidden","handleHotkeyToggleSensitive","_selectChild","indexOf","setRef","c","node","onFullScreenChange","componentWillMount","componentDidMount","componentWillReceiveProps","nextProps","_scrolledIntoView","align_top","container","element","querySelectorAll","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","renderChildren","list","map","componentDidUpdate","window","requestAnimationFrame","componentWillUnmount","render","ancestors","descendants","multiColumn","handlers","moveUp","moveDown","boost","mention","openProfile","toggleHidden","toggleSensitive","openMedia","contextTypes","object","propTypes","isRequired","func","bool","string","contains","inUse","available"],"mappings":"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","sourcesContent":["import Immutable from 'immutable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { createSelector } from 'reselect';\nimport { fetchStatus } from '../../actions/statuses';\nimport MissingIndicator from '../../components/missing_indicator';\nimport DetailedStatus from './components/detailed_status';\nimport ActionBar from './components/action_bar';\nimport Column from '../ui/components/column';\nimport {\n  favourite,\n  unfavourite,\n  bookmark,\n  unbookmark,\n  reblog,\n  unreblog,\n  pin,\n  unpin,\n} from '../../actions/interactions';\nimport {\n  replyCompose,\n  mentionCompose,\n  directCompose,\n} from '../../actions/compose';\nimport {\n  muteStatus,\n  unmuteStatus,\n  deleteStatus,\n  hideStatus,\n  revealStatus,\n} from '../../actions/statuses';\nimport {\n  unblockAccount,\n  unmuteAccount,\n} from '../../actions/accounts';\nimport {\n  blockDomain,\n  unblockDomain,\n} from '../../actions/domain_blocks';\nimport { initMuteModal } from '../../actions/mutes';\nimport { initBlockModal } from '../../actions/blocks';\nimport { initBoostModal } from '../../actions/boosts';\nimport { initReport } from '../../actions/reports';\nimport { makeGetStatus, makeGetPictureInPicture } from '../../selectors';\nimport ScrollContainer from 'mastodon/containers/scroll_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport StatusContainer from '../../containers/status_container';\nimport { openModal } from '../../actions/modal';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport { boostModal, deleteModal } from '../../initial_state';\nimport { attachFullscreenListener, detachFullscreenListener, isFullscreen } from '../ui/util/fullscreen';\nimport { textForScreenReader, defaultMediaVisibility } from '../../components/status';\nimport Icon from 'mastodon/components/icon';\n\nconst messages = defineMessages({\n  deleteConfirm: { id: 'confirmations.delete.confirm', defaultMessage: 'Delete' },\n  deleteMessage: { id: 'confirmations.delete.message', defaultMessage: 'Are you sure you want to delete this status?' },\n  redraftConfirm: { id: 'confirmations.redraft.confirm', defaultMessage: 'Delete & redraft' },\n  redraftMessage: { id: 'confirmations.redraft.message', defaultMessage: 'Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.' },\n  revealAll: { id: 'status.show_more_all', defaultMessage: 'Show more for all' },\n  hideAll: { id: 'status.show_less_all', defaultMessage: 'Show less for all' },\n  detailedStatus: { id: 'status.detailed_status', defaultMessage: 'Detailed conversation view' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Hide entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n  const getPictureInPicture = makeGetPictureInPicture();\n\n  const getAncestorsIds = createSelector([\n    (_, { id }) => id,\n    state => state.getIn(['contexts', 'inReplyTos']),\n  ], (statusId, inReplyTos) => {\n    let ancestorsIds = Immutable.List();\n    ancestorsIds = ancestorsIds.withMutations(mutable => {\n      let id = statusId;\n\n      while (id && !mutable.includes(id)) {\n        mutable.unshift(id);\n        id = inReplyTos.get(id);\n      }\n    });\n\n    return ancestorsIds;\n  });\n\n  const getDescendantsIds = createSelector([\n    (_, { id }) => id,\n    state => state.getIn(['contexts', 'replies']),\n    state => state.get('statuses'),\n  ], (statusId, contextReplies, statuses) => {\n    let descendantsIds = [];\n    const ids = [statusId];\n\n    while (ids.length > 0) {\n      let id        = ids.pop();\n      const replies = contextReplies.get(id);\n\n      if (statusId !== id) {\n        descendantsIds.push(id);\n      }\n\n      if (replies) {\n        replies.reverse().forEach(reply => {\n          if (!ids.includes(reply) && !descendantsIds.includes(reply) && statusId !== reply) ids.push(reply);\n        });\n      }\n    }\n\n    let insertAt = descendantsIds.findIndex((id) => statuses.get(id).get('in_reply_to_account_id') !== statuses.get(id).get('account'));\n    if (insertAt !== -1) {\n      descendantsIds.forEach((id, idx) => {\n        if (idx > insertAt && statuses.get(id).get('in_reply_to_account_id') === statuses.get(id).get('account')) {\n          descendantsIds.splice(idx, 1);\n          descendantsIds.splice(insertAt, 0, id);\n          insertAt += 1;\n        }\n      });\n    }\n\n    return Immutable.List(descendantsIds);\n  });\n\n  const mapStateToProps = (state, props) => {\n    const status = getStatus(state, { id: props.params.statusId });\n\n    let ancestorsIds   = Immutable.List();\n    let descendantsIds = Immutable.List();\n\n    if (status) {\n      ancestorsIds   = getAncestorsIds(state, { id: status.get('in_reply_to_id') });\n      descendantsIds = getDescendantsIds(state, { id: status.get('id') });\n    }\n\n    return {\n      status,\n      ancestorsIds,\n      descendantsIds,\n      askReplyConfirmation: state.getIn(['compose', 'text']).trim().length !== 0,\n      domain: state.getIn(['meta', 'domain']),\n      pictureInPicture: getPictureInPicture(state, { id: props.params.statusId }),\n    };\n  };\n\n  return mapStateToProps;\n};\n\nexport default @injectIntl\n@connect(makeMapStateToProps)\nclass Status extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    ancestorsIds: ImmutablePropTypes.list,\n    descendantsIds: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    askReplyConfirmation: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n    pictureInPicture: ImmutablePropTypes.contains({\n      inUse: PropTypes.bool,\n      available: PropTypes.bool,\n    }),\n  };\n\n  state = {\n    fullscreen: false,\n    showMedia: defaultMediaVisibility(this.props.status),\n    loadedStatusId: undefined,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchStatus(this.props.params.statusId));\n  }\n\n  componentDidMount () {\n    attachFullscreenListener(this.onFullScreenChange);\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this._scrolledIntoView = false;\n      this.props.dispatch(fetchStatus(nextProps.params.statusId));\n    }\n\n    if (nextProps.status && nextProps.status.get('id') !== this.state.loadedStatusId) {\n      this.setState({ showMedia: defaultMediaVisibility(nextProps.status), loadedStatusId: nextProps.status.get('id') });\n    }\n  }\n\n  handleToggleMediaVisibility = () => {\n    this.setState({ showMedia: !this.state.showMedia });\n  }\n\n  handleFavouriteClick = (status) => {\n    if (status.get('favourited')) {\n      this.props.dispatch(unfavourite(status));\n    } else {\n      this.props.dispatch(favourite(status));\n    }\n  }\n\n  handlePin = (status) => {\n    if (status.get('pinned')) {\n      this.props.dispatch(unpin(status));\n    } else {\n      this.props.dispatch(pin(status));\n    }\n  }\n\n  handleReplyClick = (status) => {\n    let { askReplyConfirmation, dispatch, intl } = this.props;\n    if (askReplyConfirmation) {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(messages.replyMessage),\n        confirm: intl.formatMessage(messages.replyConfirm),\n        onConfirm: () => dispatch(replyCompose(status, this.context.router.history)),\n      }));\n    } else {\n      dispatch(replyCompose(status, this.context.router.history));\n    }\n  }\n\n  handleModalReblog = (status, privacy) => {\n    this.props.dispatch(reblog(status, privacy));\n  }\n\n  handleReblogClick = (status, e) => {\n    if (status.get('reblogged')) {\n      this.props.dispatch(unreblog(status));\n    } else {\n      if ((e && e.shiftKey) || !boostModal) {\n        this.handleModalReblog(status);\n      } else {\n        this.props.dispatch(initBoostModal({ status, onReblog: this.handleModalReblog }));\n      }\n    }\n  }\n\n  handleBookmarkClick = (status) => {\n    if (status.get('bookmarked')) {\n      this.props.dispatch(unbookmark(status));\n    } else {\n      this.props.dispatch(bookmark(status));\n    }\n  }\n\n  handleDeleteClick = (status, history, withRedraft = false) => {\n    const { dispatch, intl } = this.props;\n\n    if (!deleteModal) {\n      dispatch(deleteStatus(status.get('id'), history, withRedraft));\n    } else {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n        confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n        onConfirm: () => dispatch(deleteStatus(status.get('id'), history, withRedraft)),\n      }));\n    }\n  }\n\n  handleDirectClick = (account, router) => {\n    this.props.dispatch(directCompose(account, router));\n  }\n\n  handleMentionClick = (account, router) => {\n    this.props.dispatch(mentionCompose(account, router));\n  }\n\n  handleOpenMedia = (media, index) => {\n    this.props.dispatch(openModal('MEDIA', { statusId: this.props.status.get('id'), media, index }));\n  }\n\n  handleOpenVideo = (media, options) => {\n    this.props.dispatch(openModal('VIDEO', { statusId: this.props.status.get('id'), media, options }));\n  }\n\n  handleHotkeyOpenMedia = e => {\n    const { status } = this.props;\n\n    e.preventDefault();\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        this.handleOpenVideo(status.getIn(['media_attachments', 0]), { startTime: 0 });\n      } else {\n        this.handleOpenMedia(status.get('media_attachments'), 0);\n      }\n    }\n  }\n\n  handleMuteClick = (account) => {\n    this.props.dispatch(initMuteModal(account));\n  }\n\n  handleConversationMuteClick = (status) => {\n    if (status.get('muted')) {\n      this.props.dispatch(unmuteStatus(status.get('id')));\n    } else {\n      this.props.dispatch(muteStatus(status.get('id')));\n    }\n  }\n\n  handleToggleHidden = (status) => {\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(status.get('id')));\n    } else {\n      this.props.dispatch(hideStatus(status.get('id')));\n    }\n  }\n\n  handleToggleAll = () => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n    const statusIds = [status.get('id')].concat(ancestorsIds.toJS(), descendantsIds.toJS());\n\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(statusIds));\n    } else {\n      this.props.dispatch(hideStatus(statusIds));\n    }\n  }\n\n  handleBlockClick = (status) => {\n    const { dispatch } = this.props;\n    const account = status.get('account');\n    dispatch(initBlockModal(account));\n  }\n\n  handleReport = (status) => {\n    this.props.dispatch(initReport(status.get('account'), status));\n  }\n\n  handleEmbed = (status) => {\n    this.props.dispatch(openModal('EMBED', { url: status.get('url') }));\n  }\n\n  handleUnmuteClick = account => {\n    this.props.dispatch(unmuteAccount(account.get('id')));\n  }\n\n  handleUnblockClick = account => {\n    this.props.dispatch(unblockAccount(account.get('id')));\n  }\n\n  handleBlockDomainClick = domain => {\n    this.props.dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: this.props.intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => this.props.dispatch(blockDomain(domain)),\n    }));\n  }\n\n  handleUnblockDomainClick = domain => {\n    this.props.dispatch(unblockDomain(domain));\n  }\n\n\n  handleHotkeyMoveUp = () => {\n    this.handleMoveUp(this.props.status.get('id'));\n  }\n\n  handleHotkeyMoveDown = () => {\n    this.handleMoveDown(this.props.status.get('id'));\n  }\n\n  handleHotkeyReply = e => {\n    e.preventDefault();\n    this.handleReplyClick(this.props.status);\n  }\n\n  handleHotkeyFavourite = () => {\n    this.handleFavouriteClick(this.props.status);\n  }\n\n  handleHotkeyBoost = () => {\n    this.handleReblogClick(this.props.status);\n  }\n\n  handleHotkeyMention = e => {\n    e.preventDefault();\n    this.handleMentionClick(this.props.status.get('account'));\n  }\n\n  handleHotkeyOpenProfile = () => {\n    this.context.router.history.push(`/accounts/${this.props.status.getIn(['account', 'id'])}`);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    this.handleToggleHidden(this.props.status);\n  }\n\n  handleHotkeyToggleSensitive = () => {\n    this.handleToggleMediaVisibility();\n  }\n\n  handleMoveUp = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size - 1, true);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index, true);\n      } else {\n        this._selectChild(index - 1, true);\n      }\n    }\n  }\n\n  handleMoveDown = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size + 1, false);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index + 2, false);\n      } else {\n        this._selectChild(index + 1, false);\n      }\n    }\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.node;\n    const element = container.querySelectorAll('.focusable')[index];\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  renderChildren (list) {\n    return list.map(id => (\n      <StatusContainer\n        key={id}\n        id={id}\n        onMoveUp={this.handleMoveUp}\n        onMoveDown={this.handleMoveDown}\n        contextType='thread'\n      />\n    ));\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidUpdate () {\n    if (this._scrolledIntoView) {\n      return;\n    }\n\n    const { status, ancestorsIds } = this.props;\n\n    if (status && ancestorsIds && ancestorsIds.size > 0) {\n      const element = this.node.querySelectorAll('.focusable')[ancestorsIds.size - 1];\n\n      window.requestAnimationFrame(() => {\n        element.scrollIntoView(true);\n      });\n      this._scrolledIntoView = true;\n    }\n  }\n\n  componentWillUnmount () {\n    detachFullscreenListener(this.onFullScreenChange);\n  }\n\n  onFullScreenChange = () => {\n    this.setState({ fullscreen: isFullscreen() });\n  }\n\n  render () {\n    let ancestors, descendants;\n    const { status, ancestorsIds, descendantsIds, intl, domain, multiColumn, pictureInPicture } = this.props;\n    const { fullscreen } = this.state;\n\n    if (status === null) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (ancestorsIds && ancestorsIds.size > 0) {\n      ancestors = <div>{this.renderChildren(ancestorsIds)}</div>;\n    }\n\n    if (descendantsIds && descendantsIds.size > 0) {\n      descendants = <div>{this.renderChildren(descendantsIds)}</div>;\n    }\n\n    const handlers = {\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      reply: this.handleHotkeyReply,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleHotkeyMention,\n      openProfile: this.handleHotkeyOpenProfile,\n      toggleHidden: this.handleHotkeyToggleHidden,\n      toggleSensitive: this.handleHotkeyToggleSensitive,\n      openMedia: this.handleHotkeyOpenMedia,\n    };\n\n    return (\n      <Column bindToDocument={!multiColumn} label={intl.formatMessage(messages.detailedStatus)}>\n        <ColumnHeader\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} aria-label={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} onClick={this.handleToggleAll} aria-pressed={status.get('hidden') ? 'false' : 'true'}><Icon id={status.get('hidden') ? 'eye-slash' : 'eye'} /></button>\n          )}\n        />\n\n        <ScrollContainer scrollKey='thread'>\n          <div className={classNames('scrollable', { fullscreen })} ref={this.setRef}>\n            {ancestors}\n\n            <HotKeys handlers={handlers}>\n              <div className={classNames('focusable', 'detailed-status__wrapper')} tabIndex='0' aria-label={textForScreenReader(intl, status, false)}>\n                <DetailedStatus\n                  key={`details-${status.get('id')}`}\n                  status={status}\n                  onOpenVideo={this.handleOpenVideo}\n                  onOpenMedia={this.handleOpenMedia}\n                  onToggleHidden={this.handleToggleHidden}\n                  domain={domain}\n                  showMedia={this.state.showMedia}\n                  onToggleMediaVisibility={this.handleToggleMediaVisibility}\n                  pictureInPicture={pictureInPicture}\n                />\n\n                <ActionBar\n                  key={`action-bar-${status.get('id')}`}\n                  status={status}\n                  onReply={this.handleReplyClick}\n                  onFavourite={this.handleFavouriteClick}\n                  onReblog={this.handleReblogClick}\n                  onBookmark={this.handleBookmarkClick}\n                  onDelete={this.handleDeleteClick}\n                  onDirect={this.handleDirectClick}\n                  onMention={this.handleMentionClick}\n                  onMute={this.handleMuteClick}\n                  onUnmute={this.handleUnmuteClick}\n                  onMuteConversation={this.handleConversationMuteClick}\n                  onBlock={this.handleBlockClick}\n                  onUnblock={this.handleUnblockClick}\n                  onBlockDomain={this.handleBlockDomainClick}\n                  onUnblockDomain={this.handleUnblockDomainClick}\n                  onReport={this.handleReport}\n                  onPin={this.handlePin}\n                  onEmbed={this.handleEmbed}\n                />\n              </div>\n            </HotKeys>\n\n            {descendants}\n          </div>\n        </ScrollContainer>\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"confirmations.delete.confirm","defaultMessage":"Delete"},{"id":"confirmations.delete.message","defaultMessage":"Are you sure you want to delete this status?"},{"id":"confirmations.redraft.confirm","defaultMessage":"Delete & redraft"},{"id":"confirmations.redraft.message","defaultMessage":"Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned."},{"id":"status.show_more_all","defaultMessage":"Show more for all"},{"id":"status.show_less_all","defaultMessage":"Show less for all"},{"id":"status.detailed_status","defaultMessage":"Detailed conversation view"},{"id":"confirmations.reply.confirm","defaultMessage":"Reply"},{"id":"confirmations.reply.message","defaultMessage":"Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?"},{"id":"confirmations.domain_block.confirm","defaultMessage":"Hide entire domain"},{"id":"confirmations.domain_block.message","defaultMessage":"Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed."}]}},"sourceType":"module"}