{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/reblogs/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport { fetchReblogs } from '../../actions/interactions';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\nimport ScrollableList from '../../components/scrollable_list';\nimport Icon from 'mastodon/components/icon';\nimport ColumnHeader from '../../components/column_header';\nvar messages = defineMessages({\n  refresh: {\n    \"id\": \"refresh\",\n    \"defaultMessage\": \"Refresh\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    accountIds: state.getIn(['user_lists', 'reblogged_by', props.params.statusId])\n  };\n};\n\nvar Reblogs = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(Reblogs, _ImmutablePureCompone);\n\n  function Reblogs() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n\n    _this.handleRefresh = function () {\n      _this.props.dispatch(fetchReblogs(_this.props.params.statusId));\n    };\n\n    return _this;\n  }\n\n  var _proto = Reblogs.prototype;\n\n  _proto.componentWillMount = function componentWillMount() {\n    if (!this.props.accountIds) {\n      this.props.dispatch(fetchReblogs(this.props.params.statusId));\n    }\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this.props.dispatch(fetchReblogs(nextProps.params.statusId));\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        intl = _this$props.intl,\n        accountIds = _this$props.accountIds,\n        multiColumn = _this$props.multiColumn;\n\n    if (!accountIds) {\n      return /*#__PURE__*/React.createElement(Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(LoadingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    var emptyMessage = /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"status.reblogs.empty\",\n      defaultMessage: \"No one has boosted this toot yet. When someone does, they will show up here.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 26\n      }\n    });\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      showBackButton: true,\n      multiColumn: multiColumn,\n      extraButton: /*#__PURE__*/React.createElement(\"button\", {\n        className: \"column-header__button\",\n        title: intl.formatMessage(messages.refresh),\n        \"aria-label\": intl.formatMessage(messages.refresh),\n        onClick: this.handleRefresh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        id: \"refresh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 179\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ScrollableList, {\n      scrollKey: \"reblogs\",\n      emptyMessage: emptyMessage,\n      bindToDocument: !multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, accountIds.map(function (id) {\n      return /*#__PURE__*/React.createElement(AccountContainer, {\n        key: id,\n        id: id,\n        withNote: false,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      });\n    })));\n  };\n\n  return Reblogs;\n}(ImmutablePureComponent), _class2.propTypes = {\n  params: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  accountIds: ImmutablePropTypes.list,\n  multiColumn: PropTypes.bool,\n  intl: PropTypes.object.isRequired\n}, _temp)) || _class) || _class);\nexport { Reblogs as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/reblogs/index.js"],"names":["React","connect","ImmutablePureComponent","PropTypes","ImmutablePropTypes","LoadingIndicator","fetchReblogs","defineMessages","injectIntl","FormattedMessage","AccountContainer","Column","ScrollableList","Icon","ColumnHeader","messages","refresh","mapStateToProps","state","props","accountIds","getIn","params","statusId","Reblogs","handleRefresh","dispatch","componentWillMount","componentWillReceiveProps","nextProps","render","intl","multiColumn","emptyMessage","formatMessage","map","id","propTypes","object","isRequired","func","list","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport { fetchReblogs } from '../../actions/interactions';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\nimport ScrollableList from '../../components/scrollable_list';\nimport Icon from 'mastodon/components/icon';\nimport ColumnHeader from '../../components/column_header';\n\nconst messages = defineMessages({\n  refresh: { id: 'refresh', defaultMessage: 'Refresh' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  accountIds: state.getIn(['user_lists', 'reblogged_by', props.params.statusId]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Reblogs extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentWillMount () {\n    if (!this.props.accountIds) {\n      this.props.dispatch(fetchReblogs(this.props.params.statusId));\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this.props.dispatch(fetchReblogs(nextProps.params.statusId));\n    }\n  }\n\n  handleRefresh = () => {\n    this.props.dispatch(fetchReblogs(this.props.params.statusId));\n  }\n\n  render () {\n    const { intl, accountIds, multiColumn } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='status.reblogs.empty' defaultMessage='No one has boosted this toot yet. When someone does, they will show up here.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn}>\n        <ColumnHeader\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(messages.refresh)} aria-label={intl.formatMessage(messages.refresh)} onClick={this.handleRefresh}><Icon id='refresh' /></button>\n          )}\n        />\n\n        <ScrollableList\n          scrollKey='reblogs'\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"refresh","defaultMessage":"Refresh"},{"id":"status.reblogs.empty","defaultMessage":"No one has boosted this toot yet. When someone does, they will show up here."}]}},"sourceType":"module"}