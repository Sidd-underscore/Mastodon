{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/components/media_modal.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport ReactSwipeableViews from 'react-swipeable-views';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Video from 'mastodon/features/video';\nimport classNames from 'classnames';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport IconButton from 'mastodon/components/icon_button';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImageLoader from './image_loader';\nimport Icon from 'mastodon/components/icon';\nimport GIFV from 'mastodon/components/gifv';\nimport { disableSwiping } from 'mastodon/initial_state';\nimport Footer from 'mastodon/features/picture_in_picture/components/footer';\nimport { getAverageFromBlurhash } from 'mastodon/blurhash';\nvar messages = defineMessages({\n  close: {\n    \"id\": \"lightbox.close\",\n    \"defaultMessage\": \"Close\"\n  },\n  previous: {\n    \"id\": \"lightbox.previous\",\n    \"defaultMessage\": \"Previous\"\n  },\n  next: {\n    \"id\": \"lightbox.next\",\n    \"defaultMessage\": \"Next\"\n  }\n});\n\nvar MediaModal = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(MediaModal, _ImmutablePureCompone);\n\n  function MediaModal() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n    _this.state = {\n      index: null,\n      navigationHidden: false,\n      zoomButtonHidden: false\n    };\n\n    _this.handleSwipe = function (index) {\n      _this.setState({\n        index: index % _this.props.media.size\n      });\n    };\n\n    _this.handleTransitionEnd = function () {\n      _this.setState({\n        zoomButtonHidden: false\n      });\n    };\n\n    _this.handleNextClick = function () {\n      _this.setState({\n        index: (_this.getIndex() + 1) % _this.props.media.size,\n        zoomButtonHidden: true\n      });\n    };\n\n    _this.handlePrevClick = function () {\n      _this.setState({\n        index: (_this.props.media.size + _this.getIndex() - 1) % _this.props.media.size,\n        zoomButtonHidden: true\n      });\n    };\n\n    _this.handleChangeIndex = function (e) {\n      var index = Number(e.currentTarget.getAttribute('data-index'));\n\n      _this.setState({\n        index: index % _this.props.media.size,\n        zoomButtonHidden: true\n      });\n    };\n\n    _this.handleKeyDown = function (e) {\n      switch (e.key) {\n        case 'ArrowLeft':\n          _this.handlePrevClick();\n\n          e.preventDefault();\n          e.stopPropagation();\n          break;\n\n        case 'ArrowRight':\n          _this.handleNextClick();\n\n          e.preventDefault();\n          e.stopPropagation();\n          break;\n      }\n    };\n\n    _this.toggleNavigation = function () {\n      _this.setState(function (prevState) {\n        return {\n          navigationHidden: !prevState.navigationHidden\n        };\n      });\n    };\n\n    _this.handleStatusClick = function (e) {\n      if (e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n\n        _this.context.router.history.push(\"/statuses/\" + _this.props.statusId);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = MediaModal.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown, false);\n\n    this._sendBackgroundColor();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevState.index !== this.state.index) {\n      this._sendBackgroundColor();\n    }\n  };\n\n  _proto._sendBackgroundColor = function _sendBackgroundColor() {\n    var _this$props = this.props,\n        media = _this$props.media,\n        onChangeBackgroundColor = _this$props.onChangeBackgroundColor;\n    var index = this.getIndex();\n    var blurhash = media.getIn([index, 'blurhash']);\n\n    if (blurhash) {\n      var backgroundColor = getAverageFromBlurhash(blurhash);\n      onChangeBackgroundColor(backgroundColor);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n    this.props.onChangeBackgroundColor(null);\n  };\n\n  _proto.getIndex = function getIndex() {\n    return this.state.index !== null ? this.state.index : this.props.index;\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        media = _this$props2.media,\n        statusId = _this$props2.statusId,\n        intl = _this$props2.intl,\n        onClose = _this$props2.onClose;\n    var navigationHidden = this.state.navigationHidden;\n    var index = this.getIndex();\n    var leftNav = media.size > 1 && /*#__PURE__*/React.createElement(\"button\", {\n      tabIndex: \"0\",\n      className: \"media-modal__nav media-modal__nav--left\",\n      onClick: this.handlePrevClick,\n      \"aria-label\": intl.formatMessage(messages.previous),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 40\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"chevron-left\",\n      fixedWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 195\n      }\n    }));\n    var rightNav = media.size > 1 && /*#__PURE__*/React.createElement(\"button\", {\n      tabIndex: \"0\",\n      className: \"media-modal__nav  media-modal__nav--right\",\n      onClick: this.handleNextClick,\n      \"aria-label\": intl.formatMessage(messages.next),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 40\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"chevron-right\",\n      fixedWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 193\n      }\n    }));\n    var content = media.map(function (image) {\n      var width = image.getIn(['meta', 'original', 'width']) || null;\n      var height = image.getIn(['meta', 'original', 'height']) || null;\n\n      if (image.get('type') === 'image') {\n        return /*#__PURE__*/React.createElement(ImageLoader, {\n          previewSrc: image.get('preview_url'),\n          src: image.get('url'),\n          width: width,\n          height: height,\n          alt: image.get('description'),\n          key: image.get('url'),\n          onClick: _this2.toggleNavigation,\n          zoomButtonHidden: _this2.state.zoomButtonHidden,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 11\n          }\n        });\n      } else if (image.get('type') === 'video') {\n        var _this2$props = _this2.props,\n            currentTime = _this2$props.currentTime,\n            autoPlay = _this2$props.autoPlay,\n            volume = _this2$props.volume;\n        return /*#__PURE__*/React.createElement(Video, {\n          preview: image.get('preview_url'),\n          blurhash: image.get('blurhash'),\n          src: image.get('url'),\n          width: image.get('width'),\n          height: image.get('height'),\n          frameRate: image.getIn(['meta', 'original', 'frame_rate']),\n          currentTime: currentTime || 0,\n          autoPlay: autoPlay || false,\n          volume: volume || 1,\n          onCloseVideo: onClose,\n          detailed: true,\n          alt: image.get('description'),\n          key: image.get('url'),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 11\n          }\n        });\n      } else if (image.get('type') === 'gifv') {\n        return /*#__PURE__*/React.createElement(GIFV, {\n          src: image.get('url'),\n          width: width,\n          height: height,\n          key: image.get('preview_url'),\n          alt: image.get('description'),\n          onClick: _this2.toggleNavigation,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 11\n          }\n        });\n      }\n\n      return null;\n    }).toArray(); // you can't use 100vh, because the viewport height is taller\n    // than the visible part of the document in some mobile\n    // browsers when it's address bar is visible.\n    // https://developers.google.com/web/updates/2016/12/url-bar-resizing\n\n    var swipeableViewsStyle = {\n      width: '100%',\n      height: '100%'\n    };\n    var containerStyle = {\n      alignItems: 'center' // center vertically\n\n    };\n    var navigationClassName = classNames('media-modal__navigation', {\n      'media-modal__navigation--hidden': navigationHidden\n    });\n    var pagination;\n\n    if (media.size > 1) {\n      pagination = media.map(function (item, i) {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          key: i,\n          className: classNames('media-modal__page-dot', {\n            active: i === index\n          }),\n          \"data-index\": i,\n          onClick: _this2.handleChangeIndex,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 9\n          }\n        }, i + 1);\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-root__modal media-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"media-modal__closer\",\n      role: \"presentation\",\n      onClick: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ReactSwipeableViews, {\n      style: swipeableViewsStyle,\n      containerStyle: containerStyle,\n      onChangeIndex: this.handleSwipe,\n      onTransitionEnd: this.handleTransitionEnd,\n      index: index,\n      disabled: disableSwiping,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    }, content)), /*#__PURE__*/React.createElement(\"div\", {\n      className: navigationClassName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      className: \"media-modal__close\",\n      title: intl.formatMessage(messages.close),\n      icon: \"times\",\n      onClick: onClose,\n      size: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    }), leftNav, rightNav, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"media-modal__overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, pagination && /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"media-modal__pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 28\n      }\n    }, pagination), statusId && /*#__PURE__*/React.createElement(Footer, {\n      statusId: statusId,\n      withOpenButton: true,\n      onClose: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 26\n      }\n    }))));\n  };\n\n  return MediaModal;\n}(ImmutablePureComponent), _class2.propTypes = {\n  media: ImmutablePropTypes.list.isRequired,\n  statusId: PropTypes.string,\n  index: PropTypes.number.isRequired,\n  onClose: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired,\n  onChangeBackgroundColor: PropTypes.func.isRequired,\n  currentTime: PropTypes.number,\n  autoPlay: PropTypes.bool,\n  volume: PropTypes.number\n}, _temp)) || _class;\n\nexport { MediaModal as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/components/media_modal.js"],"names":["React","ReactSwipeableViews","ImmutablePropTypes","PropTypes","Video","classNames","defineMessages","injectIntl","IconButton","ImmutablePureComponent","ImageLoader","Icon","GIFV","disableSwiping","Footer","getAverageFromBlurhash","messages","close","previous","next","MediaModal","state","index","navigationHidden","zoomButtonHidden","handleSwipe","setState","props","media","size","handleTransitionEnd","handleNextClick","getIndex","handlePrevClick","handleChangeIndex","e","Number","currentTarget","getAttribute","handleKeyDown","key","preventDefault","stopPropagation","toggleNavigation","prevState","handleStatusClick","button","ctrlKey","metaKey","context","router","history","push","statusId","componentDidMount","window","addEventListener","_sendBackgroundColor","componentDidUpdate","prevProps","onChangeBackgroundColor","blurhash","getIn","backgroundColor","componentWillUnmount","removeEventListener","render","intl","onClose","leftNav","formatMessage","rightNav","content","map","image","width","height","get","currentTime","autoPlay","volume","toArray","swipeableViewsStyle","containerStyle","alignItems","navigationClassName","pagination","item","i","active","propTypes","list","isRequired","string","number","func","object","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactSwipeableViews from 'react-swipeable-views';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Video from 'mastodon/features/video';\nimport classNames from 'classnames';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport IconButton from 'mastodon/components/icon_button';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImageLoader from './image_loader';\nimport Icon from 'mastodon/components/icon';\nimport GIFV from 'mastodon/components/gifv';\nimport { disableSwiping } from 'mastodon/initial_state';\nimport Footer from 'mastodon/features/picture_in_picture/components/footer';\nimport { getAverageFromBlurhash } from 'mastodon/blurhash';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n  previous: { id: 'lightbox.previous', defaultMessage: 'Previous' },\n  next: { id: 'lightbox.next', defaultMessage: 'Next' },\n});\n\nexport default @injectIntl\nclass MediaModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    media: ImmutablePropTypes.list.isRequired,\n    statusId: PropTypes.string,\n    index: PropTypes.number.isRequired,\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onChangeBackgroundColor: PropTypes.func.isRequired,\n    currentTime: PropTypes.number,\n    autoPlay: PropTypes.bool,\n    volume: PropTypes.number,\n  };\n\n  state = {\n    index: null,\n    navigationHidden: false,\n    zoomButtonHidden: false,\n  };\n\n  handleSwipe = (index) => {\n    this.setState({ index: index % this.props.media.size });\n  }\n\n  handleTransitionEnd = () => {\n    this.setState({\n      zoomButtonHidden: false,\n    });\n  }\n\n  handleNextClick = () => {\n    this.setState({\n      index: (this.getIndex() + 1) % this.props.media.size,\n      zoomButtonHidden: true,\n    });\n  }\n\n  handlePrevClick = () => {\n    this.setState({\n      index: (this.props.media.size + this.getIndex() - 1) % this.props.media.size,\n      zoomButtonHidden: true,\n    });\n  }\n\n  handleChangeIndex = (e) => {\n    const index = Number(e.currentTarget.getAttribute('data-index'));\n\n    this.setState({\n      index: index % this.props.media.size,\n      zoomButtonHidden: true,\n    });\n  }\n\n  handleKeyDown = (e) => {\n    switch(e.key) {\n    case 'ArrowLeft':\n      this.handlePrevClick();\n      e.preventDefault();\n      e.stopPropagation();\n      break;\n    case 'ArrowRight':\n      this.handleNextClick();\n      e.preventDefault();\n      e.stopPropagation();\n      break;\n    }\n  }\n\n  componentDidMount () {\n    window.addEventListener('keydown', this.handleKeyDown, false);\n\n    this._sendBackgroundColor();\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    if (prevState.index !== this.state.index) {\n      this._sendBackgroundColor();\n    }\n  }\n\n  _sendBackgroundColor () {\n    const { media, onChangeBackgroundColor } = this.props;\n    const index = this.getIndex();\n    const blurhash = media.getIn([index, 'blurhash']);\n\n    if (blurhash) {\n      const backgroundColor = getAverageFromBlurhash(blurhash);\n      onChangeBackgroundColor(backgroundColor);\n    }\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('keydown', this.handleKeyDown);\n\n    this.props.onChangeBackgroundColor(null);\n  }\n\n  getIndex () {\n    return this.state.index !== null ? this.state.index : this.props.index;\n  }\n\n  toggleNavigation = () => {\n    this.setState(prevState => ({\n      navigationHidden: !prevState.navigationHidden,\n    }));\n  };\n\n  handleStatusClick = e => {\n    if (e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/statuses/${this.props.statusId}`);\n    }\n  }\n\n  render () {\n    const { media, statusId, intl, onClose } = this.props;\n    const { navigationHidden } = this.state;\n\n    const index = this.getIndex();\n\n    const leftNav  = media.size > 1 && <button tabIndex='0' className='media-modal__nav media-modal__nav--left' onClick={this.handlePrevClick} aria-label={intl.formatMessage(messages.previous)}><Icon id='chevron-left' fixedWidth /></button>;\n    const rightNav = media.size > 1 && <button tabIndex='0' className='media-modal__nav  media-modal__nav--right' onClick={this.handleNextClick} aria-label={intl.formatMessage(messages.next)}><Icon id='chevron-right' fixedWidth /></button>;\n\n    const content = media.map((image) => {\n      const width  = image.getIn(['meta', 'original', 'width']) || null;\n      const height = image.getIn(['meta', 'original', 'height']) || null;\n\n      if (image.get('type') === 'image') {\n        return (\n          <ImageLoader\n            previewSrc={image.get('preview_url')}\n            src={image.get('url')}\n            width={width}\n            height={height}\n            alt={image.get('description')}\n            key={image.get('url')}\n            onClick={this.toggleNavigation}\n            zoomButtonHidden={this.state.zoomButtonHidden}\n          />\n        );\n      } else if (image.get('type') === 'video') {\n        const { currentTime, autoPlay, volume } = this.props;\n\n        return (\n          <Video\n            preview={image.get('preview_url')}\n            blurhash={image.get('blurhash')}\n            src={image.get('url')}\n            width={image.get('width')}\n            height={image.get('height')}\n            frameRate={image.getIn(['meta', 'original', 'frame_rate'])}\n            currentTime={currentTime || 0}\n            autoPlay={autoPlay || false}\n            volume={volume || 1}\n            onCloseVideo={onClose}\n            detailed\n            alt={image.get('description')}\n            key={image.get('url')}\n          />\n        );\n      } else if (image.get('type') === 'gifv') {\n        return (\n          <GIFV\n            src={image.get('url')}\n            width={width}\n            height={height}\n            key={image.get('preview_url')}\n            alt={image.get('description')}\n            onClick={this.toggleNavigation}\n          />\n        );\n      }\n\n      return null;\n    }).toArray();\n\n    // you can't use 100vh, because the viewport height is taller\n    // than the visible part of the document in some mobile\n    // browsers when it's address bar is visible.\n    // https://developers.google.com/web/updates/2016/12/url-bar-resizing\n    const swipeableViewsStyle = {\n      width: '100%',\n      height: '100%',\n    };\n\n    const containerStyle = {\n      alignItems: 'center', // center vertically\n    };\n\n    const navigationClassName = classNames('media-modal__navigation', {\n      'media-modal__navigation--hidden': navigationHidden,\n    });\n\n    let pagination;\n\n    if (media.size > 1) {\n      pagination = media.map((item, i) => (\n        <button key={i} className={classNames('media-modal__page-dot', { active: i === index })} data-index={i} onClick={this.handleChangeIndex}>\n          {i + 1}\n        </button>\n      ));\n    }\n\n    return (\n      <div className='modal-root__modal media-modal'>\n        <div className='media-modal__closer' role='presentation' onClick={onClose} >\n          <ReactSwipeableViews\n            style={swipeableViewsStyle}\n            containerStyle={containerStyle}\n            onChangeIndex={this.handleSwipe}\n            onTransitionEnd={this.handleTransitionEnd}\n            index={index}\n            disabled={disableSwiping}\n          >\n            {content}\n          </ReactSwipeableViews>\n        </div>\n\n        <div className={navigationClassName}>\n          <IconButton className='media-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={40} />\n\n          {leftNav}\n          {rightNav}\n\n          <div className='media-modal__overlay'>\n            {pagination && <ul className='media-modal__pagination'>{pagination}</ul>}\n            {statusId && <Footer statusId={statusId} withOpenButton onClose={onClose} />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"lightbox.close","defaultMessage":"Close"},{"id":"lightbox.previous","defaultMessage":"Previous"},{"id":"lightbox.next","defaultMessage":"Next"}]}},"sourceType":"module"}