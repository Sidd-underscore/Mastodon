{"ast":null,"code":"/*\nCopyright (c) 2020 by Alex Permyakov (https://codepen.io/alexdevp/pen/RNELPV)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar hex2rgba = function hex2rgba(hex, alpha) {\n  if (alpha === void 0) {\n    alpha = 1;\n  }\n\n  var _hex$match$map = hex.match(/\\w\\w/g).map(function (x) {\n    return parseInt(x, 16);\n  }),\n      r = _hex$match$map[0],\n      g = _hex$match$map[1],\n      b = _hex$match$map[2];\n\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n};\n\nvar Visualizer = /*#__PURE__*/function () {\n  function Visualizer(tickSize) {\n    this.tickSize = tickSize;\n  }\n\n  var _proto = Visualizer.prototype;\n\n  _proto.setCanvas = function setCanvas(canvas) {\n    this.canvas = canvas;\n\n    if (canvas) {\n      this.context = canvas.getContext('2d');\n    }\n  };\n\n  _proto.setAudioContext = function setAudioContext(context, source) {\n    var analyser = context.createAnalyser();\n    analyser.smoothingTimeConstant = 0.6;\n    analyser.fftSize = 2048;\n    source.connect(analyser);\n    this.analyser = analyser;\n  };\n\n  _proto.getTickPoints = function getTickPoints(count) {\n    var coords = [];\n\n    for (var i = 0; i < count; i++) {\n      var rad = Math.PI * 2 * i / count;\n      coords.push({\n        x: Math.cos(rad),\n        y: -Math.sin(rad)\n      });\n    }\n\n    return coords;\n  };\n\n  _proto.drawTick = function drawTick(cx, cy, mainColor, x1, y1, x2, y2) {\n    var dx1 = Math.ceil(cx + x1);\n    var dy1 = Math.ceil(cy + y1);\n    var dx2 = Math.ceil(cx + x2);\n    var dy2 = Math.ceil(cy + y2);\n    var gradient = this.context.createLinearGradient(dx1, dy1, dx2, dy2);\n    var lastColor = hex2rgba(mainColor, 0);\n    gradient.addColorStop(0, mainColor);\n    gradient.addColorStop(0.6, mainColor);\n    gradient.addColorStop(1, lastColor);\n    this.context.beginPath();\n    this.context.strokeStyle = gradient;\n    this.context.lineWidth = 2;\n    this.context.moveTo(dx1, dy1);\n    this.context.lineTo(dx2, dy2);\n    this.context.stroke();\n  };\n\n  _proto.getTicks = function getTicks(count, size, radius, scaleCoefficient) {\n    var ticks = this.getTickPoints(count);\n    var lesser = 200;\n    var m = [];\n    var bufferLength = this.analyser ? this.analyser.frequencyBinCount : 0;\n    var frequencyData = new Uint8Array(bufferLength);\n    var allScales = [];\n\n    if (this.analyser) {\n      this.analyser.getByteFrequencyData(frequencyData);\n    }\n\n    ticks.forEach(function (tick, i) {\n      var coef = 1 - i / (ticks.length * 2.5);\n      var delta = ((frequencyData[i] || 0) - lesser * coef) * scaleCoefficient;\n\n      if (delta < 0) {\n        delta = 0;\n      }\n\n      var k = radius / (radius - (size + delta));\n      var x1 = tick.x * (radius - size);\n      var y1 = tick.y * (radius - size);\n      var x2 = x1 * k;\n      var y2 = y1 * k;\n      m.push({\n        x1,\n        y1,\n        x2,\n        y2\n      });\n\n      if (i < 20) {\n        var _scale = delta / (200 * scaleCoefficient);\n\n        _scale = _scale < 1 ? 1 : _scale;\n        allScales.push(_scale);\n      }\n    });\n    var scale = allScales.reduce(function (pv, cv) {\n      return pv + cv;\n    }, 0) / allScales.length;\n    return m.map(function (_ref) {\n      var x1 = _ref.x1,\n          y1 = _ref.y1,\n          x2 = _ref.x2,\n          y2 = _ref.y2;\n      return {\n        x1: x1,\n        y1: y1,\n        x2: x2 * scale,\n        y2: y2 * scale\n      };\n    });\n  };\n\n  _proto.clear = function clear(width, height) {\n    this.context.clearRect(0, 0, width, height);\n  };\n\n  _proto.draw = function draw(cx, cy, color, radius, coefficient) {\n    var _this = this;\n\n    this.context.save();\n    var ticks = this.getTicks(parseInt(360 * coefficient), this.tickSize, radius, coefficient);\n    ticks.forEach(function (tick) {\n      _this.drawTick(cx, cy, color, tick.x1, tick.y1, tick.x2, tick.y2);\n    });\n    this.context.restore();\n  };\n\n  return Visualizer;\n}();\n\nexport { Visualizer as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/audio/visualizer.js"],"names":["hex2rgba","hex","alpha","match","map","x","parseInt","r","g","b","Visualizer","tickSize","setCanvas","canvas","context","getContext","setAudioContext","source","analyser","createAnalyser","smoothingTimeConstant","fftSize","connect","getTickPoints","count","coords","i","rad","Math","PI","push","cos","y","sin","drawTick","cx","cy","mainColor","x1","y1","x2","y2","dx1","ceil","dy1","dx2","dy2","gradient","createLinearGradient","lastColor","addColorStop","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","getTicks","size","radius","scaleCoefficient","ticks","lesser","m","bufferLength","frequencyBinCount","frequencyData","Uint8Array","allScales","getByteFrequencyData","forEach","tick","coef","length","delta","k","scale","reduce","pv","cv","clear","width","height","clearRect","draw","color","coefficient","save","restore"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2020 by Alex Permyakov (https://codepen.io/alexdevp/pen/RNELPV)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst hex2rgba = (hex, alpha = 1) => {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\nexport default class Visualizer {\n\n  constructor (tickSize) {\n    this.tickSize = tickSize;\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n    if (canvas) {\n      this.context = canvas.getContext('2d');\n    }\n  }\n\n  setAudioContext(context, source) {\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = 0.6;\n    analyser.fftSize = 2048;\n\n    source.connect(analyser);\n\n    this.analyser = analyser;\n  }\n\n  getTickPoints (count) {\n    const coords = [];\n\n    for(let i = 0; i < count; i++) {\n      const rad = Math.PI * 2 * i / count;\n      coords.push({ x: Math.cos(rad), y: -Math.sin(rad) });\n    }\n\n    return coords;\n  }\n\n  drawTick (cx, cy, mainColor, x1, y1, x2, y2) {\n    const dx1 = Math.ceil(cx + x1);\n    const dy1 = Math.ceil(cy + y1);\n    const dx2 = Math.ceil(cx + x2);\n    const dy2 = Math.ceil(cy + y2);\n\n    const gradient = this.context.createLinearGradient(dx1, dy1, dx2, dy2);\n\n    const lastColor = hex2rgba(mainColor, 0);\n\n    gradient.addColorStop(0, mainColor);\n    gradient.addColorStop(0.6, mainColor);\n    gradient.addColorStop(1, lastColor);\n\n    this.context.beginPath();\n    this.context.strokeStyle = gradient;\n    this.context.lineWidth = 2;\n    this.context.moveTo(dx1, dy1);\n    this.context.lineTo(dx2, dy2);\n    this.context.stroke();\n  }\n\n  getTicks (count, size, radius, scaleCoefficient) {\n    const ticks = this.getTickPoints(count);\n    const lesser = 200;\n    const m = [];\n    const bufferLength = this.analyser ? this.analyser.frequencyBinCount : 0;\n    const frequencyData = new Uint8Array(bufferLength);\n    const allScales = [];\n\n    if (this.analyser) {\n      this.analyser.getByteFrequencyData(frequencyData);\n    }\n\n    ticks.forEach((tick, i) => {\n      const coef = 1 - i / (ticks.length * 2.5);\n\n      let delta = ((frequencyData[i] || 0) - lesser * coef) * scaleCoefficient;\n\n      if (delta < 0) {\n        delta = 0;\n      }\n\n      const k = radius / (radius - (size + delta));\n\n      const x1 = tick.x * (radius - size);\n      const y1 = tick.y * (radius - size);\n      const x2 = x1 * k;\n      const y2 = y1 * k;\n\n      m.push({ x1, y1, x2, y2 });\n\n      if (i < 20) {\n        let scale = delta / (200 * scaleCoefficient);\n        scale = scale < 1 ? 1 : scale;\n        allScales.push(scale);\n      }\n    });\n\n    const scale = allScales.reduce((pv, cv) => pv + cv, 0) / allScales.length;\n\n    return m.map(({ x1, y1, x2, y2 }) => ({\n      x1: x1,\n      y1: y1,\n      x2: x2 * scale,\n      y2: y2 * scale,\n    }));\n  }\n\n  clear (width, height) {\n    this.context.clearRect(0, 0, width, height);\n  }\n\n  draw (cx, cy, color, radius, coefficient) {\n    this.context.save();\n\n    const ticks = this.getTicks(parseInt(360 * coefficient), this.tickSize, radius, coefficient);\n\n    ticks.forEach(tick => {\n      this.drawTick(cx, cy, color, tick.x1, tick.y1, tick.x2, tick.y2);\n    });\n\n    this.context.restore();\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}