{"ast":null,"code":"import api from '../api';\nimport { importFetchedAccounts } from './importer';\nimport { fetchRelationships } from './accounts';\nexport var SUGGESTIONS_FETCH_REQUEST = 'SUGGESTIONS_FETCH_REQUEST';\nexport var SUGGESTIONS_FETCH_SUCCESS = 'SUGGESTIONS_FETCH_SUCCESS';\nexport var SUGGESTIONS_FETCH_FAIL = 'SUGGESTIONS_FETCH_FAIL';\nexport var SUGGESTIONS_DISMISS = 'SUGGESTIONS_DISMISS';\nexport function fetchSuggestions(withRelationships) {\n  if (withRelationships === void 0) {\n    withRelationships = false;\n  }\n\n  return function (dispatch, getState) {\n    dispatch(fetchSuggestionsRequest());\n    api(getState).get('/api/v2/suggestions', {\n      params: {\n        limit: 20\n      }\n    }).then(function (response) {\n      dispatch(importFetchedAccounts(response.data.map(function (x) {\n        return x.account;\n      })));\n      dispatch(fetchSuggestionsSuccess(response.data));\n\n      if (withRelationships) {\n        dispatch(fetchRelationships(response.data.map(function (item) {\n          return item.account.id;\n        })));\n      }\n    }).catch(function (error) {\n      return dispatch(fetchSuggestionsFail(error));\n    });\n  };\n}\n;\nexport function fetchSuggestionsRequest() {\n  return {\n    type: SUGGESTIONS_FETCH_REQUEST,\n    skipLoading: true\n  };\n}\n;\nexport function fetchSuggestionsSuccess(suggestions) {\n  return {\n    type: SUGGESTIONS_FETCH_SUCCESS,\n    suggestions,\n    skipLoading: true\n  };\n}\n;\nexport function fetchSuggestionsFail(error) {\n  return {\n    type: SUGGESTIONS_FETCH_FAIL,\n    error,\n    skipLoading: true,\n    skipAlert: true\n  };\n}\n;\nexport var dismissSuggestion = function dismissSuggestion(accountId) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: SUGGESTIONS_DISMISS,\n      id: accountId\n    });\n    api(getState).delete(\"/api/v1/suggestions/\" + accountId).then(function () {\n      dispatch(fetchSuggestionsRequest());\n      api(getState).get('/api/v2/suggestions').then(function (response) {\n        dispatch(importFetchedAccounts(response.data.map(function (x) {\n          return x.account;\n        })));\n        dispatch(fetchSuggestionsSuccess(response.data));\n      }).catch(function (error) {\n        return dispatch(fetchSuggestionsFail(error));\n      });\n    }).catch(function () {});\n  };\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/suggestions.js"],"names":["api","importFetchedAccounts","fetchRelationships","SUGGESTIONS_FETCH_REQUEST","SUGGESTIONS_FETCH_SUCCESS","SUGGESTIONS_FETCH_FAIL","SUGGESTIONS_DISMISS","fetchSuggestions","withRelationships","dispatch","getState","fetchSuggestionsRequest","get","params","limit","then","response","data","map","x","account","fetchSuggestionsSuccess","item","id","catch","error","fetchSuggestionsFail","type","skipLoading","suggestions","skipAlert","dismissSuggestion","accountId","delete"],"mappings":"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","sourcesContent":["import api from '../api';\nimport { importFetchedAccounts } from './importer';\nimport { fetchRelationships } from './accounts';\n\nexport const SUGGESTIONS_FETCH_REQUEST = 'SUGGESTIONS_FETCH_REQUEST';\nexport const SUGGESTIONS_FETCH_SUCCESS = 'SUGGESTIONS_FETCH_SUCCESS';\nexport const SUGGESTIONS_FETCH_FAIL    = 'SUGGESTIONS_FETCH_FAIL';\n\nexport const SUGGESTIONS_DISMISS = 'SUGGESTIONS_DISMISS';\n\nexport function fetchSuggestions(withRelationships = false) {\n  return (dispatch, getState) => {\n    dispatch(fetchSuggestionsRequest());\n\n    api(getState).get('/api/v2/suggestions', { params: { limit: 20 } }).then(response => {\n      dispatch(importFetchedAccounts(response.data.map(x => x.account)));\n      dispatch(fetchSuggestionsSuccess(response.data));\n\n      if (withRelationships) {\n        dispatch(fetchRelationships(response.data.map(item => item.account.id)));\n      }\n    }).catch(error => dispatch(fetchSuggestionsFail(error)));\n  };\n};\n\nexport function fetchSuggestionsRequest() {\n  return {\n    type: SUGGESTIONS_FETCH_REQUEST,\n    skipLoading: true,\n  };\n};\n\nexport function fetchSuggestionsSuccess(suggestions) {\n  return {\n    type: SUGGESTIONS_FETCH_SUCCESS,\n    suggestions,\n    skipLoading: true,\n  };\n};\n\nexport function fetchSuggestionsFail(error) {\n  return {\n    type: SUGGESTIONS_FETCH_FAIL,\n    error,\n    skipLoading: true,\n    skipAlert: true,\n  };\n};\n\nexport const dismissSuggestion = accountId => (dispatch, getState) => {\n  dispatch({\n    type: SUGGESTIONS_DISMISS,\n    id: accountId,\n  });\n\n  api(getState).delete(`/api/v1/suggestions/${accountId}`).then(() => {\n    dispatch(fetchSuggestionsRequest());\n\n    api(getState).get('/api/v2/suggestions').then(response => {\n      dispatch(importFetchedAccounts(response.data.map(x => x.account)));\n      dispatch(fetchSuggestionsSuccess(response.data));\n    }).catch(error => dispatch(fetchSuggestionsFail(error)));\n  }).catch(() => {});\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}