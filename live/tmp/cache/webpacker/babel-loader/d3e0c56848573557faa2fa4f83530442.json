{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/account_timeline/containers/header_container.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from '../../../selectors';\nimport Header from '../components/header';\nimport { followAccount, unfollowAccount, unblockAccount, unmuteAccount, pinAccount, unpinAccount } from '../../../actions/accounts';\nimport { mentionCompose, directCompose } from '../../../actions/compose';\nimport { initMuteModal } from '../../../actions/mutes';\nimport { initBlockModal } from '../../../actions/blocks';\nimport { initReport } from '../../../actions/reports';\nimport { openModal } from '../../../actions/modal';\nimport { blockDomain, unblockDomain } from '../../../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { unfollowModal } from '../../../initial_state';\nimport { List as ImmutableList } from 'immutable';\nvar messages = defineMessages({\n  unfollowConfirm: {\n    \"id\": \"confirmations.unfollow.confirm\",\n    \"defaultMessage\": \"Unfollow\"\n  },\n  blockDomainConfirm: {\n    \"id\": \"confirmations.domain_block.confirm\",\n    \"defaultMessage\": \"Hide entire domain\"\n  }\n});\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var getAccount = makeGetAccount();\n\n  var mapStateToProps = function mapStateToProps(state, _ref) {\n    var accountId = _ref.accountId;\n    return {\n      account: getAccount(state, accountId),\n      domain: state.getIn(['meta', 'domain']),\n      identity_proofs: state.getIn(['identity_proofs', accountId], ImmutableList())\n    };\n  };\n\n  return mapStateToProps;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref2) {\n  var intl = _ref2.intl;\n  return {\n    onFollow(account) {\n      if (account.getIn(['relationship', 'following']) || account.getIn(['relationship', 'requested'])) {\n        if (unfollowModal) {\n          dispatch(openModal('CONFIRM', {\n            message: /*#__PURE__*/React.createElement(FormattedMessage, {\n              id: \"confirmations.unfollow.message\",\n              defaultMessage: \"Are you sure you want to unfollow {name}?\",\n              values: {\n                name: /*#__PURE__*/React.createElement(\"strong\", {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 49,\n                    columnNumber: 149\n                  }\n                }, \"@\", account.get('acct'))\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 20\n              }\n            }),\n            confirm: intl.formatMessage(messages.unfollowConfirm),\n            onConfirm: function onConfirm() {\n              return dispatch(unfollowAccount(account.get('id')));\n            }\n          }));\n        } else {\n          dispatch(unfollowAccount(account.get('id')));\n        }\n      } else {\n        dispatch(followAccount(account.get('id')));\n      }\n    },\n\n    onBlock(account) {\n      if (account.getIn(['relationship', 'blocking'])) {\n        dispatch(unblockAccount(account.get('id')));\n      } else {\n        dispatch(initBlockModal(account));\n      }\n    },\n\n    onMention(account, router) {\n      dispatch(mentionCompose(account, router));\n    },\n\n    onDirect(account, router) {\n      dispatch(directCompose(account, router));\n    },\n\n    onReblogToggle(account) {\n      if (account.getIn(['relationship', 'showing_reblogs'])) {\n        dispatch(followAccount(account.get('id'), {\n          reblogs: false\n        }));\n      } else {\n        dispatch(followAccount(account.get('id'), {\n          reblogs: true\n        }));\n      }\n    },\n\n    onEndorseToggle(account) {\n      if (account.getIn(['relationship', 'endorsed'])) {\n        dispatch(unpinAccount(account.get('id')));\n      } else {\n        dispatch(pinAccount(account.get('id')));\n      }\n    },\n\n    onNotifyToggle(account) {\n      if (account.getIn(['relationship', 'notifying'])) {\n        dispatch(followAccount(account.get('id'), {\n          notify: false\n        }));\n      } else {\n        dispatch(followAccount(account.get('id'), {\n          notify: true\n        }));\n      }\n    },\n\n    onReport(account) {\n      dispatch(initReport(account));\n    },\n\n    onMute(account) {\n      if (account.getIn(['relationship', 'muting'])) {\n        dispatch(unmuteAccount(account.get('id')));\n      } else {\n        dispatch(initMuteModal(account));\n      }\n    },\n\n    onBlockDomain(domain) {\n      dispatch(openModal('CONFIRM', {\n        message: /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"confirmations.domain_block.message\",\n          defaultMessage: \"Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.\",\n          values: {\n            domain: /*#__PURE__*/React.createElement(\"strong\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 390\n              }\n            }, domain)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 16\n          }\n        }),\n        confirm: intl.formatMessage(messages.blockDomainConfirm),\n        onConfirm: function onConfirm() {\n          return dispatch(blockDomain(domain));\n        }\n      }));\n    },\n\n    onUnblockDomain(domain) {\n      dispatch(unblockDomain(domain));\n    },\n\n    onAddToList(account) {\n      dispatch(openModal('LIST_ADDER', {\n        accountId: account.get('id')\n      }));\n    }\n\n  };\n};\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Header));","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/account_timeline/containers/header_container.js"],"names":["React","connect","makeGetAccount","Header","followAccount","unfollowAccount","unblockAccount","unmuteAccount","pinAccount","unpinAccount","mentionCompose","directCompose","initMuteModal","initBlockModal","initReport","openModal","blockDomain","unblockDomain","defineMessages","injectIntl","FormattedMessage","unfollowModal","List","ImmutableList","messages","unfollowConfirm","blockDomainConfirm","makeMapStateToProps","getAccount","mapStateToProps","state","accountId","account","domain","getIn","identity_proofs","mapDispatchToProps","dispatch","intl","onFollow","message","name","get","confirm","formatMessage","onConfirm","onBlock","onMention","router","onDirect","onReblogToggle","reblogs","onEndorseToggle","onNotifyToggle","notify","onReport","onMute","onBlockDomain","onUnblockDomain","onAddToList"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from '../../../selectors';\nimport Header from '../components/header';\nimport {\n  followAccount,\n  unfollowAccount,\n  unblockAccount,\n  unmuteAccount,\n  pinAccount,\n  unpinAccount,\n} from '../../../actions/accounts';\nimport {\n  mentionCompose,\n  directCompose,\n} from '../../../actions/compose';\nimport { initMuteModal } from '../../../actions/mutes';\nimport { initBlockModal } from '../../../actions/blocks';\nimport { initReport } from '../../../actions/reports';\nimport { openModal } from '../../../actions/modal';\nimport { blockDomain, unblockDomain } from '../../../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { unfollowModal } from '../../../initial_state';\nimport { List as ImmutableList } from 'immutable';\n\nconst messages = defineMessages({\n  unfollowConfirm: { id: 'confirmations.unfollow.confirm', defaultMessage: 'Unfollow' },\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Hide entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId }) => ({\n    account: getAccount(state, accountId),\n    domain: state.getIn(['meta', 'domain']),\n    identity_proofs: state.getIn(['identity_proofs', accountId], ImmutableList()),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onFollow (account) {\n    if (account.getIn(['relationship', 'following']) || account.getIn(['relationship', 'requested'])) {\n      if (unfollowModal) {\n        dispatch(openModal('CONFIRM', {\n          message: <FormattedMessage id='confirmations.unfollow.message' defaultMessage='Are you sure you want to unfollow {name}?' values={{ name: <strong>@{account.get('acct')}</strong> }} />,\n          confirm: intl.formatMessage(messages.unfollowConfirm),\n          onConfirm: () => dispatch(unfollowAccount(account.get('id'))),\n        }));\n      } else {\n        dispatch(unfollowAccount(account.get('id')));\n      }\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  },\n\n  onBlock (account) {\n    if (account.getIn(['relationship', 'blocking'])) {\n      dispatch(unblockAccount(account.get('id')));\n    } else {\n      dispatch(initBlockModal(account));\n    }\n  },\n\n  onMention (account, router) {\n    dispatch(mentionCompose(account, router));\n  },\n\n  onDirect (account, router) {\n    dispatch(directCompose(account, router));\n  },\n\n  onReblogToggle (account) {\n    if (account.getIn(['relationship', 'showing_reblogs'])) {\n      dispatch(followAccount(account.get('id'), { reblogs: false }));\n    } else {\n      dispatch(followAccount(account.get('id'), { reblogs: true }));\n    }\n  },\n\n  onEndorseToggle (account) {\n    if (account.getIn(['relationship', 'endorsed'])) {\n      dispatch(unpinAccount(account.get('id')));\n    } else {\n      dispatch(pinAccount(account.get('id')));\n    }\n  },\n\n  onNotifyToggle (account) {\n    if (account.getIn(['relationship', 'notifying'])) {\n      dispatch(followAccount(account.get('id'), { notify: false }));\n    } else {\n      dispatch(followAccount(account.get('id'), { notify: true }));\n    }\n  },\n\n  onReport (account) {\n    dispatch(initReport(account));\n  },\n\n  onMute (account) {\n    if (account.getIn(['relationship', 'muting'])) {\n      dispatch(unmuteAccount(account.get('id')));\n    } else {\n      dispatch(initMuteModal(account));\n    }\n  },\n\n  onBlockDomain (domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n\n  onAddToList(account){\n    dispatch(openModal('LIST_ADDER', {\n      accountId: account.get('id'),\n    }));\n  },\n\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Header));\n"]},"metadata":{"react-intl":{"messages":[{"id":"confirmations.unfollow.confirm","defaultMessage":"Unfollow"},{"id":"confirmations.domain_block.confirm","defaultMessage":"Hide entire domain"},{"id":"confirmations.unfollow.message","defaultMessage":"Are you sure you want to unfollow {name}?"},{"id":"confirmations.domain_block.message","defaultMessage":"Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed."}]}},"sourceType":"module"}