{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/hashtag_timeline/components/column_settings.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Toggle from 'react-toggle';\nimport AsyncSelect from 'react-select/async';\nimport { NonceProvider } from 'react-select';\nimport SettingToggle from '../../notifications/components/setting_toggle';\nvar messages = defineMessages({\n  placeholder: {\n    \"id\": \"hashtag.column_settings.select.placeholder\",\n    \"defaultMessage\": \"Enter hashtags\\u2026\"\n  },\n  noOptions: {\n    \"id\": \"hashtag.column_settings.select.no_options_message\",\n    \"defaultMessage\": \"No suggestions found\"\n  }\n});\n\nvar ColumnSettings = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(ColumnSettings, _React$PureComponent);\n\n  function ColumnSettings() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n    _this.state = {\n      open: _this.hasTags()\n    };\n\n    _this.onSelect = function (mode) {\n      return function (value) {\n        return _this.props.onChange(['tags', mode], value);\n      };\n    };\n\n    _this.onToggle = function () {\n      if (_this.state.open && _this.hasTags()) {\n        _this.props.onChange('tags', {});\n      }\n\n      _this.setState({\n        open: !_this.state.open\n      });\n    };\n\n    _this.noOptionsMessage = function () {\n      return _this.props.intl.formatMessage(messages.noOptions);\n    };\n\n    return _this;\n  }\n\n  var _proto = ColumnSettings.prototype;\n\n  _proto.hasTags = function hasTags() {\n    var _this2 = this;\n\n    return ['all', 'any', 'none'].map(function (mode) {\n      return _this2.tags(mode).length > 0;\n    }).includes(true);\n  };\n\n  _proto.tags = function tags(mode) {\n    var tags = this.props.settings.getIn(['tags', mode]) || [];\n\n    if (tags.toJSON) {\n      return tags.toJSON();\n    } else {\n      return tags;\n    }\n  };\n\n  _proto.modeSelect = function modeSelect(mode) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-settings__row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"column-settings__section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, this.modeLabel(mode)), /*#__PURE__*/React.createElement(NonceProvider, {\n      nonce: document.querySelector('meta[name=style-nonce]').content,\n      cacheKey: \"tags\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AsyncSelect, {\n      isMulti: true,\n      autoFocus: true,\n      value: this.tags(mode),\n      onChange: this.onSelect(mode),\n      loadOptions: this.props.onLoad,\n      className: \"column-select__container\",\n      classNamePrefix: \"column-select\",\n      name: \"tags\",\n      placeholder: this.props.intl.formatMessage(messages.placeholder),\n      noOptionsMessage: this.noOptionsMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  _proto.modeLabel = function modeLabel(mode) {\n    switch (mode) {\n      case 'any':\n        return /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"hashtag.column_settings.tag_mode.any\",\n          defaultMessage: \"Any of these\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 14\n          }\n        });\n\n      case 'all':\n        return /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"hashtag.column_settings.tag_mode.all\",\n          defaultMessage: \"All of these\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 14\n          }\n        });\n\n      case 'none':\n        return /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"hashtag.column_settings.tag_mode.none\",\n          defaultMessage: \"None of these\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 14\n          }\n        });\n\n      default:\n        return '';\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        settings = _this$props.settings,\n        onChange = _this$props.onChange;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-settings__row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"setting-toggle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Toggle, {\n      id: \"hashtag.column_settings.tag_toggle\",\n      onChange: this.onToggle,\n      checked: this.state.open,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"setting-toggle__label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"hashtag.column_settings.tag_toggle\",\n      defaultMessage: \"Include additional tags in this column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    })))), this.state.open && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-settings__hashtags\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, this.modeSelect('any'), this.modeSelect('all'), this.modeSelect('none')), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-settings__row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SettingToggle, {\n      settings: settings,\n      settingPath: ['local'],\n      onChange: onChange,\n      label: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"community.column_settings.local_only\",\n        defaultMessage: \"Local only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 97\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return ColumnSettings;\n}(React.PureComponent), _class2.propTypes = {\n  settings: ImmutablePropTypes.map.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onLoad: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired\n}, _temp)) || _class;\n\nexport { ColumnSettings as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/hashtag_timeline/components/column_settings.js"],"names":["React","PropTypes","ImmutablePropTypes","defineMessages","injectIntl","FormattedMessage","Toggle","AsyncSelect","NonceProvider","SettingToggle","messages","placeholder","noOptions","ColumnSettings","state","open","hasTags","onSelect","mode","value","props","onChange","onToggle","setState","noOptionsMessage","intl","formatMessage","map","tags","length","includes","settings","getIn","toJSON","modeSelect","modeLabel","document","querySelector","content","onLoad","render","PureComponent","propTypes","isRequired","func","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Toggle from 'react-toggle';\nimport AsyncSelect from 'react-select/async';\nimport { NonceProvider } from 'react-select';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nconst messages = defineMessages({\n  placeholder: { id: 'hashtag.column_settings.select.placeholder', defaultMessage: 'Enter hashtags…' },\n  noOptions: { id: 'hashtag.column_settings.select.no_options_message', defaultMessage: 'No suggestions found' },\n});\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onLoad: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    open: this.hasTags(),\n  };\n\n  hasTags () {\n    return ['all', 'any', 'none'].map(mode => this.tags(mode).length > 0).includes(true);\n  }\n\n  tags (mode) {\n    let tags = this.props.settings.getIn(['tags', mode]) || [];\n\n    if (tags.toJSON) {\n      return tags.toJSON();\n    } else {\n      return tags;\n    }\n  };\n\n  onSelect = mode => value => this.props.onChange(['tags', mode], value);\n\n  onToggle = () => {\n    if (this.state.open && this.hasTags()) {\n      this.props.onChange('tags', {});\n    }\n\n    this.setState({ open: !this.state.open });\n  };\n\n  noOptionsMessage = () => this.props.intl.formatMessage(messages.noOptions);\n\n  modeSelect (mode) {\n    return (\n      <div className='column-settings__row'>\n        <span className='column-settings__section'>\n          {this.modeLabel(mode)}\n        </span>\n\n        <NonceProvider nonce={document.querySelector('meta[name=style-nonce]').content} cacheKey='tags'>\n          <AsyncSelect\n            isMulti\n            autoFocus\n            value={this.tags(mode)}\n            onChange={this.onSelect(mode)}\n            loadOptions={this.props.onLoad}\n            className='column-select__container'\n            classNamePrefix='column-select'\n            name='tags'\n            placeholder={this.props.intl.formatMessage(messages.placeholder)}\n            noOptionsMessage={this.noOptionsMessage}\n          />\n        </NonceProvider>\n      </div>\n    );\n  }\n\n  modeLabel (mode) {\n    switch(mode) {\n    case 'any':\n      return <FormattedMessage id='hashtag.column_settings.tag_mode.any' defaultMessage='Any of these' />;\n    case 'all':\n      return <FormattedMessage id='hashtag.column_settings.tag_mode.all' defaultMessage='All of these' />;\n    case 'none':\n      return <FormattedMessage id='hashtag.column_settings.tag_mode.none' defaultMessage='None of these' />;\n    default:\n      return '';\n    }\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <div className='setting-toggle'>\n            <Toggle id='hashtag.column_settings.tag_toggle' onChange={this.onToggle} checked={this.state.open} />\n\n            <span className='setting-toggle__label'>\n              <FormattedMessage id='hashtag.column_settings.tag_toggle' defaultMessage='Include additional tags in this column' />\n            </span>\n          </div>\n        </div>\n\n        {this.state.open && (\n          <div className='column-settings__hashtags'>\n            {this.modeSelect('any')}\n            {this.modeSelect('all')}\n            {this.modeSelect('none')}\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['local']} onChange={onChange} label={<FormattedMessage id='community.column_settings.local_only' defaultMessage='Local only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"hashtag.column_settings.select.placeholder","defaultMessage":"Enter hashtags…"},{"id":"hashtag.column_settings.select.no_options_message","defaultMessage":"No suggestions found"},{"id":"hashtag.column_settings.tag_mode.any","defaultMessage":"Any of these"},{"id":"hashtag.column_settings.tag_mode.all","defaultMessage":"All of these"},{"id":"hashtag.column_settings.tag_mode.none","defaultMessage":"None of these"},{"id":"hashtag.column_settings.tag_toggle","defaultMessage":"Include additional tags in this column"},{"id":"community.column_settings.local_only","defaultMessage":"Local only"}]}},"sourceType":"module"}