{"ast":null,"code":"import { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport { CONVERSATIONS_MOUNT, CONVERSATIONS_UNMOUNT, CONVERSATIONS_FETCH_REQUEST, CONVERSATIONS_FETCH_SUCCESS, CONVERSATIONS_FETCH_FAIL, CONVERSATIONS_UPDATE, CONVERSATIONS_READ, CONVERSATIONS_DELETE_SUCCESS } from '../actions/conversations';\nimport { ACCOUNT_BLOCK_SUCCESS, ACCOUNT_MUTE_SUCCESS } from 'mastodon/actions/accounts';\nimport { DOMAIN_BLOCK_SUCCESS } from 'mastodon/actions/domain_blocks';\nimport compareId from '../compare_id';\nvar initialState = ImmutableMap({\n  items: ImmutableList(),\n  isLoading: false,\n  hasMore: true,\n  mounted: false\n});\n\nvar conversationToMap = function conversationToMap(item) {\n  return ImmutableMap({\n    id: item.id,\n    unread: item.unread,\n    accounts: ImmutableList(item.accounts.map(function (a) {\n      return a.id;\n    })),\n    last_status: item.last_status ? item.last_status.id : null\n  });\n};\n\nvar updateConversation = function updateConversation(state, item) {\n  return state.update('items', function (list) {\n    var index = list.findIndex(function (x) {\n      return x.get('id') === item.id;\n    });\n    var newItem = conversationToMap(item);\n\n    if (index === -1) {\n      return list.unshift(newItem);\n    } else {\n      return list.set(index, newItem);\n    }\n  });\n};\n\nvar expandNormalizedConversations = function expandNormalizedConversations(state, conversations, next, isLoadingRecent) {\n  var items = ImmutableList(conversations.map(conversationToMap));\n  return state.withMutations(function (mutable) {\n    if (!items.isEmpty()) {\n      mutable.update('items', function (list) {\n        list = list.map(function (oldItem) {\n          var newItemIndex = items.findIndex(function (x) {\n            return x.get('id') === oldItem.get('id');\n          });\n\n          if (newItemIndex === -1) {\n            return oldItem;\n          }\n\n          var newItem = items.get(newItemIndex);\n          items = items.delete(newItemIndex);\n          return newItem;\n        });\n        list = list.concat(items);\n        return list.sortBy(function (x) {\n          return x.get('last_status');\n        }, function (a, b) {\n          if (a === null || b === null) {\n            return -1;\n          }\n\n          return compareId(a, b) * -1;\n        });\n      });\n    }\n\n    if (!next && !isLoadingRecent) {\n      mutable.set('hasMore', false);\n    }\n\n    mutable.set('isLoading', false);\n  });\n};\n\nvar filterConversations = function filterConversations(state, accountIds) {\n  return state.update('items', function (list) {\n    return list.filterNot(function (item) {\n      return item.get('accounts').some(function (accountId) {\n        return accountIds.includes(accountId);\n      });\n    });\n  });\n};\n\nexport default function conversations(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case CONVERSATIONS_FETCH_REQUEST:\n      return state.set('isLoading', true);\n\n    case CONVERSATIONS_FETCH_FAIL:\n      return state.set('isLoading', false);\n\n    case CONVERSATIONS_FETCH_SUCCESS:\n      return expandNormalizedConversations(state, action.conversations, action.next, action.isLoadingRecent);\n\n    case CONVERSATIONS_UPDATE:\n      return updateConversation(state, action.conversation);\n\n    case CONVERSATIONS_MOUNT:\n      return state.update('mounted', function (count) {\n        return count + 1;\n      });\n\n    case CONVERSATIONS_UNMOUNT:\n      return state.update('mounted', function (count) {\n        return count - 1;\n      });\n\n    case CONVERSATIONS_READ:\n      return state.update('items', function (list) {\n        return list.map(function (item) {\n          if (item.get('id') === action.id) {\n            return item.set('unread', false);\n          }\n\n          return item;\n        });\n      });\n\n    case ACCOUNT_BLOCK_SUCCESS:\n    case ACCOUNT_MUTE_SUCCESS:\n      return filterConversations(state, [action.relationship.id]);\n\n    case DOMAIN_BLOCK_SUCCESS:\n      return filterConversations(state, action.accounts);\n\n    case CONVERSATIONS_DELETE_SUCCESS:\n      return state.update('items', function (list) {\n        return list.filterNot(function (item) {\n          return item.get('id') === action.id;\n        });\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/conversations.js"],"names":["Map","ImmutableMap","List","ImmutableList","CONVERSATIONS_MOUNT","CONVERSATIONS_UNMOUNT","CONVERSATIONS_FETCH_REQUEST","CONVERSATIONS_FETCH_SUCCESS","CONVERSATIONS_FETCH_FAIL","CONVERSATIONS_UPDATE","CONVERSATIONS_READ","CONVERSATIONS_DELETE_SUCCESS","ACCOUNT_BLOCK_SUCCESS","ACCOUNT_MUTE_SUCCESS","DOMAIN_BLOCK_SUCCESS","compareId","initialState","items","isLoading","hasMore","mounted","conversationToMap","item","id","unread","accounts","map","a","last_status","updateConversation","state","update","list","index","findIndex","x","get","newItem","unshift","set","expandNormalizedConversations","conversations","next","isLoadingRecent","withMutations","mutable","isEmpty","oldItem","newItemIndex","delete","concat","sortBy","b","filterConversations","accountIds","filterNot","some","accountId","includes","action","type","conversation","count","relationship"],"mappings":"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","sourcesContent":["import { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport {\n  CONVERSATIONS_MOUNT,\n  CONVERSATIONS_UNMOUNT,\n  CONVERSATIONS_FETCH_REQUEST,\n  CONVERSATIONS_FETCH_SUCCESS,\n  CONVERSATIONS_FETCH_FAIL,\n  CONVERSATIONS_UPDATE,\n  CONVERSATIONS_READ,\n  CONVERSATIONS_DELETE_SUCCESS,\n} from '../actions/conversations';\nimport { ACCOUNT_BLOCK_SUCCESS, ACCOUNT_MUTE_SUCCESS } from 'mastodon/actions/accounts';\nimport { DOMAIN_BLOCK_SUCCESS } from 'mastodon/actions/domain_blocks';\nimport compareId from '../compare_id';\n\nconst initialState = ImmutableMap({\n  items: ImmutableList(),\n  isLoading: false,\n  hasMore: true,\n  mounted: false,\n});\n\nconst conversationToMap = item => ImmutableMap({\n  id: item.id,\n  unread: item.unread,\n  accounts: ImmutableList(item.accounts.map(a => a.id)),\n  last_status: item.last_status ? item.last_status.id : null,\n});\n\nconst updateConversation = (state, item) => state.update('items', list => {\n  const index   = list.findIndex(x => x.get('id') === item.id);\n  const newItem = conversationToMap(item);\n\n  if (index === -1) {\n    return list.unshift(newItem);\n  } else {\n    return list.set(index, newItem);\n  }\n});\n\nconst expandNormalizedConversations = (state, conversations, next, isLoadingRecent) => {\n  let items = ImmutableList(conversations.map(conversationToMap));\n\n  return state.withMutations(mutable => {\n    if (!items.isEmpty()) {\n      mutable.update('items', list => {\n        list = list.map(oldItem => {\n          const newItemIndex = items.findIndex(x => x.get('id') === oldItem.get('id'));\n\n          if (newItemIndex === -1) {\n            return oldItem;\n          }\n\n          const newItem = items.get(newItemIndex);\n          items = items.delete(newItemIndex);\n\n          return newItem;\n        });\n\n        list = list.concat(items);\n\n        return list.sortBy(x => x.get('last_status'), (a, b) => {\n          if(a === null || b === null) {\n            return -1;\n          }\n\n          return compareId(a, b) * -1;\n        });\n      });\n    }\n\n    if (!next && !isLoadingRecent) {\n      mutable.set('hasMore', false);\n    }\n\n    mutable.set('isLoading', false);\n  });\n};\n\nconst filterConversations = (state, accountIds) => {\n  return state.update('items', list => list.filterNot(item => item.get('accounts').some(accountId => accountIds.includes(accountId))));\n};\n\nexport default function conversations(state = initialState, action) {\n  switch (action.type) {\n  case CONVERSATIONS_FETCH_REQUEST:\n    return state.set('isLoading', true);\n  case CONVERSATIONS_FETCH_FAIL:\n    return state.set('isLoading', false);\n  case CONVERSATIONS_FETCH_SUCCESS:\n    return expandNormalizedConversations(state, action.conversations, action.next, action.isLoadingRecent);\n  case CONVERSATIONS_UPDATE:\n    return updateConversation(state, action.conversation);\n  case CONVERSATIONS_MOUNT:\n    return state.update('mounted', count => count + 1);\n  case CONVERSATIONS_UNMOUNT:\n    return state.update('mounted', count => count - 1);\n  case CONVERSATIONS_READ:\n    return state.update('items', list => list.map(item => {\n      if (item.get('id') === action.id) {\n        return item.set('unread', false);\n      }\n\n      return item;\n    }));\n  case ACCOUNT_BLOCK_SUCCESS:\n  case ACCOUNT_MUTE_SUCCESS:\n    return filterConversations(state, [action.relationship.id]);\n  case DOMAIN_BLOCK_SUCCESS:\n    return filterConversations(state, action.accounts);\n  case CONVERSATIONS_DELETE_SUCCESS:\n    return state.update('items', list => list.filterNot(item => item.get('id') === action.id));\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}