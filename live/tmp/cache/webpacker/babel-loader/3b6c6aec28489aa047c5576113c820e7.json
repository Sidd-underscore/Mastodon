{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/components/poll.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport Motion from 'mastodon/features/ui/util/optional_motion';\nimport spring from 'react-motion/lib/spring';\nimport escapeTextContentForBrowser from 'escape-html';\nimport emojify from 'mastodon/features/emoji/emoji';\nimport RelativeTimestamp from './relative_timestamp';\nimport Icon from 'mastodon/components/icon';\nvar messages = defineMessages({\n  closed: {\n    \"id\": \"poll.closed\",\n    \"defaultMessage\": \"Closed\"\n  },\n  voted: {\n    \"id\": \"poll.voted\",\n    \"defaultMessage\": \"You voted for this answer\"\n  }\n});\n\nvar makeEmojiMap = function makeEmojiMap(record) {\n  return record.get('emojis').reduce(function (obj, emoji) {\n    obj[\":\" + emoji.get('shortcode') + \":\"] = emoji.toJS();\n    return obj;\n  }, {});\n};\n\nvar Poll = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(Poll, _ImmutablePureCompone);\n\n  function Poll() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n    _this.state = {\n      selected: {},\n      expired: null\n    };\n\n    _this._toggleOption = function (value) {\n      if (_this.props.poll.get('multiple')) {\n        var tmp = _extends({}, _this.state.selected);\n\n        if (tmp[value]) {\n          delete tmp[value];\n        } else {\n          tmp[value] = true;\n        }\n\n        _this.setState({\n          selected: tmp\n        });\n      } else {\n        var _tmp = {};\n        _tmp[value] = true;\n\n        _this.setState({\n          selected: _tmp\n        });\n      }\n    };\n\n    _this.handleOptionChange = function (_ref) {\n      var value = _ref.target.value;\n\n      _this._toggleOption(value);\n    };\n\n    _this.handleOptionKeyPress = function (e) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        _this._toggleOption(e.target.getAttribute('data-index'));\n\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    };\n\n    _this.handleVote = function () {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.props.onVote(Object.keys(_this.state.selected));\n    };\n\n    _this.handleRefresh = function () {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.props.refresh();\n    };\n\n    return _this;\n  }\n\n  Poll.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    var poll = props.poll,\n        intl = props.intl;\n    var expires_at = poll.get('expires_at');\n    var expired = poll.get('expired') || expires_at !== null && new Date(expires_at).getTime() < intl.now();\n    return expired === state.expired ? null : {\n      expired\n    };\n  };\n\n  var _proto = Poll.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._setupTimer();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this._setupTimer();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this._timer);\n  };\n\n  _proto._setupTimer = function _setupTimer() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        poll = _this$props.poll,\n        intl = _this$props.intl;\n    clearTimeout(this._timer);\n\n    if (!this.state.expired) {\n      var delay = new Date(poll.get('expires_at')).getTime() - intl.now();\n      this._timer = setTimeout(function () {\n        _this2.setState({\n          expired: true\n        });\n      }, delay);\n    }\n  };\n\n  _proto.renderOption = function renderOption(option, optionIndex, showResults) {\n    var _this3 = this;\n\n    var _this$props2 = this.props,\n        poll = _this$props2.poll,\n        disabled = _this$props2.disabled,\n        intl = _this$props2.intl;\n    var pollVotesCount = poll.get('voters_count') || poll.get('votes_count');\n    var percent = pollVotesCount === 0 ? 0 : option.get('votes_count') / pollVotesCount * 100;\n    var leading = poll.get('options').filterNot(function (other) {\n      return other.get('title') === option.get('title');\n    }).every(function (other) {\n      return option.get('votes_count') >= other.get('votes_count');\n    });\n    var active = !!this.state.selected[\"\" + optionIndex];\n    var voted = option.get('voted') || poll.get('own_votes') && poll.get('own_votes').includes(optionIndex);\n    var titleEmojified = option.get('title_emojified');\n\n    if (!titleEmojified) {\n      var emojiMap = makeEmojiMap(poll);\n      titleEmojified = emojify(escapeTextContentForBrowser(option.get('title')), emojiMap);\n    }\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: option.get('title'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: classNames('poll__option', {\n        selectable: !showResults\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"vote-options\",\n      type: poll.get('multiple') ? 'checkbox' : 'radio',\n      value: optionIndex,\n      checked: active,\n      onChange: this.handleOptionChange,\n      disabled: disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }), !showResults && /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames('poll__input', {\n        checkbox: poll.get('multiple'),\n        active\n      }),\n      tabIndex: \"0\",\n      role: poll.get('multiple') ? 'checkbox' : 'radio',\n      onKeyPress: this.handleOptionKeyPress,\n      \"aria-checked\": active,\n      \"aria-label\": option.get('title'),\n      \"data-index\": optionIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }), showResults && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"poll__number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 27\n      }\n    }, Math.round(percent), \"%\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"poll__option__text translate\",\n      dangerouslySetInnerHTML: {\n        __html: titleEmojified\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }), !!voted && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"poll__voted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"check\",\n      className: \"poll__voted__mark\",\n      title: intl.formatMessage(messages.voted),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }))), showResults && /*#__PURE__*/React.createElement(Motion, {\n      defaultStyle: {\n        width: 0\n      },\n      style: {\n        width: spring(percent, {\n          stiffness: 180,\n          damping: 12\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, function (_ref2) {\n      var width = _ref2.width;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames('poll__chart', {\n          leading\n        }),\n        style: {\n          width: width + \"%\"\n        },\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }\n      });\n    }));\n  };\n\n  _proto.render = function render() {\n    var _this4 = this;\n\n    var _this$props3 = this.props,\n        poll = _this$props3.poll,\n        intl = _this$props3.intl;\n    var expired = this.state.expired;\n\n    if (!poll) {\n      return null;\n    }\n\n    var timeRemaining = expired ? intl.formatMessage(messages.closed) : /*#__PURE__*/React.createElement(RelativeTimestamp, {\n      timestamp: poll.get('expires_at'),\n      futureDate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 75\n      }\n    });\n    var showResults = poll.get('voted') || expired;\n    var disabled = this.props.disabled || Object.entries(this.state.selected).every(function (item) {\n      return !item;\n    });\n    var votesCount = null;\n\n    if (poll.get('voters_count') !== null && poll.get('voters_count') !== undefined) {\n      votesCount = /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"poll.total_people\",\n        defaultMessage: \"{count, plural, one {# person} other {# people}}\",\n        values: {\n          count: poll.get('voters_count')\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 20\n        }\n      });\n    } else {\n      votesCount = /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"poll.total_votes\",\n        defaultMessage: \"{count, plural, one {# vote} other {# votes}}\",\n        values: {\n          count: poll.get('votes_count')\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"poll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }, poll.get('options').map(function (option, i) {\n      return _this4.renderOption(option, i, showResults);\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"poll__footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, !showResults && /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button button-secondary\",\n      disabled: disabled,\n      onClick: this.handleVote,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"poll.vote\",\n      defaultMessage: \"Vote\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 118\n      }\n    })), showResults && !this.props.disabled && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 51\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"poll__link\",\n      onClick: this.handleRefresh,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"poll.refresh\",\n      defaultMessage: \"Refresh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 117\n      }\n    })), \" \\xB7 \"), votesCount, poll.get('expires_at') && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 38\n      }\n    }, \" \\xB7 \", timeRemaining)));\n  };\n\n  return Poll;\n}(ImmutablePureComponent), _class2.propTypes = {\n  poll: ImmutablePropTypes.map,\n  intl: PropTypes.object.isRequired,\n  disabled: PropTypes.bool,\n  refresh: PropTypes.func,\n  onVote: PropTypes.func\n}, _temp)) || _class;\n\nexport { Poll as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/components/poll.js"],"names":["React","PropTypes","ImmutablePropTypes","ImmutablePureComponent","defineMessages","injectIntl","FormattedMessage","classNames","Motion","spring","escapeTextContentForBrowser","emojify","RelativeTimestamp","Icon","messages","closed","voted","makeEmojiMap","record","get","reduce","obj","emoji","toJS","Poll","state","selected","expired","_toggleOption","value","props","poll","tmp","setState","handleOptionChange","target","handleOptionKeyPress","e","key","getAttribute","stopPropagation","preventDefault","handleVote","disabled","onVote","Object","keys","handleRefresh","refresh","getDerivedStateFromProps","intl","expires_at","Date","getTime","now","componentDidMount","_setupTimer","componentDidUpdate","componentWillUnmount","clearTimeout","_timer","delay","setTimeout","renderOption","option","optionIndex","showResults","pollVotesCount","percent","leading","filterNot","other","every","active","includes","titleEmojified","emojiMap","selectable","checkbox","Math","round","__html","formatMessage","width","stiffness","damping","render","timeRemaining","entries","item","votesCount","undefined","count","map","i","propTypes","object","isRequired","bool","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport Motion from 'mastodon/features/ui/util/optional_motion';\nimport spring from 'react-motion/lib/spring';\nimport escapeTextContentForBrowser from 'escape-html';\nimport emojify from 'mastodon/features/emoji/emoji';\nimport RelativeTimestamp from './relative_timestamp';\nimport Icon from 'mastodon/components/icon';\n\nconst messages = defineMessages({\n  closed: { id: 'poll.closed', defaultMessage: 'Closed' },\n  voted: { id: 'poll.voted', defaultMessage: 'You voted for this answer', description: 'Tooltip of the \"voted\" checkmark in polls' },\n});\n\nconst makeEmojiMap = record => record.get('emojis').reduce((obj, emoji) => {\n  obj[`:${emoji.get('shortcode')}:`] = emoji.toJS();\n  return obj;\n}, {});\n\nexport default @injectIntl\nclass Poll extends ImmutablePureComponent {\n\n  static propTypes = {\n    poll: ImmutablePropTypes.map,\n    intl: PropTypes.object.isRequired,\n    disabled: PropTypes.bool,\n    refresh: PropTypes.func,\n    onVote: PropTypes.func,\n  };\n\n  state = {\n    selected: {},\n    expired: null,\n  };\n\n  static getDerivedStateFromProps (props, state) {\n    const { poll, intl } = props;\n    const expires_at = poll.get('expires_at');\n    const expired = poll.get('expired') || expires_at !== null && (new Date(expires_at)).getTime() < intl.now();\n    return (expired === state.expired) ? null : { expired };\n  }\n\n  componentDidMount () {\n    this._setupTimer();\n  }\n\n  componentDidUpdate () {\n    this._setupTimer();\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this._timer);\n  }\n\n  _setupTimer () {\n    const { poll, intl } = this.props;\n    clearTimeout(this._timer);\n    if (!this.state.expired) {\n      const delay = (new Date(poll.get('expires_at'))).getTime() - intl.now();\n      this._timer = setTimeout(() => {\n        this.setState({ expired: true });\n      }, delay);\n    }\n  }\n\n  _toggleOption = value => {\n    if (this.props.poll.get('multiple')) {\n      const tmp = { ...this.state.selected };\n      if (tmp[value]) {\n        delete tmp[value];\n      } else {\n        tmp[value] = true;\n      }\n      this.setState({ selected: tmp });\n    } else {\n      const tmp = {};\n      tmp[value] = true;\n      this.setState({ selected: tmp });\n    }\n  }\n\n  handleOptionChange = ({ target: { value } }) => {\n    this._toggleOption(value);\n  };\n\n  handleOptionKeyPress = (e) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      this._toggleOption(e.target.getAttribute('data-index'));\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n\n  handleVote = () => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.props.onVote(Object.keys(this.state.selected));\n  };\n\n  handleRefresh = () => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.props.refresh();\n  };\n\n  renderOption (option, optionIndex, showResults) {\n    const { poll, disabled, intl } = this.props;\n    const pollVotesCount  = poll.get('voters_count') || poll.get('votes_count');\n    const percent         = pollVotesCount === 0 ? 0 : (option.get('votes_count') / pollVotesCount) * 100;\n    const leading         = poll.get('options').filterNot(other => other.get('title') === option.get('title')).every(other => option.get('votes_count') >= other.get('votes_count'));\n    const active          = !!this.state.selected[`${optionIndex}`];\n    const voted           = option.get('voted') || (poll.get('own_votes') && poll.get('own_votes').includes(optionIndex));\n\n    let titleEmojified = option.get('title_emojified');\n    if (!titleEmojified) {\n      const emojiMap = makeEmojiMap(poll);\n      titleEmojified = emojify(escapeTextContentForBrowser(option.get('title')), emojiMap);\n    }\n\n    return (\n      <li key={option.get('title')}>\n        <label className={classNames('poll__option', { selectable: !showResults })}>\n          <input\n            name='vote-options'\n            type={poll.get('multiple') ? 'checkbox' : 'radio'}\n            value={optionIndex}\n            checked={active}\n            onChange={this.handleOptionChange}\n            disabled={disabled}\n          />\n\n          {!showResults && (\n            <span\n              className={classNames('poll__input', { checkbox: poll.get('multiple'), active })}\n              tabIndex='0'\n              role={poll.get('multiple') ? 'checkbox' : 'radio'}\n              onKeyPress={this.handleOptionKeyPress}\n              aria-checked={active}\n              aria-label={option.get('title')}\n              data-index={optionIndex}\n            />\n          )}\n          {showResults && <span className='poll__number'>\n            {Math.round(percent)}%\n          </span>}\n\n          <span\n            className='poll__option__text translate'\n            dangerouslySetInnerHTML={{ __html: titleEmojified }}\n          />\n\n          {!!voted && <span className='poll__voted'>\n            <Icon id='check' className='poll__voted__mark' title={intl.formatMessage(messages.voted)} />\n          </span>}\n        </label>\n\n        {showResults && (\n          <Motion defaultStyle={{ width: 0 }} style={{ width: spring(percent, { stiffness: 180, damping: 12 }) }}>\n            {({ width }) =>\n              <span className={classNames('poll__chart', { leading })} style={{ width: `${width}%` }} />\n            }\n          </Motion>\n        )}\n      </li>\n    );\n  }\n\n  render () {\n    const { poll, intl } = this.props;\n    const { expired } = this.state;\n\n    if (!poll) {\n      return null;\n    }\n\n    const timeRemaining = expired ? intl.formatMessage(messages.closed) : <RelativeTimestamp timestamp={poll.get('expires_at')} futureDate />;\n    const showResults   = poll.get('voted') || expired;\n    const disabled      = this.props.disabled || Object.entries(this.state.selected).every(item => !item);\n\n    let votesCount = null;\n\n    if (poll.get('voters_count') !== null && poll.get('voters_count') !== undefined) {\n      votesCount = <FormattedMessage id='poll.total_people' defaultMessage='{count, plural, one {# person} other {# people}}' values={{ count: poll.get('voters_count') }} />;\n    } else {\n      votesCount = <FormattedMessage id='poll.total_votes' defaultMessage='{count, plural, one {# vote} other {# votes}}' values={{ count: poll.get('votes_count') }} />;\n    }\n\n    return (\n      <div className='poll'>\n        <ul>\n          {poll.get('options').map((option, i) => this.renderOption(option, i, showResults))}\n        </ul>\n\n        <div className='poll__footer'>\n          {!showResults && <button className='button button-secondary' disabled={disabled} onClick={this.handleVote}><FormattedMessage id='poll.vote' defaultMessage='Vote' /></button>}\n          {showResults && !this.props.disabled && <span><button className='poll__link' onClick={this.handleRefresh}><FormattedMessage id='poll.refresh' defaultMessage='Refresh' /></button> · </span>}\n          {votesCount}\n          {poll.get('expires_at') && <span> · {timeRemaining}</span>}\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"poll.closed","defaultMessage":"Closed"},{"id":"poll.voted","description":"Tooltip of the \"voted\" checkmark in polls","defaultMessage":"You voted for this answer"},{"id":"poll.total_people","defaultMessage":"{count, plural, one {# person} other {# people}}"},{"id":"poll.total_votes","defaultMessage":"{count, plural, one {# vote} other {# votes}}"},{"id":"poll.vote","defaultMessage":"Vote"},{"id":"poll.refresh","defaultMessage":"Refresh"}]}},"sourceType":"module"}