{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/containers/domain_container.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Domain from '../components/domain';\nimport { openModal } from '../actions/modal';\nvar messages = defineMessages({\n  blockDomainConfirm: {\n    \"id\": \"confirmations.domain_block.confirm\",\n    \"defaultMessage\": \"Block entire domain\"\n  }\n});\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var mapStateToProps = function mapStateToProps() {\n    return {};\n  };\n\n  return mapStateToProps;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {\n  var intl = _ref.intl;\n  return {\n    onBlockDomain(domain) {\n      dispatch(openModal('CONFIRM', {\n        message: /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"confirmations.domain_block.message\",\n          defaultMessage: \"Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.\",\n          values: {\n            domain: /*#__PURE__*/React.createElement(\"strong\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 252\n              }\n            }, domain)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 16\n          }\n        }),\n        confirm: intl.formatMessage(messages.blockDomainConfirm),\n        onConfirm: function onConfirm() {\n          return dispatch(blockDomain(domain));\n        }\n      }));\n    },\n\n    onUnblockDomain(domain) {\n      dispatch(unblockDomain(domain));\n    }\n\n  };\n};\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/containers/domain_container.js"],"names":["React","connect","blockDomain","unblockDomain","defineMessages","injectIntl","FormattedMessage","Domain","openModal","messages","blockDomainConfirm","makeMapStateToProps","mapStateToProps","mapDispatchToProps","dispatch","intl","onBlockDomain","domain","message","confirm","formatMessage","onConfirm","onUnblockDomain"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,0BAA3C;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,gBAArC,QAA6D,YAA7D;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,IAAMC,QAAQ,GAAGL,cAAc,CAAC;AAC9BM,EAAAA,kBAAkB;AAAA;AAAA;AAAA;AADY,CAAD,CAA/B;;AAIA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,MAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,WAAO,EAAP;AAAA,GAAxB;;AAEA,SAAOA,eAAP;AACD,CAJD;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,MAAaC,IAAb,QAAaA,IAAb;AAAA,SAAyB;AAClDC,IAAAA,aAAa,CAAEC,MAAF,EAAU;AACrBH,MAAAA,QAAQ,CAACN,SAAS,CAAC,SAAD,EAAY;AAC5BU,QAAAA,OAAO,eAAE,oBAAC,gBAAD;AAAkB,UAAA,EAAE,EAAC,oCAArB;AAA0D,UAAA,cAAc,EAAC,gJAAzE;AAA0N,UAAA,MAAM,EAAE;AAAED,YAAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAASA,MAAT;AAAV,WAAlO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADmB;AAE5BE,QAAAA,OAAO,EAAEJ,IAAI,CAACK,aAAL,CAAmBX,QAAQ,CAACC,kBAA5B,CAFmB;AAG5BW,QAAAA,SAAS,EAAE;AAAA,iBAAMP,QAAQ,CAACZ,WAAW,CAACe,MAAD,CAAZ,CAAd;AAAA;AAHiB,OAAZ,CAAV,CAAR;AAKD,KAPiD;;AASlDK,IAAAA,eAAe,CAAEL,MAAF,EAAU;AACvBH,MAAAA,QAAQ,CAACX,aAAa,CAACc,MAAD,CAAd,CAAR;AACD;;AAXiD,GAAzB;AAAA,CAA3B;;AAcA,eAAeZ,UAAU,CAACJ,OAAO,CAACU,mBAAD,EAAsBE,kBAAtB,CAAP,CAAiDN,MAAjD,CAAD,CAAzB","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Domain from '../components/domain';\nimport { openModal } from '../actions/modal';\n\nconst messages = defineMessages({\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Block entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const mapStateToProps = () => ({});\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onBlockDomain (domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));\n"]},"metadata":{"react-intl":{"messages":[{"id":"confirmations.domain_block.confirm","defaultMessage":"Block entire domain"},{"id":"confirmations.domain_block.message","defaultMessage":"Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable."}]}},"sourceType":"module"}