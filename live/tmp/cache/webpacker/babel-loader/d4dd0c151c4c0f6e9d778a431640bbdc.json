{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/components/embed_modal.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport api from 'mastodon/api';\nimport IconButton from 'mastodon/components/icon_button';\nvar messages = defineMessages({\n  close: {\n    \"id\": \"lightbox.close\",\n    \"defaultMessage\": \"Close\"\n  }\n});\n\nvar EmbedModal = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(EmbedModal, _ImmutablePureCompone);\n\n  function EmbedModal() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n    _this.state = {\n      loading: false,\n      oembed: null\n    };\n\n    _this.setIframeRef = function (c) {\n      _this.iframe = c;\n    };\n\n    _this.handleTextareaClick = function (e) {\n      e.target.select();\n    };\n\n    return _this;\n  }\n\n  var _proto = EmbedModal.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var url = this.props.url;\n    this.setState({\n      loading: true\n    });\n    api().post('/api/web/embed', {\n      url\n    }).then(function (res) {\n      _this2.setState({\n        loading: false,\n        oembed: res.data\n      });\n\n      var iframeDocument = _this2.iframe.contentWindow.document;\n      iframeDocument.open();\n      iframeDocument.write(res.data.html);\n      iframeDocument.close();\n      iframeDocument.body.style.margin = 0;\n      _this2.iframe.width = iframeDocument.body.scrollWidth;\n      _this2.iframe.height = iframeDocument.body.scrollHeight;\n    }).catch(function (error) {\n      _this2.props.onError(error);\n    });\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        intl = _this$props.intl,\n        onClose = _this$props.onClose;\n    var oembed = this.state.oembed;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-root__modal report-modal embed-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"report-modal__target\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      className: \"media-modal__close\",\n      title: intl.formatMessage(messages.close),\n      icon: \"times\",\n      onClick: onClose,\n      size: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"status.embed\",\n      defaultMessage: \"Embed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"report-modal__container embed-modal__container\",\n      style: {\n        display: 'block'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"hint\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"embed.instructions\",\n      defaultMessage: \"Embed this status on your website by copying the code below.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"embed-modal__html\",\n      readOnly: true,\n      value: oembed && oembed.html || '',\n      onClick: this.handleTextareaClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"hint\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"embed.preview\",\n      defaultMessage: \"Here is what it will look like:\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"iframe\", {\n      className: \"embed-modal__iframe\",\n      frameBorder: \"0\",\n      ref: this.setIframeRef,\n      sandbox: \"allow-same-origin\",\n      title: \"preview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return EmbedModal;\n}(ImmutablePureComponent), _class2.propTypes = {\n  url: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onError: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired\n}, _temp)) || _class;\n\nexport { EmbedModal as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/components/embed_modal.js"],"names":["React","PropTypes","ImmutablePureComponent","defineMessages","FormattedMessage","injectIntl","api","IconButton","messages","close","EmbedModal","state","loading","oembed","setIframeRef","c","iframe","handleTextareaClick","e","target","select","componentDidMount","url","props","setState","post","then","res","data","iframeDocument","contentWindow","document","open","write","html","body","style","margin","width","scrollWidth","height","scrollHeight","catch","error","onError","render","intl","onClose","formatMessage","display","propTypes","string","isRequired","func","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport api from 'mastodon/api';\nimport IconButton from 'mastodon/components/icon_button';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nexport default @injectIntl\nclass EmbedModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    url: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onError: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  }\n\n  state = {\n    loading: false,\n    oembed: null,\n  };\n\n  componentDidMount () {\n    const { url } = this.props;\n\n    this.setState({ loading: true });\n\n    api().post('/api/web/embed', { url }).then(res => {\n      this.setState({ loading: false, oembed: res.data });\n\n      const iframeDocument = this.iframe.contentWindow.document;\n\n      iframeDocument.open();\n      iframeDocument.write(res.data.html);\n      iframeDocument.close();\n\n      iframeDocument.body.style.margin = 0;\n      this.iframe.width  = iframeDocument.body.scrollWidth;\n      this.iframe.height = iframeDocument.body.scrollHeight;\n    }).catch(error => {\n      this.props.onError(error);\n    });\n  }\n\n  setIframeRef = c =>  {\n    this.iframe = c;\n  }\n\n  handleTextareaClick = (e) => {\n    e.target.select();\n  }\n\n  render () {\n    const { intl, onClose } = this.props;\n    const { oembed } = this.state;\n\n    return (\n      <div className='modal-root__modal report-modal embed-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='media-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={16} />\n          <FormattedMessage id='status.embed' defaultMessage='Embed' />\n        </div>\n\n        <div className='report-modal__container embed-modal__container' style={{ display: 'block' }}>\n          <p className='hint'>\n            <FormattedMessage id='embed.instructions' defaultMessage='Embed this status on your website by copying the code below.' />\n          </p>\n\n          <input\n            type='text'\n            className='embed-modal__html'\n            readOnly\n            value={oembed && oembed.html || ''}\n            onClick={this.handleTextareaClick}\n          />\n\n          <p className='hint'>\n            <FormattedMessage id='embed.preview' defaultMessage='Here is what it will look like:' />\n          </p>\n\n          <iframe\n            className='embed-modal__iframe'\n            frameBorder='0'\n            ref={this.setIframeRef}\n            sandbox='allow-same-origin'\n            title='preview'\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"lightbox.close","defaultMessage":"Close"},{"id":"status.embed","defaultMessage":"Embed"},{"id":"embed.instructions","defaultMessage":"Embed this status on your website by copying the code below."},{"id":"embed.preview","defaultMessage":"Here is what it will look like:"}]}},"sourceType":"module"}