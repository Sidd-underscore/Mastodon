{"ast":null,"code":"import api, { getLinks } from '../api';\nimport { importFetchedStatuses } from './importer';\nexport var FAVOURITED_STATUSES_FETCH_REQUEST = 'FAVOURITED_STATUSES_FETCH_REQUEST';\nexport var FAVOURITED_STATUSES_FETCH_SUCCESS = 'FAVOURITED_STATUSES_FETCH_SUCCESS';\nexport var FAVOURITED_STATUSES_FETCH_FAIL = 'FAVOURITED_STATUSES_FETCH_FAIL';\nexport var FAVOURITED_STATUSES_EXPAND_REQUEST = 'FAVOURITED_STATUSES_EXPAND_REQUEST';\nexport var FAVOURITED_STATUSES_EXPAND_SUCCESS = 'FAVOURITED_STATUSES_EXPAND_SUCCESS';\nexport var FAVOURITED_STATUSES_EXPAND_FAIL = 'FAVOURITED_STATUSES_EXPAND_FAIL';\nexport function fetchFavouritedStatuses() {\n  return function (dispatch, getState) {\n    if (getState().getIn(['status_lists', 'favourites', 'isLoading'])) {\n      return;\n    }\n\n    dispatch(fetchFavouritedStatusesRequest());\n    api(getState).get('/api/v1/favourites').then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(importFetchedStatuses(response.data));\n      dispatch(fetchFavouritedStatusesSuccess(response.data, next ? next.uri : null));\n    }).catch(function (error) {\n      dispatch(fetchFavouritedStatusesFail(error));\n    });\n  };\n}\n;\nexport function fetchFavouritedStatusesRequest() {\n  return {\n    type: FAVOURITED_STATUSES_FETCH_REQUEST,\n    skipLoading: true\n  };\n}\n;\nexport function fetchFavouritedStatusesSuccess(statuses, next) {\n  return {\n    type: FAVOURITED_STATUSES_FETCH_SUCCESS,\n    statuses,\n    next,\n    skipLoading: true\n  };\n}\n;\nexport function fetchFavouritedStatusesFail(error) {\n  return {\n    type: FAVOURITED_STATUSES_FETCH_FAIL,\n    error,\n    skipLoading: true\n  };\n}\n;\nexport function expandFavouritedStatuses() {\n  return function (dispatch, getState) {\n    var url = getState().getIn(['status_lists', 'favourites', 'next'], null);\n\n    if (url === null || getState().getIn(['status_lists', 'favourites', 'isLoading'])) {\n      return;\n    }\n\n    dispatch(expandFavouritedStatusesRequest());\n    api(getState).get(url).then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(importFetchedStatuses(response.data));\n      dispatch(expandFavouritedStatusesSuccess(response.data, next ? next.uri : null));\n    }).catch(function (error) {\n      dispatch(expandFavouritedStatusesFail(error));\n    });\n  };\n}\n;\nexport function expandFavouritedStatusesRequest() {\n  return {\n    type: FAVOURITED_STATUSES_EXPAND_REQUEST\n  };\n}\n;\nexport function expandFavouritedStatusesSuccess(statuses, next) {\n  return {\n    type: FAVOURITED_STATUSES_EXPAND_SUCCESS,\n    statuses,\n    next\n  };\n}\n;\nexport function expandFavouritedStatusesFail(error) {\n  return {\n    type: FAVOURITED_STATUSES_EXPAND_FAIL,\n    error\n  };\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/favourites.js"],"names":["api","getLinks","importFetchedStatuses","FAVOURITED_STATUSES_FETCH_REQUEST","FAVOURITED_STATUSES_FETCH_SUCCESS","FAVOURITED_STATUSES_FETCH_FAIL","FAVOURITED_STATUSES_EXPAND_REQUEST","FAVOURITED_STATUSES_EXPAND_SUCCESS","FAVOURITED_STATUSES_EXPAND_FAIL","fetchFavouritedStatuses","dispatch","getState","getIn","fetchFavouritedStatusesRequest","get","then","response","next","refs","find","link","rel","data","fetchFavouritedStatusesSuccess","uri","catch","error","fetchFavouritedStatusesFail","type","skipLoading","statuses","expandFavouritedStatuses","url","expandFavouritedStatusesRequest","expandFavouritedStatusesSuccess","expandFavouritedStatusesFail"],"mappings":"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","sourcesContent":["import api, { getLinks } from '../api';\nimport { importFetchedStatuses } from './importer';\n\nexport const FAVOURITED_STATUSES_FETCH_REQUEST = 'FAVOURITED_STATUSES_FETCH_REQUEST';\nexport const FAVOURITED_STATUSES_FETCH_SUCCESS = 'FAVOURITED_STATUSES_FETCH_SUCCESS';\nexport const FAVOURITED_STATUSES_FETCH_FAIL    = 'FAVOURITED_STATUSES_FETCH_FAIL';\n\nexport const FAVOURITED_STATUSES_EXPAND_REQUEST = 'FAVOURITED_STATUSES_EXPAND_REQUEST';\nexport const FAVOURITED_STATUSES_EXPAND_SUCCESS = 'FAVOURITED_STATUSES_EXPAND_SUCCESS';\nexport const FAVOURITED_STATUSES_EXPAND_FAIL    = 'FAVOURITED_STATUSES_EXPAND_FAIL';\n\nexport function fetchFavouritedStatuses() {\n  return (dispatch, getState) => {\n    if (getState().getIn(['status_lists', 'favourites', 'isLoading'])) {\n      return;\n    }\n\n    dispatch(fetchFavouritedStatusesRequest());\n\n    api(getState).get('/api/v1/favourites').then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n      dispatch(importFetchedStatuses(response.data));\n      dispatch(fetchFavouritedStatusesSuccess(response.data, next ? next.uri : null));\n    }).catch(error => {\n      dispatch(fetchFavouritedStatusesFail(error));\n    });\n  };\n};\n\nexport function fetchFavouritedStatusesRequest() {\n  return {\n    type: FAVOURITED_STATUSES_FETCH_REQUEST,\n    skipLoading: true,\n  };\n};\n\nexport function fetchFavouritedStatusesSuccess(statuses, next) {\n  return {\n    type: FAVOURITED_STATUSES_FETCH_SUCCESS,\n    statuses,\n    next,\n    skipLoading: true,\n  };\n};\n\nexport function fetchFavouritedStatusesFail(error) {\n  return {\n    type: FAVOURITED_STATUSES_FETCH_FAIL,\n    error,\n    skipLoading: true,\n  };\n};\n\nexport function expandFavouritedStatuses() {\n  return (dispatch, getState) => {\n    const url = getState().getIn(['status_lists', 'favourites', 'next'], null);\n\n    if (url === null || getState().getIn(['status_lists', 'favourites', 'isLoading'])) {\n      return;\n    }\n\n    dispatch(expandFavouritedStatusesRequest());\n\n    api(getState).get(url).then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n      dispatch(importFetchedStatuses(response.data));\n      dispatch(expandFavouritedStatusesSuccess(response.data, next ? next.uri : null));\n    }).catch(error => {\n      dispatch(expandFavouritedStatusesFail(error));\n    });\n  };\n};\n\nexport function expandFavouritedStatusesRequest() {\n  return {\n    type: FAVOURITED_STATUSES_EXPAND_REQUEST,\n  };\n};\n\nexport function expandFavouritedStatusesSuccess(statuses, next) {\n  return {\n    type: FAVOURITED_STATUSES_EXPAND_SUCCESS,\n    statuses,\n    next,\n  };\n};\n\nexport function expandFavouritedStatusesFail(error) {\n  return {\n    type: FAVOURITED_STATUSES_EXPAND_FAIL,\n    error,\n  };\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}