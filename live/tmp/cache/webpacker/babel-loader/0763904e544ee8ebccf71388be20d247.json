{"ast":null,"code":"// APIs for normalizing fullscreen operations. Note that Edge uses\n// the WebKit-prefixed APIs currently (as of Edge 16).\nexport var isFullscreen = function isFullscreen() {\n  return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement;\n};\nexport var exitFullscreen = function exitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  }\n};\nexport var requestFullscreen = function requestFullscreen(el) {\n  if (el.requestFullscreen) {\n    el.requestFullscreen();\n  } else if (el.webkitRequestFullscreen) {\n    el.webkitRequestFullscreen();\n  } else if (el.mozRequestFullScreen) {\n    el.mozRequestFullScreen();\n  }\n};\nexport var attachFullscreenListener = function attachFullscreenListener(listener) {\n  if ('onfullscreenchange' in document) {\n    document.addEventListener('fullscreenchange', listener);\n  } else if ('onwebkitfullscreenchange' in document) {\n    document.addEventListener('webkitfullscreenchange', listener);\n  } else if ('onmozfullscreenchange' in document) {\n    document.addEventListener('mozfullscreenchange', listener);\n  }\n};\nexport var detachFullscreenListener = function detachFullscreenListener(listener) {\n  if ('onfullscreenchange' in document) {\n    document.removeEventListener('fullscreenchange', listener);\n  } else if ('onwebkitfullscreenchange' in document) {\n    document.removeEventListener('webkitfullscreenchange', listener);\n  } else if ('onmozfullscreenchange' in document) {\n    document.removeEventListener('mozfullscreenchange', listener);\n  }\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/util/fullscreen.js"],"names":["isFullscreen","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","requestFullscreen","el","webkitRequestFullscreen","mozRequestFullScreen","attachFullscreenListener","listener","addEventListener","detachFullscreenListener","removeEventListener"],"mappings":"AAAA;AACA;AAEA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAMC,QAAQ,CAACC,iBAAT,IAChCD,QAAQ,CAACE,uBADuB,IAEhCF,QAAQ,CAACG,oBAFiB;AAAA,CAArB;AAIP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,MAAIJ,QAAQ,CAACI,cAAb,EAA6B;AAC3BJ,IAAAA,QAAQ,CAACI,cAAT;AACD,GAFD,MAEO,IAAIJ,QAAQ,CAACK,oBAAb,EAAmC;AACxCL,IAAAA,QAAQ,CAACK,oBAAT;AACD,GAFM,MAEA,IAAIL,QAAQ,CAACM,mBAAb,EAAkC;AACvCN,IAAAA,QAAQ,CAACM,mBAAT;AACD;AACF,CARM;AAUP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,EAAE,EAAI;AACrC,MAAIA,EAAE,CAACD,iBAAP,EAA0B;AACxBC,IAAAA,EAAE,CAACD,iBAAH;AACD,GAFD,MAEO,IAAIC,EAAE,CAACC,uBAAP,EAAgC;AACrCD,IAAAA,EAAE,CAACC,uBAAH;AACD,GAFM,MAEA,IAAID,EAAE,CAACE,oBAAP,EAA6B;AAClCF,IAAAA,EAAE,CAACE,oBAAH;AACD;AACF,CARM;AAUP,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,QAAD,EAAc;AACpD,MAAI,wBAAwBZ,QAA5B,EAAsC;AACpCA,IAAAA,QAAQ,CAACa,gBAAT,CAA0B,kBAA1B,EAA8CD,QAA9C;AACD,GAFD,MAEO,IAAI,8BAA8BZ,QAAlC,EAA4C;AACjDA,IAAAA,QAAQ,CAACa,gBAAT,CAA0B,wBAA1B,EAAoDD,QAApD;AACD,GAFM,MAEA,IAAI,2BAA2BZ,QAA/B,EAAyC;AAC9CA,IAAAA,QAAQ,CAACa,gBAAT,CAA0B,qBAA1B,EAAiDD,QAAjD;AACD;AACF,CARM;AAUP,OAAO,IAAME,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACF,QAAD,EAAc;AACpD,MAAI,wBAAwBZ,QAA5B,EAAsC;AACpCA,IAAAA,QAAQ,CAACe,mBAAT,CAA6B,kBAA7B,EAAiDH,QAAjD;AACD,GAFD,MAEO,IAAI,8BAA8BZ,QAAlC,EAA4C;AACjDA,IAAAA,QAAQ,CAACe,mBAAT,CAA6B,wBAA7B,EAAuDH,QAAvD;AACD,GAFM,MAEA,IAAI,2BAA2BZ,QAA/B,EAAyC;AAC9CA,IAAAA,QAAQ,CAACe,mBAAT,CAA6B,qBAA7B,EAAoDH,QAApD;AACD;AACF,CARM","sourcesContent":["// APIs for normalizing fullscreen operations. Note that Edge uses\n// the WebKit-prefixed APIs currently (as of Edge 16).\n\nexport const isFullscreen = () => document.fullscreenElement ||\n  document.webkitFullscreenElement ||\n  document.mozFullScreenElement;\n\nexport const exitFullscreen = () => {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  }\n};\n\nexport const requestFullscreen = el => {\n  if (el.requestFullscreen) {\n    el.requestFullscreen();\n  } else if (el.webkitRequestFullscreen) {\n    el.webkitRequestFullscreen();\n  } else if (el.mozRequestFullScreen) {\n    el.mozRequestFullScreen();\n  }\n};\n\nexport const attachFullscreenListener = (listener) => {\n  if ('onfullscreenchange' in document) {\n    document.addEventListener('fullscreenchange', listener);\n  } else if ('onwebkitfullscreenchange' in document) {\n    document.addEventListener('webkitfullscreenchange', listener);\n  } else if ('onmozfullscreenchange' in document) {\n    document.addEventListener('mozfullscreenchange', listener);\n  }\n};\n\nexport const detachFullscreenListener = (listener) => {\n  if ('onfullscreenchange' in document) {\n    document.removeEventListener('fullscreenchange', listener);\n  } else if ('onwebkitfullscreenchange' in document) {\n    document.removeEventListener('webkitfullscreenchange', listener);\n  } else if ('onmozfullscreenchange' in document) {\n    document.removeEventListener('mozfullscreenchange', listener);\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}