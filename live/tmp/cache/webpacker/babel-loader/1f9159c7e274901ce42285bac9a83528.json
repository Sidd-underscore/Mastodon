{"ast":null,"code":"import api, { getLinks } from '../api';\nimport { fetchRelationships } from './accounts';\nimport { importFetchedAccounts } from './importer';\nimport { openModal } from './modal';\nexport var BLOCKS_FETCH_REQUEST = 'BLOCKS_FETCH_REQUEST';\nexport var BLOCKS_FETCH_SUCCESS = 'BLOCKS_FETCH_SUCCESS';\nexport var BLOCKS_FETCH_FAIL = 'BLOCKS_FETCH_FAIL';\nexport var BLOCKS_EXPAND_REQUEST = 'BLOCKS_EXPAND_REQUEST';\nexport var BLOCKS_EXPAND_SUCCESS = 'BLOCKS_EXPAND_SUCCESS';\nexport var BLOCKS_EXPAND_FAIL = 'BLOCKS_EXPAND_FAIL';\nexport var BLOCKS_INIT_MODAL = 'BLOCKS_INIT_MODAL';\nexport function fetchBlocks() {\n  return function (dispatch, getState) {\n    dispatch(fetchBlocksRequest());\n    api(getState).get('/api/v1/blocks').then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(importFetchedAccounts(response.data));\n      dispatch(fetchBlocksSuccess(response.data, next ? next.uri : null));\n      dispatch(fetchRelationships(response.data.map(function (item) {\n        return item.id;\n      })));\n    }).catch(function (error) {\n      return dispatch(fetchBlocksFail(error));\n    });\n  };\n}\n;\nexport function fetchBlocksRequest() {\n  return {\n    type: BLOCKS_FETCH_REQUEST\n  };\n}\n;\nexport function fetchBlocksSuccess(accounts, next) {\n  return {\n    type: BLOCKS_FETCH_SUCCESS,\n    accounts,\n    next\n  };\n}\n;\nexport function fetchBlocksFail(error) {\n  return {\n    type: BLOCKS_FETCH_FAIL,\n    error\n  };\n}\n;\nexport function expandBlocks() {\n  return function (dispatch, getState) {\n    var url = getState().getIn(['user_lists', 'blocks', 'next']);\n\n    if (url === null) {\n      return;\n    }\n\n    dispatch(expandBlocksRequest());\n    api(getState).get(url).then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(importFetchedAccounts(response.data));\n      dispatch(expandBlocksSuccess(response.data, next ? next.uri : null));\n      dispatch(fetchRelationships(response.data.map(function (item) {\n        return item.id;\n      })));\n    }).catch(function (error) {\n      return dispatch(expandBlocksFail(error));\n    });\n  };\n}\n;\nexport function expandBlocksRequest() {\n  return {\n    type: BLOCKS_EXPAND_REQUEST\n  };\n}\n;\nexport function expandBlocksSuccess(accounts, next) {\n  return {\n    type: BLOCKS_EXPAND_SUCCESS,\n    accounts,\n    next\n  };\n}\n;\nexport function expandBlocksFail(error) {\n  return {\n    type: BLOCKS_EXPAND_FAIL,\n    error\n  };\n}\n;\nexport function initBlockModal(account) {\n  return function (dispatch) {\n    dispatch({\n      type: BLOCKS_INIT_MODAL,\n      account\n    });\n    dispatch(openModal('BLOCK'));\n  };\n}","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/blocks.js"],"names":["api","getLinks","fetchRelationships","importFetchedAccounts","openModal","BLOCKS_FETCH_REQUEST","BLOCKS_FETCH_SUCCESS","BLOCKS_FETCH_FAIL","BLOCKS_EXPAND_REQUEST","BLOCKS_EXPAND_SUCCESS","BLOCKS_EXPAND_FAIL","BLOCKS_INIT_MODAL","fetchBlocks","dispatch","getState","fetchBlocksRequest","get","then","response","next","refs","find","link","rel","data","fetchBlocksSuccess","uri","map","item","id","catch","error","fetchBlocksFail","type","accounts","expandBlocks","url","getIn","expandBlocksRequest","expandBlocksSuccess","expandBlocksFail","initBlockModal","account"],"mappings":"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","sourcesContent":["import api, { getLinks } from '../api';\nimport { fetchRelationships } from './accounts';\nimport { importFetchedAccounts } from './importer';\nimport { openModal } from './modal';\n\nexport const BLOCKS_FETCH_REQUEST = 'BLOCKS_FETCH_REQUEST';\nexport const BLOCKS_FETCH_SUCCESS = 'BLOCKS_FETCH_SUCCESS';\nexport const BLOCKS_FETCH_FAIL    = 'BLOCKS_FETCH_FAIL';\n\nexport const BLOCKS_EXPAND_REQUEST = 'BLOCKS_EXPAND_REQUEST';\nexport const BLOCKS_EXPAND_SUCCESS = 'BLOCKS_EXPAND_SUCCESS';\nexport const BLOCKS_EXPAND_FAIL    = 'BLOCKS_EXPAND_FAIL';\n\nexport const BLOCKS_INIT_MODAL = 'BLOCKS_INIT_MODAL';\n\nexport function fetchBlocks() {\n  return (dispatch, getState) => {\n    dispatch(fetchBlocksRequest());\n\n    api(getState).get('/api/v1/blocks').then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n      dispatch(importFetchedAccounts(response.data));\n      dispatch(fetchBlocksSuccess(response.data, next ? next.uri : null));\n      dispatch(fetchRelationships(response.data.map(item => item.id)));\n    }).catch(error => dispatch(fetchBlocksFail(error)));\n  };\n};\n\nexport function fetchBlocksRequest() {\n  return {\n    type: BLOCKS_FETCH_REQUEST,\n  };\n};\n\nexport function fetchBlocksSuccess(accounts, next) {\n  return {\n    type: BLOCKS_FETCH_SUCCESS,\n    accounts,\n    next,\n  };\n};\n\nexport function fetchBlocksFail(error) {\n  return {\n    type: BLOCKS_FETCH_FAIL,\n    error,\n  };\n};\n\nexport function expandBlocks() {\n  return (dispatch, getState) => {\n    const url = getState().getIn(['user_lists', 'blocks', 'next']);\n\n    if (url === null) {\n      return;\n    }\n\n    dispatch(expandBlocksRequest());\n\n    api(getState).get(url).then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n      dispatch(importFetchedAccounts(response.data));\n      dispatch(expandBlocksSuccess(response.data, next ? next.uri : null));\n      dispatch(fetchRelationships(response.data.map(item => item.id)));\n    }).catch(error => dispatch(expandBlocksFail(error)));\n  };\n};\n\nexport function expandBlocksRequest() {\n  return {\n    type: BLOCKS_EXPAND_REQUEST,\n  };\n};\n\nexport function expandBlocksSuccess(accounts, next) {\n  return {\n    type: BLOCKS_EXPAND_SUCCESS,\n    accounts,\n    next,\n  };\n};\n\nexport function expandBlocksFail(error) {\n  return {\n    type: BLOCKS_EXPAND_FAIL,\n    error,\n  };\n};\n\nexport function initBlockModal(account) {\n  return dispatch => {\n    dispatch({\n      type: BLOCKS_INIT_MODAL,\n      account,\n    });\n\n    dispatch(openModal('BLOCK'));\n  };\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}