{"ast":null,"code":"import { Iterable, fromJS } from 'immutable';\nimport { hydrateCompose } from './compose';\nimport { importFetchedAccounts } from './importer';\nexport var STORE_HYDRATE = 'STORE_HYDRATE';\nexport var STORE_HYDRATE_LAZY = 'STORE_HYDRATE_LAZY';\n\nvar convertState = function convertState(rawState) {\n  return fromJS(rawState, function (k, v) {\n    return Iterable.isIndexed(v) ? v.toList() : v.toMap();\n  });\n};\n\nexport function hydrateStore(rawState) {\n  return function (dispatch) {\n    var state = convertState(rawState);\n    dispatch({\n      type: STORE_HYDRATE,\n      state\n    });\n    dispatch(hydrateCompose());\n    dispatch(importFetchedAccounts(Object.values(rawState.accounts)));\n  };\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/store.js"],"names":["Iterable","fromJS","hydrateCompose","importFetchedAccounts","STORE_HYDRATE","STORE_HYDRATE_LAZY","convertState","rawState","k","v","isIndexed","toList","toMap","hydrateStore","dispatch","state","type","Object","values","accounts"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,WAAjC;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,qBAAT,QAAsC,YAAtC;AAEA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;;AAEP,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,QAAQ;AAAA,SAC3BN,MAAM,CAACM,QAAD,EAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,WACfT,QAAQ,CAACU,SAAT,CAAmBD,CAAnB,IAAwBA,CAAC,CAACE,MAAF,EAAxB,GAAqCF,CAAC,CAACG,KAAF,EADtB;AAAA,GAAX,CADqB;AAAA,CAA7B;;AAIA,OAAO,SAASC,YAAT,CAAsBN,QAAtB,EAAgC;AACrC,SAAO,UAAAO,QAAQ,EAAI;AACjB,QAAMC,KAAK,GAAGT,YAAY,CAACC,QAAD,CAA1B;AAEAO,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEZ,aADC;AAEPW,MAAAA;AAFO,KAAD,CAAR;AAKAD,IAAAA,QAAQ,CAACZ,cAAc,EAAf,CAAR;AACAY,IAAAA,QAAQ,CAACX,qBAAqB,CAACc,MAAM,CAACC,MAAP,CAAcX,QAAQ,CAACY,QAAvB,CAAD,CAAtB,CAAR;AACD,GAVD;AAWD;AAAA","sourcesContent":["import { Iterable, fromJS } from 'immutable';\nimport { hydrateCompose } from './compose';\nimport { importFetchedAccounts } from './importer';\n\nexport const STORE_HYDRATE = 'STORE_HYDRATE';\nexport const STORE_HYDRATE_LAZY = 'STORE_HYDRATE_LAZY';\n\nconst convertState = rawState =>\n  fromJS(rawState, (k, v) =>\n    Iterable.isIndexed(v) ? v.toList() : v.toMap());\n\nexport function hydrateStore(rawState) {\n  return dispatch => {\n    const state = convertState(rawState);\n\n    dispatch({\n      type: STORE_HYDRATE,\n      state,\n    });\n\n    dispatch(hydrateCompose());\n    dispatch(importFetchedAccounts(Object.values(rawState.accounts)));\n  };\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}