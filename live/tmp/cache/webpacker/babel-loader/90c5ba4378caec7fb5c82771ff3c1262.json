{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/account/components/header.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Button from 'mastodon/components/button';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { autoPlayGif, me, isStaff } from 'mastodon/initial_state';\nimport classNames from 'classnames';\nimport Icon from 'mastodon/components/icon';\nimport IconButton from 'mastodon/components/icon_button';\nimport Avatar from 'mastodon/components/avatar';\nimport { counterRenderer } from 'mastodon/components/common_counter';\nimport ShortNumber from 'mastodon/components/short_number';\nimport { NavLink } from 'react-router-dom';\nimport DropdownMenuContainer from 'mastodon/containers/dropdown_menu_container';\nimport AccountNoteContainer from '../containers/account_note_container';\nvar messages = defineMessages({\n  unfollow: {\n    \"id\": \"account.unfollow\",\n    \"defaultMessage\": \"Unfollow\"\n  },\n  follow: {\n    \"id\": \"account.follow\",\n    \"defaultMessage\": \"Follow\"\n  },\n  cancel_follow_request: {\n    \"id\": \"account.cancel_follow_request\",\n    \"defaultMessage\": \"Cancel follow request\"\n  },\n  requested: {\n    \"id\": \"account.requested\",\n    \"defaultMessage\": \"Awaiting approval. Click to cancel follow request\"\n  },\n  unblock: {\n    \"id\": \"account.unblock\",\n    \"defaultMessage\": \"Unblock @{name}\"\n  },\n  edit_profile: {\n    \"id\": \"account.edit_profile\",\n    \"defaultMessage\": \"Edit profile\"\n  },\n  linkVerifiedOn: {\n    \"id\": \"account.link_verified_on\",\n    \"defaultMessage\": \"Ownership of this link was checked on {date}\"\n  },\n  account_locked: {\n    \"id\": \"account.locked_info\",\n    \"defaultMessage\": \"This account privacy status is set to locked. The owner manually reviews who can follow them.\"\n  },\n  mention: {\n    \"id\": \"account.mention\",\n    \"defaultMessage\": \"Mention @{name}\"\n  },\n  direct: {\n    \"id\": \"account.direct\",\n    \"defaultMessage\": \"Direct message @{name}\"\n  },\n  unmute: {\n    \"id\": \"account.unmute\",\n    \"defaultMessage\": \"Unmute @{name}\"\n  },\n  block: {\n    \"id\": \"account.block\",\n    \"defaultMessage\": \"Block @{name}\"\n  },\n  mute: {\n    \"id\": \"account.mute\",\n    \"defaultMessage\": \"Mute @{name}\"\n  },\n  report: {\n    \"id\": \"account.report\",\n    \"defaultMessage\": \"Report @{name}\"\n  },\n  share: {\n    \"id\": \"account.share\",\n    \"defaultMessage\": \"Share @{name}'s profile\"\n  },\n  media: {\n    \"id\": \"account.media\",\n    \"defaultMessage\": \"Media\"\n  },\n  blockDomain: {\n    \"id\": \"account.block_domain\",\n    \"defaultMessage\": \"Block domain {domain}\"\n  },\n  unblockDomain: {\n    \"id\": \"account.unblock_domain\",\n    \"defaultMessage\": \"Unblock domain {domain}\"\n  },\n  hideReblogs: {\n    \"id\": \"account.hide_reblogs\",\n    \"defaultMessage\": \"Hide boosts from @{name}\"\n  },\n  showReblogs: {\n    \"id\": \"account.show_reblogs\",\n    \"defaultMessage\": \"Show boosts from @{name}\"\n  },\n  enableNotifications: {\n    \"id\": \"account.enable_notifications\",\n    \"defaultMessage\": \"Notify me when @{name} posts\"\n  },\n  disableNotifications: {\n    \"id\": \"account.disable_notifications\",\n    \"defaultMessage\": \"Stop notifying me when @{name} posts\"\n  },\n  pins: {\n    \"id\": \"navigation_bar.pins\",\n    \"defaultMessage\": \"Pinned toots\"\n  },\n  preferences: {\n    \"id\": \"navigation_bar.preferences\",\n    \"defaultMessage\": \"Preferences\"\n  },\n  follow_requests: {\n    \"id\": \"navigation_bar.follow_requests\",\n    \"defaultMessage\": \"Follow requests\"\n  },\n  favourites: {\n    \"id\": \"navigation_bar.favourites\",\n    \"defaultMessage\": \"Favourites\"\n  },\n  lists: {\n    \"id\": \"navigation_bar.lists\",\n    \"defaultMessage\": \"Lists\"\n  },\n  blocks: {\n    \"id\": \"navigation_bar.blocks\",\n    \"defaultMessage\": \"Blocked users\"\n  },\n  domain_blocks: {\n    \"id\": \"navigation_bar.domain_blocks\",\n    \"defaultMessage\": \"Blocked domains\"\n  },\n  mutes: {\n    \"id\": \"navigation_bar.mutes\",\n    \"defaultMessage\": \"Muted users\"\n  },\n  endorse: {\n    \"id\": \"account.endorse\",\n    \"defaultMessage\": \"Feature on profile\"\n  },\n  unendorse: {\n    \"id\": \"account.unendorse\",\n    \"defaultMessage\": \"Don't feature on profile\"\n  },\n  add_or_remove_from_list: {\n    \"id\": \"account.add_or_remove_from_list\",\n    \"defaultMessage\": \"Add or Remove from lists\"\n  },\n  admin_account: {\n    \"id\": \"status.admin_account\",\n    \"defaultMessage\": \"Open moderation interface for @{name}\"\n  }\n});\nvar dateFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n  hour12: false,\n  hour: '2-digit',\n  minute: '2-digit'\n};\n\nvar Header = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(Header, _ImmutablePureCompone);\n\n  function Header() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n\n    _this.openEditProfile = function () {\n      window.open('/settings/profile', '_blank');\n    };\n\n    _this.isStatusesPageActive = function (match, location) {\n      if (!match) {\n        return false;\n      }\n\n      return !location.pathname.match(/\\/(followers|following)\\/?$/);\n    };\n\n    _this.handleMouseEnter = function (_ref) {\n      var currentTarget = _ref.currentTarget;\n\n      if (autoPlayGif) {\n        return;\n      }\n\n      var emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n      for (var i = 0; i < emojis.length; i++) {\n        var emoji = emojis[i];\n        emoji.src = emoji.getAttribute('data-original');\n      }\n    };\n\n    _this.handleMouseLeave = function (_ref2) {\n      var currentTarget = _ref2.currentTarget;\n\n      if (autoPlayGif) {\n        return;\n      }\n\n      var emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n      for (var i = 0; i < emojis.length; i++) {\n        var emoji = emojis[i];\n        emoji.src = emoji.getAttribute('data-static');\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = Header.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        account = _this$props.account,\n        intl = _this$props.intl,\n        domain = _this$props.domain,\n        identity_proofs = _this$props.identity_proofs;\n\n    if (!account) {\n      return null;\n    }\n\n    var suspended = account.get('suspended');\n    var info = [];\n    var actionBtn = '';\n    var bellBtn = '';\n    var lockedIcon = '';\n    var menu = [];\n\n    if (me !== account.get('id') && account.getIn(['relationship', 'followed_by'])) {\n      info.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: \"followed_by\",\n        className: \"relationship-tag\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"account.follows_you\",\n        defaultMessage: \"Follows you\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 70\n        }\n      })));\n    } else if (me !== account.get('id') && account.getIn(['relationship', 'blocking'])) {\n      info.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: \"blocked\",\n        className: \"relationship-tag\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"account.blocked\",\n        defaultMessage: \"Blocked\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 66\n        }\n      })));\n    }\n\n    if (me !== account.get('id') && account.getIn(['relationship', 'muting'])) {\n      info.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: \"muted\",\n        className: \"relationship-tag\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"account.muted\",\n        defaultMessage: \"Muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 64\n        }\n      })));\n    } else if (me !== account.get('id') && account.getIn(['relationship', 'domain_blocking'])) {\n      info.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: \"domain_blocked\",\n        className: \"relationship-tag\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"account.domain_blocked\",\n        defaultMessage: \"Domain blocked\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 73\n        }\n      })));\n    }\n\n    if (account.getIn(['relationship', 'requested']) || account.getIn(['relationship', 'following'])) {\n      bellBtn = /*#__PURE__*/React.createElement(IconButton, {\n        icon: \"bell-o\",\n        size: 24,\n        active: account.getIn(['relationship', 'notifying']),\n        title: intl.formatMessage(account.getIn(['relationship', 'notifying']) ? messages.disableNotifications : messages.enableNotifications, {\n          name: account.get('username')\n        }),\n        onClick: this.props.onNotifyToggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      });\n    }\n\n    if (me !== account.get('id')) {\n      if (!account.get('relationship')) {\n        // Wait until the relationship is loaded\n        actionBtn = '';\n      } else if (account.getIn(['relationship', 'requested'])) {\n        actionBtn = /*#__PURE__*/React.createElement(Button, {\n          className: classNames('logo-button', {\n            'button--with-bell': bellBtn !== ''\n          }),\n          text: intl.formatMessage(messages.cancel_follow_request),\n          title: intl.formatMessage(messages.requested),\n          onClick: this.props.onFollow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }\n        });\n      } else if (!account.getIn(['relationship', 'blocking'])) {\n        actionBtn = /*#__PURE__*/React.createElement(Button, {\n          disabled: account.getIn(['relationship', 'blocked_by']),\n          className: classNames('logo-button', {\n            'button--destructive': account.getIn(['relationship', 'following']),\n            'button--with-bell': bellBtn !== ''\n          }),\n          text: intl.formatMessage(account.getIn(['relationship', 'following']) ? messages.unfollow : messages.follow),\n          onClick: this.props.onFollow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 21\n          }\n        });\n      } else if (account.getIn(['relationship', 'blocking'])) {\n        actionBtn = /*#__PURE__*/React.createElement(Button, {\n          className: \"logo-button\",\n          text: intl.formatMessage(messages.unblock, {\n            name: account.get('username')\n          }),\n          onClick: this.props.onBlock,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 21\n          }\n        });\n      }\n    } else {\n      actionBtn = /*#__PURE__*/React.createElement(Button, {\n        className: \"logo-button\",\n        text: intl.formatMessage(messages.edit_profile),\n        onClick: this.openEditProfile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 19\n        }\n      });\n    }\n\n    if (account.get('moved') && !account.getIn(['relationship', 'following'])) {\n      actionBtn = '';\n    }\n\n    if (account.get('locked')) {\n      lockedIcon = /*#__PURE__*/React.createElement(Icon, {\n        id: \"lock\",\n        title: intl.formatMessage(messages.account_locked),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 20\n        }\n      });\n    }\n\n    if (account.get('id') !== me) {\n      menu.push({\n        text: intl.formatMessage(messages.mention, {\n          name: account.get('username')\n        }),\n        action: this.props.onMention\n      });\n      menu.push({\n        text: intl.formatMessage(messages.direct, {\n          name: account.get('username')\n        }),\n        action: this.props.onDirect\n      });\n      menu.push(null);\n    }\n\n    if ('share' in navigator) {\n      menu.push({\n        text: intl.formatMessage(messages.share, {\n          name: account.get('username')\n        }),\n        action: this.handleShare\n      });\n      menu.push(null);\n    }\n\n    if (account.get('id') === me) {\n      menu.push({\n        text: intl.formatMessage(messages.edit_profile),\n        href: '/settings/profile'\n      });\n      menu.push({\n        text: intl.formatMessage(messages.preferences),\n        href: '/settings/preferences'\n      });\n      menu.push({\n        text: intl.formatMessage(messages.pins),\n        to: '/pinned'\n      });\n      menu.push(null);\n      menu.push({\n        text: intl.formatMessage(messages.follow_requests),\n        to: '/follow_requests'\n      });\n      menu.push({\n        text: intl.formatMessage(messages.favourites),\n        to: '/favourites'\n      });\n      menu.push({\n        text: intl.formatMessage(messages.lists),\n        to: '/lists'\n      });\n      menu.push(null);\n      menu.push({\n        text: intl.formatMessage(messages.mutes),\n        to: '/mutes'\n      });\n      menu.push({\n        text: intl.formatMessage(messages.blocks),\n        to: '/blocks'\n      });\n      menu.push({\n        text: intl.formatMessage(messages.domain_blocks),\n        to: '/domain_blocks'\n      });\n    } else {\n      if (account.getIn(['relationship', 'following'])) {\n        if (!account.getIn(['relationship', 'muting'])) {\n          if (account.getIn(['relationship', 'showing_reblogs'])) {\n            menu.push({\n              text: intl.formatMessage(messages.hideReblogs, {\n                name: account.get('username')\n              }),\n              action: this.props.onReblogToggle\n            });\n          } else {\n            menu.push({\n              text: intl.formatMessage(messages.showReblogs, {\n                name: account.get('username')\n              }),\n              action: this.props.onReblogToggle\n            });\n          }\n        }\n\n        menu.push({\n          text: intl.formatMessage(account.getIn(['relationship', 'endorsed']) ? messages.unendorse : messages.endorse),\n          action: this.props.onEndorseToggle\n        });\n        menu.push({\n          text: intl.formatMessage(messages.add_or_remove_from_list),\n          action: this.props.onAddToList\n        });\n        menu.push(null);\n      }\n\n      if (account.getIn(['relationship', 'muting'])) {\n        menu.push({\n          text: intl.formatMessage(messages.unmute, {\n            name: account.get('username')\n          }),\n          action: this.props.onMute\n        });\n      } else {\n        menu.push({\n          text: intl.formatMessage(messages.mute, {\n            name: account.get('username')\n          }),\n          action: this.props.onMute\n        });\n      }\n\n      if (account.getIn(['relationship', 'blocking'])) {\n        menu.push({\n          text: intl.formatMessage(messages.unblock, {\n            name: account.get('username')\n          }),\n          action: this.props.onBlock\n        });\n      } else {\n        menu.push({\n          text: intl.formatMessage(messages.block, {\n            name: account.get('username')\n          }),\n          action: this.props.onBlock\n        });\n      }\n\n      menu.push({\n        text: intl.formatMessage(messages.report, {\n          name: account.get('username')\n        }),\n        action: this.props.onReport\n      });\n    }\n\n    if (account.get('acct') !== account.get('username')) {\n      var _domain = account.get('acct').split('@')[1];\n      menu.push(null);\n\n      if (account.getIn(['relationship', 'domain_blocking'])) {\n        menu.push({\n          text: intl.formatMessage(messages.unblockDomain, {\n            domain: _domain\n          }),\n          action: this.props.onUnblockDomain\n        });\n      } else {\n        menu.push({\n          text: intl.formatMessage(messages.blockDomain, {\n            domain: _domain\n          }),\n          action: this.props.onBlockDomain\n        });\n      }\n    }\n\n    if (account.get('id') !== me && isStaff) {\n      menu.push(null);\n      menu.push({\n        text: intl.formatMessage(messages.admin_account, {\n          name: account.get('username')\n        }),\n        href: \"/admin/accounts/\" + account.get('id')\n      });\n    }\n\n    var content = {\n      __html: account.get('note_emojified')\n    };\n    var displayNameHtml = {\n      __html: account.get('display_name_html')\n    };\n    var fields = account.get('fields');\n    var acct = account.get('acct').indexOf('@') === -1 && domain ? account.get('acct') + \"@\" + domain : account.get('acct');\n    var badge;\n\n    if (account.get('bot')) {\n      badge = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"account-role bot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"account.badges.bot\",\n        defaultMessage: \"Bot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 50\n        }\n      }));\n    } else if (account.get('group')) {\n      badge = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"account-role group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"account.badges.group\",\n        defaultMessage: \"Group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 52\n        }\n      }));\n    } else {\n      badge = null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('account__header', {\n        inactive: !!account.get('moved')\n      }),\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    }, !suspended && info), /*#__PURE__*/React.createElement(\"img\", {\n      src: autoPlayGif ? account.get('header') : account.get('header_static'),\n      alt: \"\",\n      className: \"parallax\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"avatar\",\n      href: account.get('url'),\n      rel: \"noopener noreferrer\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      account: account,\n      size: 90,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }\n    }), !suspended && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__tabs__buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 15\n      }\n    }, actionBtn, bellBtn, /*#__PURE__*/React.createElement(DropdownMenuContainer, {\n      items: menu,\n      icon: \"ellipsis-v\",\n      size: 24,\n      direction: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__tabs__name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      dangerouslySetInnerHTML: displayNameHtml,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 15\n      }\n    }), \" \", badge, /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 15\n      }\n    }, \"@\", acct, \" \", lockedIcon))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__extra\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__bio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }\n    }, (fields.size > 0 || identity_proofs.size > 0) && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__fields\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    }, identity_proofs.map(function (proof, i) {\n      return /*#__PURE__*/React.createElement(\"dl\", {\n        key: i,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"dt\", {\n        dangerouslySetInnerHTML: {\n          __html: proof.get('provider')\n        },\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"dd\", {\n        className: \"verified\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: proof.get('proof_url'),\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        title: intl.formatMessage(messages.linkVerifiedOn, {\n          date: intl.formatDate(proof.get('updated_at'), dateFormatOptions)\n        }),\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 100\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        id: \"check\",\n        className: \"verified__mark\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 27\n        }\n      }))), /*#__PURE__*/React.createElement(\"a\", {\n        href: proof.get('profile_url'),\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: ' ' + proof.get('provider_username')\n        },\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 102\n        }\n      }))));\n    }), fields.map(function (pair, i) {\n      return /*#__PURE__*/React.createElement(\"dl\", {\n        key: i,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"dt\", {\n        dangerouslySetInnerHTML: {\n          __html: pair.get('name_emojified')\n        },\n        title: pair.get('name'),\n        className: \"translate\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"dd\", {\n        className: (pair.get('verified_at') ? 'verified' : '') + \" translate\",\n        title: pair.get('value_plain'),\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 23\n        }\n      }, pair.get('verified_at') && /*#__PURE__*/React.createElement(\"span\", {\n        title: intl.formatMessage(messages.linkVerifiedOn, {\n          date: intl.formatDate(pair.get('verified_at'), dateFormatOptions)\n        }),\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        id: \"check\",\n        className: \"verified__mark\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 182\n        }\n      })), \" \", /*#__PURE__*/React.createElement(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: pair.get('value_emojified')\n        },\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 237\n        }\n      })));\n    })), account.get('id') !== me && !suspended && /*#__PURE__*/React.createElement(AccountNoteContainer, {\n      account: account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 58\n      }\n    }), account.get('note').length > 0 && account.get('note') !== '<p></p>' && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__content translate\",\n      dangerouslySetInnerHTML: content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 87\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__joined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"account.joined\",\n      defaultMessage: \"Joined {date}\",\n      values: {\n        date: intl.formatDate(account.get('created_at'), {\n          year: 'numeric',\n          month: 'short',\n          day: '2-digit'\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 56\n      }\n    }))), !suspended && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__extra__links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      isActive: this.isStatusesPageActive,\n      activeClassName: \"active\",\n      to: \"/accounts/\" + account.get('id'),\n      title: intl.formatNumber(account.get('statuses_count')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ShortNumber, {\n      value: account.get('statuses_count'),\n      renderer: counterRenderer('statuses'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(NavLink, {\n      exact: true,\n      activeClassName: \"active\",\n      to: \"/accounts/\" + account.get('id') + \"/following\",\n      title: intl.formatNumber(account.get('following_count')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ShortNumber, {\n      value: account.get('following_count'),\n      renderer: counterRenderer('following'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(NavLink, {\n      exact: true,\n      activeClassName: \"active\",\n      to: \"/accounts/\" + account.get('id') + \"/followers\",\n      title: intl.formatNumber(account.get('followers_count')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ShortNumber, {\n      value: account.get('followers_count'),\n      renderer: counterRenderer('followers'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 19\n      }\n    }))))));\n  };\n\n  return Header;\n}(ImmutablePureComponent), _class2.propTypes = {\n  account: ImmutablePropTypes.map,\n  identity_props: ImmutablePropTypes.list,\n  onFollow: PropTypes.func.isRequired,\n  onBlock: PropTypes.func.isRequired,\n  onMention: PropTypes.func.isRequired,\n  onDirect: PropTypes.func.isRequired,\n  onReblogToggle: PropTypes.func.isRequired,\n  onNotifyToggle: PropTypes.func.isRequired,\n  onReport: PropTypes.func.isRequired,\n  onMute: PropTypes.func.isRequired,\n  onBlockDomain: PropTypes.func.isRequired,\n  onUnblockDomain: PropTypes.func.isRequired,\n  onEndorseToggle: PropTypes.func.isRequired,\n  onAddToList: PropTypes.func.isRequired,\n  onEditAccountNote: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired,\n  domain: PropTypes.string.isRequired\n}, _temp)) || _class;\n\nexport { Header as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/account/components/header.js"],"names":["React","ImmutablePropTypes","PropTypes","defineMessages","injectIntl","FormattedMessage","Button","ImmutablePureComponent","autoPlayGif","me","isStaff","classNames","Icon","IconButton","Avatar","counterRenderer","ShortNumber","NavLink","DropdownMenuContainer","AccountNoteContainer","messages","unfollow","follow","cancel_follow_request","requested","unblock","edit_profile","linkVerifiedOn","account_locked","mention","direct","unmute","block","mute","report","share","media","blockDomain","unblockDomain","hideReblogs","showReblogs","enableNotifications","disableNotifications","pins","preferences","follow_requests","favourites","lists","blocks","domain_blocks","mutes","endorse","unendorse","add_or_remove_from_list","admin_account","dateFormatOptions","month","day","year","hour12","hour","minute","Header","openEditProfile","window","open","isStatusesPageActive","match","location","pathname","handleMouseEnter","currentTarget","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","render","props","account","intl","domain","identity_proofs","suspended","get","info","actionBtn","bellBtn","lockedIcon","menu","getIn","push","formatMessage","name","onNotifyToggle","onFollow","onBlock","text","action","onMention","onDirect","navigator","handleShare","href","to","onReblogToggle","onEndorseToggle","onAddToList","onMute","onReport","split","onUnblockDomain","onBlockDomain","content","__html","displayNameHtml","fields","acct","indexOf","badge","inactive","size","map","proof","date","formatDate","pair","formatNumber","propTypes","identity_props","list","func","isRequired","onEditAccountNote","object","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Button from 'mastodon/components/button';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { autoPlayGif, me, isStaff } from 'mastodon/initial_state';\nimport classNames from 'classnames';\nimport Icon from 'mastodon/components/icon';\nimport IconButton from 'mastodon/components/icon_button';\nimport Avatar from 'mastodon/components/avatar';\nimport { counterRenderer } from 'mastodon/components/common_counter';\nimport ShortNumber from 'mastodon/components/short_number';\nimport { NavLink } from 'react-router-dom';\nimport DropdownMenuContainer from 'mastodon/containers/dropdown_menu_container';\nimport AccountNoteContainer from '../containers/account_note_container';\n\nconst messages = defineMessages({\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  cancel_follow_request: { id: 'account.cancel_follow_request', defaultMessage: 'Cancel follow request' },\n  requested: { id: 'account.requested', defaultMessage: 'Awaiting approval. Click to cancel follow request' },\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n  edit_profile: { id: 'account.edit_profile', defaultMessage: 'Edit profile' },\n  linkVerifiedOn: { id: 'account.link_verified_on', defaultMessage: 'Ownership of this link was checked on {date}' },\n  account_locked: { id: 'account.locked_info', defaultMessage: 'This account privacy status is set to locked. The owner manually reviews who can follow them.' },\n  mention: { id: 'account.mention', defaultMessage: 'Mention @{name}' },\n  direct: { id: 'account.direct', defaultMessage: 'Direct message @{name}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  block: { id: 'account.block', defaultMessage: 'Block @{name}' },\n  mute: { id: 'account.mute', defaultMessage: 'Mute @{name}' },\n  report: { id: 'account.report', defaultMessage: 'Report @{name}' },\n  share: { id: 'account.share', defaultMessage: 'Share @{name}\\'s profile' },\n  media: { id: 'account.media', defaultMessage: 'Media' },\n  blockDomain: { id: 'account.block_domain', defaultMessage: 'Block domain {domain}' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n  hideReblogs: { id: 'account.hide_reblogs', defaultMessage: 'Hide boosts from @{name}' },\n  showReblogs: { id: 'account.show_reblogs', defaultMessage: 'Show boosts from @{name}' },\n  enableNotifications: { id: 'account.enable_notifications', defaultMessage: 'Notify me when @{name} posts' },\n  disableNotifications: { id: 'account.disable_notifications', defaultMessage: 'Stop notifying me when @{name} posts' },\n  pins: { id: 'navigation_bar.pins', defaultMessage: 'Pinned toots' },\n  preferences: { id: 'navigation_bar.preferences', defaultMessage: 'Preferences' },\n  follow_requests: { id: 'navigation_bar.follow_requests', defaultMessage: 'Follow requests' },\n  favourites: { id: 'navigation_bar.favourites', defaultMessage: 'Favourites' },\n  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n  blocks: { id: 'navigation_bar.blocks', defaultMessage: 'Blocked users' },\n  domain_blocks: { id: 'navigation_bar.domain_blocks', defaultMessage: 'Blocked domains' },\n  mutes: { id: 'navigation_bar.mutes', defaultMessage: 'Muted users' },\n  endorse: { id: 'account.endorse', defaultMessage: 'Feature on profile' },\n  unendorse: { id: 'account.unendorse', defaultMessage: 'Don\\'t feature on profile' },\n  add_or_remove_from_list: { id: 'account.add_or_remove_from_list', defaultMessage: 'Add or Remove from lists' },\n  admin_account: { id: 'status.admin_account', defaultMessage: 'Open moderation interface for @{name}' },\n});\n\nconst dateFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n  hour12: false,\n  hour: '2-digit',\n  minute: '2-digit',\n};\n\nexport default @injectIntl\nclass Header extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map,\n    identity_props: ImmutablePropTypes.list,\n    onFollow: PropTypes.func.isRequired,\n    onBlock: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onDirect: PropTypes.func.isRequired,\n    onReblogToggle: PropTypes.func.isRequired,\n    onNotifyToggle: PropTypes.func.isRequired,\n    onReport: PropTypes.func.isRequired,\n    onMute: PropTypes.func.isRequired,\n    onBlockDomain: PropTypes.func.isRequired,\n    onUnblockDomain: PropTypes.func.isRequired,\n    onEndorseToggle: PropTypes.func.isRequired,\n    onAddToList: PropTypes.func.isRequired,\n    onEditAccountNote: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    domain: PropTypes.string.isRequired,\n  };\n\n  openEditProfile = () => {\n    window.open('/settings/profile', '_blank');\n  }\n\n  isStatusesPageActive = (match, location) => {\n    if (!match) {\n      return false;\n    }\n\n    return !location.pathname.match(/\\/(followers|following)\\/?$/);\n  }\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  render () {\n    const { account, intl, domain, identity_proofs } = this.props;\n\n    if (!account) {\n      return null;\n    }\n\n    const suspended = account.get('suspended');\n\n    let info        = [];\n    let actionBtn   = '';\n    let bellBtn     = '';\n    let lockedIcon  = '';\n    let menu        = [];\n\n    if (me !== account.get('id') && account.getIn(['relationship', 'followed_by'])) {\n      info.push(<span key='followed_by' className='relationship-tag'><FormattedMessage id='account.follows_you' defaultMessage='Follows you' /></span>);\n    } else if (me !== account.get('id') && account.getIn(['relationship', 'blocking'])) {\n      info.push(<span key='blocked' className='relationship-tag'><FormattedMessage id='account.blocked' defaultMessage='Blocked' /></span>);\n    }\n\n    if (me !== account.get('id') && account.getIn(['relationship', 'muting'])) {\n      info.push(<span key='muted' className='relationship-tag'><FormattedMessage id='account.muted' defaultMessage='Muted' /></span>);\n    } else if (me !== account.get('id') && account.getIn(['relationship', 'domain_blocking'])) {\n      info.push(<span key='domain_blocked' className='relationship-tag'><FormattedMessage id='account.domain_blocked' defaultMessage='Domain blocked' /></span>);\n    }\n\n    if (account.getIn(['relationship', 'requested']) || account.getIn(['relationship', 'following'])) {\n      bellBtn = <IconButton icon='bell-o' size={24} active={account.getIn(['relationship', 'notifying'])} title={intl.formatMessage(account.getIn(['relationship', 'notifying']) ? messages.disableNotifications : messages.enableNotifications, { name: account.get('username') })} onClick={this.props.onNotifyToggle} />;\n    }\n\n    if (me !== account.get('id')) {\n      if (!account.get('relationship')) { // Wait until the relationship is loaded\n        actionBtn = '';\n      } else if (account.getIn(['relationship', 'requested'])) {\n        actionBtn = <Button className={classNames('logo-button', { 'button--with-bell': bellBtn !== '' })} text={intl.formatMessage(messages.cancel_follow_request)} title={intl.formatMessage(messages.requested)} onClick={this.props.onFollow} />;\n      } else if (!account.getIn(['relationship', 'blocking'])) {\n        actionBtn = <Button disabled={account.getIn(['relationship', 'blocked_by'])} className={classNames('logo-button', { 'button--destructive': account.getIn(['relationship', 'following']), 'button--with-bell': bellBtn !== '' })} text={intl.formatMessage(account.getIn(['relationship', 'following']) ? messages.unfollow : messages.follow)} onClick={this.props.onFollow} />;\n      } else if (account.getIn(['relationship', 'blocking'])) {\n        actionBtn = <Button className='logo-button' text={intl.formatMessage(messages.unblock, { name: account.get('username') })} onClick={this.props.onBlock} />;\n      }\n    } else {\n      actionBtn = <Button className='logo-button' text={intl.formatMessage(messages.edit_profile)} onClick={this.openEditProfile} />;\n    }\n\n    if (account.get('moved') && !account.getIn(['relationship', 'following'])) {\n      actionBtn = '';\n    }\n\n    if (account.get('locked')) {\n      lockedIcon = <Icon id='lock' title={intl.formatMessage(messages.account_locked)} />;\n    }\n\n    if (account.get('id') !== me) {\n      menu.push({ text: intl.formatMessage(messages.mention, { name: account.get('username') }), action: this.props.onMention });\n      menu.push({ text: intl.formatMessage(messages.direct, { name: account.get('username') }), action: this.props.onDirect });\n      menu.push(null);\n    }\n\n    if ('share' in navigator) {\n      menu.push({ text: intl.formatMessage(messages.share, { name: account.get('username') }), action: this.handleShare });\n      menu.push(null);\n    }\n\n    if (account.get('id') === me) {\n      menu.push({ text: intl.formatMessage(messages.edit_profile), href: '/settings/profile' });\n      menu.push({ text: intl.formatMessage(messages.preferences), href: '/settings/preferences' });\n      menu.push({ text: intl.formatMessage(messages.pins), to: '/pinned' });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.follow_requests), to: '/follow_requests' });\n      menu.push({ text: intl.formatMessage(messages.favourites), to: '/favourites' });\n      menu.push({ text: intl.formatMessage(messages.lists), to: '/lists' });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.mutes), to: '/mutes' });\n      menu.push({ text: intl.formatMessage(messages.blocks), to: '/blocks' });\n      menu.push({ text: intl.formatMessage(messages.domain_blocks), to: '/domain_blocks' });\n    } else {\n      if (account.getIn(['relationship', 'following'])) {\n        if (!account.getIn(['relationship', 'muting'])) {\n          if (account.getIn(['relationship', 'showing_reblogs'])) {\n            menu.push({ text: intl.formatMessage(messages.hideReblogs, { name: account.get('username') }), action: this.props.onReblogToggle });\n          } else {\n            menu.push({ text: intl.formatMessage(messages.showReblogs, { name: account.get('username') }), action: this.props.onReblogToggle });\n          }\n        }\n\n        menu.push({ text: intl.formatMessage(account.getIn(['relationship', 'endorsed']) ? messages.unendorse : messages.endorse), action: this.props.onEndorseToggle });\n        menu.push({ text: intl.formatMessage(messages.add_or_remove_from_list), action: this.props.onAddToList });\n        menu.push(null);\n      }\n\n      if (account.getIn(['relationship', 'muting'])) {\n        menu.push({ text: intl.formatMessage(messages.unmute, { name: account.get('username') }), action: this.props.onMute });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.mute, { name: account.get('username') }), action: this.props.onMute });\n      }\n\n      if (account.getIn(['relationship', 'blocking'])) {\n        menu.push({ text: intl.formatMessage(messages.unblock, { name: account.get('username') }), action: this.props.onBlock });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.block, { name: account.get('username') }), action: this.props.onBlock });\n      }\n\n      menu.push({ text: intl.formatMessage(messages.report, { name: account.get('username') }), action: this.props.onReport });\n    }\n\n    if (account.get('acct') !== account.get('username')) {\n      const domain = account.get('acct').split('@')[1];\n\n      menu.push(null);\n\n      if (account.getIn(['relationship', 'domain_blocking'])) {\n        menu.push({ text: intl.formatMessage(messages.unblockDomain, { domain }), action: this.props.onUnblockDomain });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.blockDomain, { domain }), action: this.props.onBlockDomain });\n      }\n    }\n\n    if (account.get('id') !== me && isStaff) {\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.admin_account, { name: account.get('username') }), href: `/admin/accounts/${account.get('id')}` });\n    }\n\n    const content         = { __html: account.get('note_emojified') };\n    const displayNameHtml = { __html: account.get('display_name_html') };\n    const fields          = account.get('fields');\n    const acct            = account.get('acct').indexOf('@') === -1 && domain ? `${account.get('acct')}@${domain}` : account.get('acct');\n\n    let badge;\n\n    if (account.get('bot')) {\n      badge = (<div className='account-role bot'><FormattedMessage id='account.badges.bot' defaultMessage='Bot' /></div>);\n    } else if (account.get('group')) {\n      badge = (<div className='account-role group'><FormattedMessage id='account.badges.group' defaultMessage='Group' /></div>);\n    } else {\n      badge = null;\n    }\n\n    return (\n      <div className={classNames('account__header', { inactive: !!account.get('moved') })} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n        <div className='account__header__image'>\n          <div className='account__header__info'>\n            {!suspended && info}\n          </div>\n\n          <img src={autoPlayGif ? account.get('header') : account.get('header_static')} alt='' className='parallax' />\n        </div>\n\n        <div className='account__header__bar'>\n          <div className='account__header__tabs'>\n            <a className='avatar' href={account.get('url')} rel='noopener noreferrer' target='_blank'>\n              <Avatar account={account} size={90} />\n            </a>\n\n            <div className='spacer' />\n\n            {!suspended && (\n              <div className='account__header__tabs__buttons'>\n                {actionBtn}\n                {bellBtn}\n\n                <DropdownMenuContainer items={menu} icon='ellipsis-v' size={24} direction='right' />\n              </div>\n            )}\n          </div>\n\n          <div className='account__header__tabs__name'>\n            <h1>\n              <span dangerouslySetInnerHTML={displayNameHtml} /> {badge}\n              <small>@{acct} {lockedIcon}</small>\n            </h1>\n          </div>\n\n          <div className='account__header__extra'>\n            <div className='account__header__bio'>\n              {(fields.size > 0 || identity_proofs.size > 0) && (\n                <div className='account__header__fields'>\n                  {identity_proofs.map((proof, i) => (\n                    <dl key={i}>\n                      <dt dangerouslySetInnerHTML={{ __html: proof.get('provider') }} />\n\n                      <dd className='verified'>\n                        <a href={proof.get('proof_url')} target='_blank' rel='noopener noreferrer'><span title={intl.formatMessage(messages.linkVerifiedOn, { date: intl.formatDate(proof.get('updated_at'), dateFormatOptions) })}>\n                          <Icon id='check' className='verified__mark' />\n                        </span></a>\n                        <a href={proof.get('profile_url')} target='_blank' rel='noopener noreferrer'><span dangerouslySetInnerHTML={{ __html: ' '+proof.get('provider_username') }} /></a>\n                      </dd>\n                    </dl>\n                  ))}\n                  {fields.map((pair, i) => (\n                    <dl key={i}>\n                      <dt dangerouslySetInnerHTML={{ __html: pair.get('name_emojified') }} title={pair.get('name')} className='translate' />\n\n                      <dd className={`${pair.get('verified_at') ? 'verified' : ''} translate`} title={pair.get('value_plain')}>\n                        {pair.get('verified_at') && <span title={intl.formatMessage(messages.linkVerifiedOn, { date: intl.formatDate(pair.get('verified_at'), dateFormatOptions) })}><Icon id='check' className='verified__mark' /></span>} <span dangerouslySetInnerHTML={{ __html: pair.get('value_emojified') }} />\n                      </dd>\n                    </dl>\n                  ))}\n                </div>\n              )}\n\n              {account.get('id') !== me && !suspended && <AccountNoteContainer account={account} />}\n\n              {account.get('note').length > 0 && account.get('note') !== '<p></p>' && <div className='account__header__content translate' dangerouslySetInnerHTML={content} />}\n\n              <div className='account__header__joined'><FormattedMessage id='account.joined' defaultMessage='Joined {date}' values={{ date: intl.formatDate(account.get('created_at'), { year: 'numeric', month: 'short', day: '2-digit' }) }} /></div>\n            </div>\n\n            {!suspended && (\n              <div className='account__header__extra__links'>\n                <NavLink isActive={this.isStatusesPageActive} activeClassName='active' to={`/accounts/${account.get('id')}`} title={intl.formatNumber(account.get('statuses_count'))}>\n                  <ShortNumber\n                    value={account.get('statuses_count')}\n                    renderer={counterRenderer('statuses')}\n                  />\n                </NavLink>\n\n                <NavLink exact activeClassName='active' to={`/accounts/${account.get('id')}/following`} title={intl.formatNumber(account.get('following_count'))}>\n                  <ShortNumber\n                    value={account.get('following_count')}\n                    renderer={counterRenderer('following')}\n                  />\n                </NavLink>\n\n                <NavLink exact activeClassName='active' to={`/accounts/${account.get('id')}/followers`} title={intl.formatNumber(account.get('followers_count'))}>\n                  <ShortNumber\n                    value={account.get('followers_count')}\n                    renderer={counterRenderer('followers')}\n                  />\n                </NavLink>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"account.unfollow","defaultMessage":"Unfollow"},{"id":"account.follow","defaultMessage":"Follow"},{"id":"account.cancel_follow_request","defaultMessage":"Cancel follow request"},{"id":"account.requested","defaultMessage":"Awaiting approval. Click to cancel follow request"},{"id":"account.unblock","defaultMessage":"Unblock @{name}"},{"id":"account.edit_profile","defaultMessage":"Edit profile"},{"id":"account.link_verified_on","defaultMessage":"Ownership of this link was checked on {date}"},{"id":"account.locked_info","defaultMessage":"This account privacy status is set to locked. The owner manually reviews who can follow them."},{"id":"account.mention","defaultMessage":"Mention @{name}"},{"id":"account.direct","defaultMessage":"Direct message @{name}"},{"id":"account.unmute","defaultMessage":"Unmute @{name}"},{"id":"account.block","defaultMessage":"Block @{name}"},{"id":"account.mute","defaultMessage":"Mute @{name}"},{"id":"account.report","defaultMessage":"Report @{name}"},{"id":"account.share","defaultMessage":"Share @{name}'s profile"},{"id":"account.media","defaultMessage":"Media"},{"id":"account.block_domain","defaultMessage":"Block domain {domain}"},{"id":"account.unblock_domain","defaultMessage":"Unblock domain {domain}"},{"id":"account.hide_reblogs","defaultMessage":"Hide boosts from @{name}"},{"id":"account.show_reblogs","defaultMessage":"Show boosts from @{name}"},{"id":"account.enable_notifications","defaultMessage":"Notify me when @{name} posts"},{"id":"account.disable_notifications","defaultMessage":"Stop notifying me when @{name} posts"},{"id":"navigation_bar.pins","defaultMessage":"Pinned toots"},{"id":"navigation_bar.preferences","defaultMessage":"Preferences"},{"id":"navigation_bar.follow_requests","defaultMessage":"Follow requests"},{"id":"navigation_bar.favourites","defaultMessage":"Favourites"},{"id":"navigation_bar.lists","defaultMessage":"Lists"},{"id":"navigation_bar.blocks","defaultMessage":"Blocked users"},{"id":"navigation_bar.domain_blocks","defaultMessage":"Blocked domains"},{"id":"navigation_bar.mutes","defaultMessage":"Muted users"},{"id":"account.endorse","defaultMessage":"Feature on profile"},{"id":"account.unendorse","defaultMessage":"Don't feature on profile"},{"id":"account.add_or_remove_from_list","defaultMessage":"Add or Remove from lists"},{"id":"status.admin_account","defaultMessage":"Open moderation interface for @{name}"},{"id":"account.follows_you","defaultMessage":"Follows you"},{"id":"account.blocked","defaultMessage":"Blocked"},{"id":"account.muted","defaultMessage":"Muted"},{"id":"account.domain_blocked","defaultMessage":"Domain blocked"},{"id":"account.badges.bot","defaultMessage":"Bot"},{"id":"account.badges.group","defaultMessage":"Group"},{"id":"account.joined","defaultMessage":"Joined {date}"}]}},"sourceType":"module"}