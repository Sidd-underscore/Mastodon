{"ast":null,"code":"import { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { setFilter } from '../../../actions/notifications';\nimport { clearNotifications, requestBrowserPermission } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { openModal } from '../../../actions/modal';\nimport { showAlert } from '../../../actions/alerts';\nvar messages = defineMessages({\n  clearMessage: {\n    \"id\": \"notifications.clear_confirmation\",\n    \"defaultMessage\": \"Are you sure you want to permanently clear all your notifications?\"\n  },\n  clearConfirm: {\n    \"id\": \"notifications.clear\",\n    \"defaultMessage\": \"Clear notifications\"\n  },\n  permissionDenied: {\n    \"id\": \"notifications.permission_denied_alert\",\n    \"defaultMessage\": \"Desktop notifications can't be enabled, as browser permission has been denied before\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    settings: state.getIn(['settings', 'notifications']),\n    pushSettings: state.get('push_notifications'),\n    alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n    browserSupport: state.getIn(['notifications', 'browserSupport']),\n    browserPermission: state.getIn(['notifications', 'browserPermission'])\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {\n  var intl = _ref.intl;\n  return {\n    onChange(path, checked) {\n      if (path[0] === 'push') {\n        if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n          dispatch(requestBrowserPermission(function (permission) {\n            if (permission === 'granted') {\n              dispatch(changePushNotifications(path.slice(1), checked));\n            } else {\n              dispatch(showAlert(undefined, messages.permissionDenied));\n            }\n          }));\n        } else {\n          dispatch(changePushNotifications(path.slice(1), checked));\n        }\n      } else if (path[0] === 'quickFilter') {\n        dispatch(changeSetting(['notifications'].concat(path), checked));\n        dispatch(setFilter('all'));\n      } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n          dispatch(requestBrowserPermission(function (permission) {\n            if (permission === 'granted') {\n              dispatch(changeSetting(['notifications'].concat(path), checked));\n            } else {\n              dispatch(showAlert(undefined, messages.permissionDenied));\n            }\n          }));\n        } else {\n          dispatch(changeSetting(['notifications'].concat(path), checked));\n        }\n      } else {\n        dispatch(changeSetting(['notifications'].concat(path), checked));\n      }\n    },\n\n    onClear() {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(messages.clearMessage),\n        confirm: intl.formatMessage(messages.clearConfirm),\n        onConfirm: function onConfirm() {\n          return dispatch(clearNotifications());\n        }\n      }));\n    },\n\n    onRequestNotificationPermission() {\n      dispatch(requestBrowserPermission());\n    }\n\n  };\n};\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/notifications/containers/column_settings_container.js"],"names":["connect","defineMessages","injectIntl","ColumnSettings","changeSetting","setFilter","clearNotifications","requestBrowserPermission","changeAlerts","changePushNotifications","openModal","showAlert","messages","clearMessage","clearConfirm","permissionDenied","mapStateToProps","state","settings","getIn","pushSettings","get","alertsEnabled","includes","browserSupport","browserPermission","mapDispatchToProps","dispatch","intl","onChange","path","checked","window","Notification","permission","slice","undefined","onClear","message","formatMessage","confirm","onConfirm","onRequestNotificationPermission"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { setFilter } from '../../../actions/notifications';\nimport { clearNotifications, requestBrowserPermission } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { openModal } from '../../../actions/modal';\nimport { showAlert } from '../../../actions/alerts';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(clearNotifications()),\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n"]},"metadata":{"react-intl":{"messages":[{"id":"notifications.clear_confirmation","defaultMessage":"Are you sure you want to permanently clear all your notifications?"},{"id":"notifications.clear","defaultMessage":"Clear notifications"},{"id":"notifications.permission_denied_alert","defaultMessage":"Desktop notifications can't be enabled, as browser permission has been denied before"}]}},"sourceType":"module"}