{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/components/autosuggest_textarea.js\";\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport AutosuggestAccountContainer from '../features/compose/containers/autosuggest_account_container';\nimport AutosuggestEmoji from './autosuggest_emoji';\nimport AutosuggestHashtag from './autosuggest_hashtag';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Textarea from 'react-textarea-autosize';\nimport classNames from 'classnames';\n\nvar textAtCursorMatchesToken = function textAtCursorMatchesToken(str, caretPosition) {\n  var word;\n  var left = str.slice(0, caretPosition).search(/\\S+$/);\n  var right = str.slice(caretPosition).search(/\\s/);\n\n  if (right < 0) {\n    word = str.slice(left);\n  } else {\n    word = str.slice(left, right + caretPosition);\n  }\n\n  if (!word || word.trim().length < 3 || ['@', ':', '#'].indexOf(word[0]) === -1) {\n    return [null, null];\n  }\n\n  word = word.trim().toLowerCase();\n\n  if (word.length > 0) {\n    return [left + 1, word];\n  } else {\n    return [null, null];\n  }\n};\n\nvar AutosuggestTextarea = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(AutosuggestTextarea, _ImmutablePureCompone);\n\n  function AutosuggestTextarea() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n    _this.state = {\n      suggestionsHidden: true,\n      focused: false,\n      selectedSuggestion: 0,\n      lastToken: null,\n      tokenStart: 0\n    };\n\n    _this.onChange = function (e) {\n      var _textAtCursorMatchesT = textAtCursorMatchesToken(e.target.value, e.target.selectionStart),\n          tokenStart = _textAtCursorMatchesT[0],\n          token = _textAtCursorMatchesT[1];\n\n      if (token !== null && _this.state.lastToken !== token) {\n        _this.setState({\n          lastToken: token,\n          selectedSuggestion: 0,\n          tokenStart\n        });\n\n        _this.props.onSuggestionsFetchRequested(token);\n      } else if (token === null) {\n        _this.setState({\n          lastToken: null\n        });\n\n        _this.props.onSuggestionsClearRequested();\n      }\n\n      _this.props.onChange(e);\n    };\n\n    _this.onKeyDown = function (e) {\n      var _this$props = _this.props,\n          suggestions = _this$props.suggestions,\n          disabled = _this$props.disabled;\n      var _this$state = _this.state,\n          selectedSuggestion = _this$state.selectedSuggestion,\n          suggestionsHidden = _this$state.suggestionsHidden;\n\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (e.which === 229 || e.isComposing) {\n        // Ignore key events during text composition\n        // e.key may be a name of the physical key even in this case (e.x. Safari / Chrome on Mac)\n        return;\n      }\n\n      switch (e.key) {\n        case 'Escape':\n          if (suggestions.size === 0 || suggestionsHidden) {\n            document.querySelector('.ui').parentElement.focus();\n          } else {\n            e.preventDefault();\n\n            _this.setState({\n              suggestionsHidden: true\n            });\n          }\n\n          break;\n\n        case 'ArrowDown':\n          if (suggestions.size > 0 && !suggestionsHidden) {\n            e.preventDefault();\n\n            _this.setState({\n              selectedSuggestion: Math.min(selectedSuggestion + 1, suggestions.size - 1)\n            });\n          }\n\n          break;\n\n        case 'ArrowUp':\n          if (suggestions.size > 0 && !suggestionsHidden) {\n            e.preventDefault();\n\n            _this.setState({\n              selectedSuggestion: Math.max(selectedSuggestion - 1, 0)\n            });\n          }\n\n          break;\n\n        case 'Enter':\n        case 'Tab':\n          // Select suggestion\n          if (_this.state.lastToken !== null && suggestions.size > 0 && !suggestionsHidden) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            _this.props.onSuggestionSelected(_this.state.tokenStart, _this.state.lastToken, suggestions.get(selectedSuggestion));\n          }\n\n          break;\n      }\n\n      if (e.defaultPrevented || !_this.props.onKeyDown) {\n        return;\n      }\n\n      _this.props.onKeyDown(e);\n    };\n\n    _this.onBlur = function () {\n      _this.setState({\n        suggestionsHidden: true,\n        focused: false\n      });\n    };\n\n    _this.onFocus = function (e) {\n      _this.setState({\n        focused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(e);\n      }\n    };\n\n    _this.onSuggestionClick = function (e) {\n      var suggestion = _this.props.suggestions.get(e.currentTarget.getAttribute('data-index'));\n\n      e.preventDefault();\n\n      _this.props.onSuggestionSelected(_this.state.tokenStart, _this.state.lastToken, suggestion);\n\n      _this.textarea.focus();\n    };\n\n    _this.setTextarea = function (c) {\n      _this.textarea = c;\n    };\n\n    _this.onPaste = function (e) {\n      if (e.clipboardData && e.clipboardData.files.length === 1) {\n        _this.props.onPaste(e.clipboardData.files);\n\n        e.preventDefault();\n      }\n    };\n\n    _this.renderSuggestion = function (suggestion, i) {\n      var selectedSuggestion = _this.state.selectedSuggestion;\n      var inner, key;\n\n      if (suggestion.type === 'emoji') {\n        inner = /*#__PURE__*/React.createElement(AutosuggestEmoji, {\n          emoji: suggestion,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }\n        });\n        key = suggestion.id;\n      } else if (suggestion.type === 'hashtag') {\n        inner = /*#__PURE__*/React.createElement(AutosuggestHashtag, {\n          tag: suggestion,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }\n        });\n        key = suggestion.name;\n      } else if (suggestion.type === 'account') {\n        inner = /*#__PURE__*/React.createElement(AutosuggestAccountContainer, {\n          id: suggestion.id,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }\n        });\n        key = suggestion.id;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        role: \"button\",\n        tabIndex: \"0\",\n        key: key,\n        \"data-index\": i,\n        className: classNames('autosuggest-textarea__suggestions__item', {\n          selected: i === selectedSuggestion\n        }),\n        onMouseDown: _this.onSuggestionClick,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 7\n        }\n      }, inner);\n    };\n\n    return _this;\n  }\n\n  var _proto = AutosuggestTextarea.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.suggestions !== this.props.suggestions && nextProps.suggestions.size > 0 && this.state.suggestionsHidden && this.state.focused) {\n      this.setState({\n        suggestionsHidden: false\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        value = _this$props2.value,\n        suggestions = _this$props2.suggestions,\n        disabled = _this$props2.disabled,\n        placeholder = _this$props2.placeholder,\n        onKeyUp = _this$props2.onKeyUp,\n        autoFocus = _this$props2.autoFocus,\n        children = _this$props2.children;\n    var suggestionsHidden = this.state.suggestionsHidden;\n    return [/*#__PURE__*/React.createElement(\"div\", {\n      className: \"compose-form__autosuggest-wrapper\",\n      key: \"autosuggest-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autosuggest-textarea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, placeholder), /*#__PURE__*/React.createElement(Textarea, {\n      ref: this.setTextarea,\n      className: \"autosuggest-textarea__textarea\",\n      disabled: disabled,\n      placeholder: placeholder,\n      autoFocus: autoFocus,\n      value: value,\n      onChange: this.onChange,\n      onKeyDown: this.onKeyDown,\n      onKeyUp: onKeyUp,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onPaste: this.onPaste,\n      dir: \"auto\",\n      \"aria-autocomplete\": \"list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }))), children), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autosuggest-textarea__suggestions-wrapper\",\n      key: \"suggestions-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autosuggest-textarea__suggestions \" + (suggestionsHidden || suggestions.isEmpty() ? '' : 'autosuggest-textarea__suggestions--visible'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, suggestions.map(this.renderSuggestion)))];\n  };\n\n  return AutosuggestTextarea;\n}(ImmutablePureComponent);\n\nAutosuggestTextarea.propTypes = {\n  value: PropTypes.string,\n  suggestions: ImmutablePropTypes.list,\n  disabled: PropTypes.bool,\n  placeholder: PropTypes.string,\n  onSuggestionSelected: PropTypes.func.isRequired,\n  onSuggestionsClearRequested: PropTypes.func.isRequired,\n  onSuggestionsFetchRequested: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onKeyUp: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onPaste: PropTypes.func.isRequired,\n  autoFocus: PropTypes.bool\n};\nAutosuggestTextarea.defaultProps = {\n  autoFocus: true\n};\nexport { AutosuggestTextarea as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/components/autosuggest_textarea.js"],"names":["React","AutosuggestAccountContainer","AutosuggestEmoji","AutosuggestHashtag","ImmutablePropTypes","PropTypes","ImmutablePureComponent","Textarea","classNames","textAtCursorMatchesToken","str","caretPosition","word","left","slice","search","right","trim","length","indexOf","toLowerCase","AutosuggestTextarea","state","suggestionsHidden","focused","selectedSuggestion","lastToken","tokenStart","onChange","e","target","value","selectionStart","token","setState","props","onSuggestionsFetchRequested","onSuggestionsClearRequested","onKeyDown","suggestions","disabled","preventDefault","which","isComposing","key","size","document","querySelector","parentElement","focus","Math","min","max","stopPropagation","onSuggestionSelected","get","defaultPrevented","onBlur","onFocus","onSuggestionClick","suggestion","currentTarget","getAttribute","textarea","setTextarea","c","onPaste","clipboardData","files","renderSuggestion","i","inner","type","id","name","selected","componentWillReceiveProps","nextProps","render","placeholder","onKeyUp","autoFocus","children","display","isEmpty","map","propTypes","string","list","bool","func","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AutosuggestAccountContainer from '../features/compose/containers/autosuggest_account_container';\nimport AutosuggestEmoji from './autosuggest_emoji';\nimport AutosuggestHashtag from './autosuggest_hashtag';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Textarea from 'react-textarea-autosize';\nimport classNames from 'classnames';\n\nconst textAtCursorMatchesToken = (str, caretPosition) => {\n  let word;\n\n  let left  = str.slice(0, caretPosition).search(/\\S+$/);\n  let right = str.slice(caretPosition).search(/\\s/);\n\n  if (right < 0) {\n    word = str.slice(left);\n  } else {\n    word = str.slice(left, right + caretPosition);\n  }\n\n  if (!word || word.trim().length < 3 || ['@', ':', '#'].indexOf(word[0]) === -1) {\n    return [null, null];\n  }\n\n  word = word.trim().toLowerCase();\n\n  if (word.length > 0) {\n    return [left + 1, word];\n  } else {\n    return [null, null];\n  }\n};\n\nexport default class AutosuggestTextarea extends ImmutablePureComponent {\n\n  static propTypes = {\n    value: PropTypes.string,\n    suggestions: ImmutablePropTypes.list,\n    disabled: PropTypes.bool,\n    placeholder: PropTypes.string,\n    onSuggestionSelected: PropTypes.func.isRequired,\n    onSuggestionsClearRequested: PropTypes.func.isRequired,\n    onSuggestionsFetchRequested: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onKeyUp: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    onPaste: PropTypes.func.isRequired,\n    autoFocus: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    autoFocus: true,\n  };\n\n  state = {\n    suggestionsHidden: true,\n    focused: false,\n    selectedSuggestion: 0,\n    lastToken: null,\n    tokenStart: 0,\n  };\n\n  onChange = (e) => {\n    const [ tokenStart, token ] = textAtCursorMatchesToken(e.target.value, e.target.selectionStart);\n\n    if (token !== null && this.state.lastToken !== token) {\n      this.setState({ lastToken: token, selectedSuggestion: 0, tokenStart });\n      this.props.onSuggestionsFetchRequested(token);\n    } else if (token === null) {\n      this.setState({ lastToken: null });\n      this.props.onSuggestionsClearRequested();\n    }\n\n    this.props.onChange(e);\n  }\n\n  onKeyDown = (e) => {\n    const { suggestions, disabled } = this.props;\n    const { selectedSuggestion, suggestionsHidden } = this.state;\n\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (e.which === 229 || e.isComposing) {\n      // Ignore key events during text composition\n      // e.key may be a name of the physical key even in this case (e.x. Safari / Chrome on Mac)\n      return;\n    }\n\n    switch(e.key) {\n    case 'Escape':\n      if (suggestions.size === 0 || suggestionsHidden) {\n        document.querySelector('.ui').parentElement.focus();\n      } else {\n        e.preventDefault();\n        this.setState({ suggestionsHidden: true });\n      }\n\n      break;\n    case 'ArrowDown':\n      if (suggestions.size > 0 && !suggestionsHidden) {\n        e.preventDefault();\n        this.setState({ selectedSuggestion: Math.min(selectedSuggestion + 1, suggestions.size - 1) });\n      }\n\n      break;\n    case 'ArrowUp':\n      if (suggestions.size > 0 && !suggestionsHidden) {\n        e.preventDefault();\n        this.setState({ selectedSuggestion: Math.max(selectedSuggestion - 1, 0) });\n      }\n\n      break;\n    case 'Enter':\n    case 'Tab':\n      // Select suggestion\n      if (this.state.lastToken !== null && suggestions.size > 0 && !suggestionsHidden) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.props.onSuggestionSelected(this.state.tokenStart, this.state.lastToken, suggestions.get(selectedSuggestion));\n      }\n\n      break;\n    }\n\n    if (e.defaultPrevented || !this.props.onKeyDown) {\n      return;\n    }\n\n    this.props.onKeyDown(e);\n  }\n\n  onBlur = () => {\n    this.setState({ suggestionsHidden: true, focused: false });\n  }\n\n  onFocus = (e) => {\n    this.setState({ focused: true });\n    if (this.props.onFocus) {\n      this.props.onFocus(e);\n    }\n  }\n\n  onSuggestionClick = (e) => {\n    const suggestion = this.props.suggestions.get(e.currentTarget.getAttribute('data-index'));\n    e.preventDefault();\n    this.props.onSuggestionSelected(this.state.tokenStart, this.state.lastToken, suggestion);\n    this.textarea.focus();\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.suggestions !== this.props.suggestions && nextProps.suggestions.size > 0 && this.state.suggestionsHidden && this.state.focused) {\n      this.setState({ suggestionsHidden: false });\n    }\n  }\n\n  setTextarea = (c) => {\n    this.textarea = c;\n  }\n\n  onPaste = (e) => {\n    if (e.clipboardData && e.clipboardData.files.length === 1) {\n      this.props.onPaste(e.clipboardData.files);\n      e.preventDefault();\n    }\n  }\n\n  renderSuggestion = (suggestion, i) => {\n    const { selectedSuggestion } = this.state;\n    let inner, key;\n\n    if (suggestion.type === 'emoji') {\n      inner = <AutosuggestEmoji emoji={suggestion} />;\n      key   = suggestion.id;\n    } else if (suggestion.type === 'hashtag') {\n      inner = <AutosuggestHashtag tag={suggestion} />;\n      key   = suggestion.name;\n    } else if (suggestion.type === 'account') {\n      inner = <AutosuggestAccountContainer id={suggestion.id} />;\n      key   = suggestion.id;\n    }\n\n    return (\n      <div role='button' tabIndex='0' key={key} data-index={i} className={classNames('autosuggest-textarea__suggestions__item', { selected: i === selectedSuggestion })} onMouseDown={this.onSuggestionClick}>\n        {inner}\n      </div>\n    );\n  }\n\n  render () {\n    const { value, suggestions, disabled, placeholder, onKeyUp, autoFocus, children } = this.props;\n    const { suggestionsHidden } = this.state;\n\n    return [\n      <div className='compose-form__autosuggest-wrapper' key='autosuggest-wrapper'>\n        <div className='autosuggest-textarea'>\n          <label>\n            <span style={{ display: 'none' }}>{placeholder}</span>\n\n            <Textarea\n              ref={this.setTextarea}\n              className='autosuggest-textarea__textarea'\n              disabled={disabled}\n              placeholder={placeholder}\n              autoFocus={autoFocus}\n              value={value}\n              onChange={this.onChange}\n              onKeyDown={this.onKeyDown}\n              onKeyUp={onKeyUp}\n              onFocus={this.onFocus}\n              onBlur={this.onBlur}\n              onPaste={this.onPaste}\n              dir='auto'\n              aria-autocomplete='list'\n            />\n          </label>\n        </div>\n        {children}\n      </div>,\n\n      <div className='autosuggest-textarea__suggestions-wrapper' key='suggestions-wrapper'>\n        <div className={`autosuggest-textarea__suggestions ${suggestionsHidden || suggestions.isEmpty() ? '' : 'autosuggest-textarea__suggestions--visible'}`}>\n          {suggestions.map(this.renderSuggestion)}\n        </div>\n      </div>,\n    ];\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}