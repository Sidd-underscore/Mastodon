{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/public_timeline/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandPublicTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectPublicStream } from '../../actions/streaming';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"column.public\",\n    \"defaultMessage\": \"Federated timeline\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var columnId = _ref.columnId;\n  var uuid = columnId;\n  var columns = state.getIn(['settings', 'columns']);\n  var index = columns.findIndex(function (c) {\n    return c.get('uuid') === uuid;\n  });\n  var onlyMedia = columnId && index >= 0 ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'public', 'other', 'onlyMedia']);\n  var onlyRemote = columnId && index >= 0 ? columns.get(index).getIn(['params', 'other', 'onlyRemote']) : state.getIn(['settings', 'public', 'other', 'onlyRemote']);\n  var timelineState = state.getIn(['timelines', \"public\" + (onlyMedia ? ':media' : '')]);\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    onlyRemote\n  };\n};\n\nvar PublicTimeline = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(PublicTimeline, _React$PureComponent);\n\n  function PublicTimeline() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handlePin = function () {\n      var _this$props = _this.props,\n          columnId = _this$props.columnId,\n          dispatch = _this$props.dispatch,\n          onlyMedia = _this$props.onlyMedia,\n          onlyRemote = _this$props.onlyRemote;\n\n      if (columnId) {\n        dispatch(removeColumn(columnId));\n      } else {\n        dispatch(addColumn(onlyRemote ? 'REMOTE' : 'PUBLIC', {\n          other: {\n            onlyMedia,\n            onlyRemote\n          }\n        }));\n      }\n    };\n\n    _this.handleMove = function (dir) {\n      var _this$props2 = _this.props,\n          columnId = _this$props2.columnId,\n          dispatch = _this$props2.dispatch;\n      dispatch(moveColumn(columnId, dir));\n    };\n\n    _this.handleHeaderClick = function () {\n      _this.column.scrollTop();\n    };\n\n    _this.setRef = function (c) {\n      _this.column = c;\n    };\n\n    _this.handleLoadMore = function (maxId) {\n      var _this$props3 = _this.props,\n          dispatch = _this$props3.dispatch,\n          onlyMedia = _this$props3.onlyMedia,\n          onlyRemote = _this$props3.onlyRemote;\n      dispatch(expandPublicTimeline({\n        maxId,\n        onlyMedia,\n        onlyRemote\n      }));\n    };\n\n    return _this;\n  }\n\n  var _proto = PublicTimeline.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props4 = this.props,\n        dispatch = _this$props4.dispatch,\n        onlyMedia = _this$props4.onlyMedia,\n        onlyRemote = _this$props4.onlyRemote;\n    dispatch(expandPublicTimeline({\n      onlyMedia,\n      onlyRemote\n    }));\n    this.disconnect = dispatch(connectPublicStream({\n      onlyMedia,\n      onlyRemote\n    }));\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.onlyMedia !== this.props.onlyMedia || prevProps.onlyRemote !== this.props.onlyRemote) {\n      var _this$props5 = this.props,\n          dispatch = _this$props5.dispatch,\n          onlyMedia = _this$props5.onlyMedia,\n          onlyRemote = _this$props5.onlyRemote;\n      this.disconnect();\n      dispatch(expandPublicTimeline({\n        onlyMedia,\n        onlyRemote\n      }));\n      this.disconnect = dispatch(connectPublicStream({\n        onlyMedia,\n        onlyRemote\n      }));\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props6 = this.props,\n        intl = _this$props6.intl,\n        columnId = _this$props6.columnId,\n        hasUnread = _this$props6.hasUnread,\n        multiColumn = _this$props6.multiColumn,\n        onlyMedia = _this$props6.onlyMedia,\n        onlyRemote = _this$props6.onlyRemote;\n    var pinned = !!columnId;\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      ref: this.setRef,\n      label: intl.formatMessage(messages.title),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      icon: \"globe\",\n      active: hasUnread,\n      title: intl.formatMessage(messages.title),\n      onPin: this.handlePin,\n      onMove: this.handleMove,\n      onClick: this.handleHeaderClick,\n      pinned: pinned,\n      multiColumn: multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ColumnSettingsContainer, {\n      columnId: columnId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(StatusListContainer, {\n      timelineId: \"public\" + (onlyRemote ? ':remote' : '') + (onlyMedia ? ':media' : ''),\n      onLoadMore: this.handleLoadMore,\n      trackScroll: !pinned,\n      scrollKey: \"public_timeline-\" + columnId,\n      emptyMessage: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"empty_column.public\",\n        defaultMessage: \"There is nothing here! Write something publicly, or manually follow users from other servers to fill it up\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }\n      }),\n      bindToDocument: !multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return PublicTimeline;\n}(React.PureComponent), _class2.contextTypes = {\n  router: PropTypes.object\n}, _class2.defaultProps = {\n  onlyMedia: false\n}, _class2.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired,\n  columnId: PropTypes.string,\n  multiColumn: PropTypes.bool,\n  hasUnread: PropTypes.bool,\n  onlyMedia: PropTypes.bool,\n  onlyRemote: PropTypes.bool\n}, _temp)) || _class) || _class);\nexport { PublicTimeline as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/public_timeline/index.js"],"names":["React","connect","defineMessages","injectIntl","FormattedMessage","PropTypes","StatusListContainer","Column","ColumnHeader","expandPublicTimeline","addColumn","removeColumn","moveColumn","ColumnSettingsContainer","connectPublicStream","messages","title","mapStateToProps","state","columnId","uuid","columns","getIn","index","findIndex","c","get","onlyMedia","onlyRemote","timelineState","hasUnread","PublicTimeline","handlePin","props","dispatch","other","handleMove","dir","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","componentDidMount","disconnect","componentDidUpdate","prevProps","componentWillUnmount","render","intl","multiColumn","pinned","formatMessage","PureComponent","contextTypes","router","object","defaultProps","propTypes","func","isRequired","string","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandPublicTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectPublicStream } from '../../actions/streaming';\n\nconst messages = defineMessages({\n  title: { id: 'column.public', defaultMessage: 'Federated timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'public', 'other', 'onlyMedia']);\n  const onlyRemote = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyRemote']) : state.getIn(['settings', 'public', 'other', 'onlyRemote']);\n  const timelineState = state.getIn(['timelines', `public${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    onlyRemote,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass PublicTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasUnread: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    onlyRemote: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia, onlyRemote } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn(onlyRemote ? 'REMOTE' : 'PUBLIC', { other: { onlyMedia, onlyRemote } }));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n    dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n    this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.onlyMedia !== this.props.onlyMedia || prevProps.onlyRemote !== this.props.onlyRemote) {\n      const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n      this.disconnect();\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n      this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n    dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote }));\n  }\n\n  render () {\n    const { intl, columnId, hasUnread, multiColumn, onlyMedia, onlyRemote } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='globe'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          timelineId={`public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          trackScroll={!pinned}\n          scrollKey={`public_timeline-${columnId}`}\n          emptyMessage={<FormattedMessage id='empty_column.public' defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up' />}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"column.public","defaultMessage":"Federated timeline"},{"id":"empty_column.public","defaultMessage":"There is nothing here! Write something publicly, or manually follow users from other servers to fill it up"}]}},"sourceType":"module"}