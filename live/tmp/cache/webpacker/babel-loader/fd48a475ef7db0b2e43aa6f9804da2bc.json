{"ast":null,"code":"import api from '../api';\nimport { importFetchedAccounts } from './importer';\nimport { showAlertForError } from './alerts';\nexport var LIST_FETCH_REQUEST = 'LIST_FETCH_REQUEST';\nexport var LIST_FETCH_SUCCESS = 'LIST_FETCH_SUCCESS';\nexport var LIST_FETCH_FAIL = 'LIST_FETCH_FAIL';\nexport var LISTS_FETCH_REQUEST = 'LISTS_FETCH_REQUEST';\nexport var LISTS_FETCH_SUCCESS = 'LISTS_FETCH_SUCCESS';\nexport var LISTS_FETCH_FAIL = 'LISTS_FETCH_FAIL';\nexport var LIST_EDITOR_TITLE_CHANGE = 'LIST_EDITOR_TITLE_CHANGE';\nexport var LIST_EDITOR_RESET = 'LIST_EDITOR_RESET';\nexport var LIST_EDITOR_SETUP = 'LIST_EDITOR_SETUP';\nexport var LIST_CREATE_REQUEST = 'LIST_CREATE_REQUEST';\nexport var LIST_CREATE_SUCCESS = 'LIST_CREATE_SUCCESS';\nexport var LIST_CREATE_FAIL = 'LIST_CREATE_FAIL';\nexport var LIST_UPDATE_REQUEST = 'LIST_UPDATE_REQUEST';\nexport var LIST_UPDATE_SUCCESS = 'LIST_UPDATE_SUCCESS';\nexport var LIST_UPDATE_FAIL = 'LIST_UPDATE_FAIL';\nexport var LIST_DELETE_REQUEST = 'LIST_DELETE_REQUEST';\nexport var LIST_DELETE_SUCCESS = 'LIST_DELETE_SUCCESS';\nexport var LIST_DELETE_FAIL = 'LIST_DELETE_FAIL';\nexport var LIST_ACCOUNTS_FETCH_REQUEST = 'LIST_ACCOUNTS_FETCH_REQUEST';\nexport var LIST_ACCOUNTS_FETCH_SUCCESS = 'LIST_ACCOUNTS_FETCH_SUCCESS';\nexport var LIST_ACCOUNTS_FETCH_FAIL = 'LIST_ACCOUNTS_FETCH_FAIL';\nexport var LIST_EDITOR_SUGGESTIONS_CHANGE = 'LIST_EDITOR_SUGGESTIONS_CHANGE';\nexport var LIST_EDITOR_SUGGESTIONS_READY = 'LIST_EDITOR_SUGGESTIONS_READY';\nexport var LIST_EDITOR_SUGGESTIONS_CLEAR = 'LIST_EDITOR_SUGGESTIONS_CLEAR';\nexport var LIST_EDITOR_ADD_REQUEST = 'LIST_EDITOR_ADD_REQUEST';\nexport var LIST_EDITOR_ADD_SUCCESS = 'LIST_EDITOR_ADD_SUCCESS';\nexport var LIST_EDITOR_ADD_FAIL = 'LIST_EDITOR_ADD_FAIL';\nexport var LIST_EDITOR_REMOVE_REQUEST = 'LIST_EDITOR_REMOVE_REQUEST';\nexport var LIST_EDITOR_REMOVE_SUCCESS = 'LIST_EDITOR_REMOVE_SUCCESS';\nexport var LIST_EDITOR_REMOVE_FAIL = 'LIST_EDITOR_REMOVE_FAIL';\nexport var LIST_ADDER_RESET = 'LIST_ADDER_RESET';\nexport var LIST_ADDER_SETUP = 'LIST_ADDER_SETUP';\nexport var LIST_ADDER_LISTS_FETCH_REQUEST = 'LIST_ADDER_LISTS_FETCH_REQUEST';\nexport var LIST_ADDER_LISTS_FETCH_SUCCESS = 'LIST_ADDER_LISTS_FETCH_SUCCESS';\nexport var LIST_ADDER_LISTS_FETCH_FAIL = 'LIST_ADDER_LISTS_FETCH_FAIL';\nexport var fetchList = function fetchList(id) {\n  return function (dispatch, getState) {\n    if (getState().getIn(['lists', id])) {\n      return;\n    }\n\n    dispatch(fetchListRequest(id));\n    api(getState).get(\"/api/v1/lists/\" + id).then(function (_ref) {\n      var data = _ref.data;\n      return dispatch(fetchListSuccess(data));\n    }).catch(function (err) {\n      return dispatch(fetchListFail(id, err));\n    });\n  };\n};\nexport var fetchListRequest = function fetchListRequest(id) {\n  return {\n    type: LIST_FETCH_REQUEST,\n    id\n  };\n};\nexport var fetchListSuccess = function fetchListSuccess(list) {\n  return {\n    type: LIST_FETCH_SUCCESS,\n    list\n  };\n};\nexport var fetchListFail = function fetchListFail(id, error) {\n  return {\n    type: LIST_FETCH_FAIL,\n    id,\n    error\n  };\n};\nexport var fetchLists = function fetchLists() {\n  return function (dispatch, getState) {\n    dispatch(fetchListsRequest());\n    api(getState).get('/api/v1/lists').then(function (_ref2) {\n      var data = _ref2.data;\n      return dispatch(fetchListsSuccess(data));\n    }).catch(function (err) {\n      return dispatch(fetchListsFail(err));\n    });\n  };\n};\nexport var fetchListsRequest = function fetchListsRequest() {\n  return {\n    type: LISTS_FETCH_REQUEST\n  };\n};\nexport var fetchListsSuccess = function fetchListsSuccess(lists) {\n  return {\n    type: LISTS_FETCH_SUCCESS,\n    lists\n  };\n};\nexport var fetchListsFail = function fetchListsFail(error) {\n  return {\n    type: LISTS_FETCH_FAIL,\n    error\n  };\n};\nexport var submitListEditor = function submitListEditor(shouldReset) {\n  return function (dispatch, getState) {\n    var listId = getState().getIn(['listEditor', 'listId']);\n    var title = getState().getIn(['listEditor', 'title']);\n\n    if (listId === null) {\n      dispatch(createList(title, shouldReset));\n    } else {\n      dispatch(updateList(listId, title, shouldReset));\n    }\n  };\n};\nexport var setupListEditor = function setupListEditor(listId) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: LIST_EDITOR_SETUP,\n      list: getState().getIn(['lists', listId])\n    });\n    dispatch(fetchListAccounts(listId));\n  };\n};\nexport var changeListEditorTitle = function changeListEditorTitle(value) {\n  return {\n    type: LIST_EDITOR_TITLE_CHANGE,\n    value\n  };\n};\nexport var createList = function createList(title, shouldReset) {\n  return function (dispatch, getState) {\n    dispatch(createListRequest());\n    api(getState).post('/api/v1/lists', {\n      title\n    }).then(function (_ref3) {\n      var data = _ref3.data;\n      dispatch(createListSuccess(data));\n\n      if (shouldReset) {\n        dispatch(resetListEditor());\n      }\n    }).catch(function (err) {\n      return dispatch(createListFail(err));\n    });\n  };\n};\nexport var createListRequest = function createListRequest() {\n  return {\n    type: LIST_CREATE_REQUEST\n  };\n};\nexport var createListSuccess = function createListSuccess(list) {\n  return {\n    type: LIST_CREATE_SUCCESS,\n    list\n  };\n};\nexport var createListFail = function createListFail(error) {\n  return {\n    type: LIST_CREATE_FAIL,\n    error\n  };\n};\nexport var updateList = function updateList(id, title, shouldReset, replies_policy) {\n  return function (dispatch, getState) {\n    dispatch(updateListRequest(id));\n    api(getState).put(\"/api/v1/lists/\" + id, {\n      title,\n      replies_policy\n    }).then(function (_ref4) {\n      var data = _ref4.data;\n      dispatch(updateListSuccess(data));\n\n      if (shouldReset) {\n        dispatch(resetListEditor());\n      }\n    }).catch(function (err) {\n      return dispatch(updateListFail(id, err));\n    });\n  };\n};\nexport var updateListRequest = function updateListRequest(id) {\n  return {\n    type: LIST_UPDATE_REQUEST,\n    id\n  };\n};\nexport var updateListSuccess = function updateListSuccess(list) {\n  return {\n    type: LIST_UPDATE_SUCCESS,\n    list\n  };\n};\nexport var updateListFail = function updateListFail(id, error) {\n  return {\n    type: LIST_UPDATE_FAIL,\n    id,\n    error\n  };\n};\nexport var resetListEditor = function resetListEditor() {\n  return {\n    type: LIST_EDITOR_RESET\n  };\n};\nexport var deleteList = function deleteList(id) {\n  return function (dispatch, getState) {\n    dispatch(deleteListRequest(id));\n    api(getState).delete(\"/api/v1/lists/\" + id).then(function () {\n      return dispatch(deleteListSuccess(id));\n    }).catch(function (err) {\n      return dispatch(deleteListFail(id, err));\n    });\n  };\n};\nexport var deleteListRequest = function deleteListRequest(id) {\n  return {\n    type: LIST_DELETE_REQUEST,\n    id\n  };\n};\nexport var deleteListSuccess = function deleteListSuccess(id) {\n  return {\n    type: LIST_DELETE_SUCCESS,\n    id\n  };\n};\nexport var deleteListFail = function deleteListFail(id, error) {\n  return {\n    type: LIST_DELETE_FAIL,\n    id,\n    error\n  };\n};\nexport var fetchListAccounts = function fetchListAccounts(listId) {\n  return function (dispatch, getState) {\n    dispatch(fetchListAccountsRequest(listId));\n    api(getState).get(\"/api/v1/lists/\" + listId + \"/accounts\", {\n      params: {\n        limit: 0\n      }\n    }).then(function (_ref5) {\n      var data = _ref5.data;\n      dispatch(importFetchedAccounts(data));\n      dispatch(fetchListAccountsSuccess(listId, data));\n    }).catch(function (err) {\n      return dispatch(fetchListAccountsFail(listId, err));\n    });\n  };\n};\nexport var fetchListAccountsRequest = function fetchListAccountsRequest(id) {\n  return {\n    type: LIST_ACCOUNTS_FETCH_REQUEST,\n    id\n  };\n};\nexport var fetchListAccountsSuccess = function fetchListAccountsSuccess(id, accounts, next) {\n  return {\n    type: LIST_ACCOUNTS_FETCH_SUCCESS,\n    id,\n    accounts,\n    next\n  };\n};\nexport var fetchListAccountsFail = function fetchListAccountsFail(id, error) {\n  return {\n    type: LIST_ACCOUNTS_FETCH_FAIL,\n    id,\n    error\n  };\n};\nexport var fetchListSuggestions = function fetchListSuggestions(q) {\n  return function (dispatch, getState) {\n    var params = {\n      q,\n      resolve: false,\n      limit: 4,\n      following: true\n    };\n    api(getState).get('/api/v1/accounts/search', {\n      params\n    }).then(function (_ref6) {\n      var data = _ref6.data;\n      dispatch(importFetchedAccounts(data));\n      dispatch(fetchListSuggestionsReady(q, data));\n    }).catch(function (error) {\n      return dispatch(showAlertForError(error));\n    });\n  };\n};\nexport var fetchListSuggestionsReady = function fetchListSuggestionsReady(query, accounts) {\n  return {\n    type: LIST_EDITOR_SUGGESTIONS_READY,\n    query,\n    accounts\n  };\n};\nexport var clearListSuggestions = function clearListSuggestions() {\n  return {\n    type: LIST_EDITOR_SUGGESTIONS_CLEAR\n  };\n};\nexport var changeListSuggestions = function changeListSuggestions(value) {\n  return {\n    type: LIST_EDITOR_SUGGESTIONS_CHANGE,\n    value\n  };\n};\nexport var addToListEditor = function addToListEditor(accountId) {\n  return function (dispatch, getState) {\n    dispatch(addToList(getState().getIn(['listEditor', 'listId']), accountId));\n  };\n};\nexport var addToList = function addToList(listId, accountId) {\n  return function (dispatch, getState) {\n    dispatch(addToListRequest(listId, accountId));\n    api(getState).post(\"/api/v1/lists/\" + listId + \"/accounts\", {\n      account_ids: [accountId]\n    }).then(function () {\n      return dispatch(addToListSuccess(listId, accountId));\n    }).catch(function (err) {\n      return dispatch(addToListFail(listId, accountId, err));\n    });\n  };\n};\nexport var addToListRequest = function addToListRequest(listId, accountId) {\n  return {\n    type: LIST_EDITOR_ADD_REQUEST,\n    listId,\n    accountId\n  };\n};\nexport var addToListSuccess = function addToListSuccess(listId, accountId) {\n  return {\n    type: LIST_EDITOR_ADD_SUCCESS,\n    listId,\n    accountId\n  };\n};\nexport var addToListFail = function addToListFail(listId, accountId, error) {\n  return {\n    type: LIST_EDITOR_ADD_FAIL,\n    listId,\n    accountId,\n    error\n  };\n};\nexport var removeFromListEditor = function removeFromListEditor(accountId) {\n  return function (dispatch, getState) {\n    dispatch(removeFromList(getState().getIn(['listEditor', 'listId']), accountId));\n  };\n};\nexport var removeFromList = function removeFromList(listId, accountId) {\n  return function (dispatch, getState) {\n    dispatch(removeFromListRequest(listId, accountId));\n    api(getState).delete(\"/api/v1/lists/\" + listId + \"/accounts\", {\n      params: {\n        account_ids: [accountId]\n      }\n    }).then(function () {\n      return dispatch(removeFromListSuccess(listId, accountId));\n    }).catch(function (err) {\n      return dispatch(removeFromListFail(listId, accountId, err));\n    });\n  };\n};\nexport var removeFromListRequest = function removeFromListRequest(listId, accountId) {\n  return {\n    type: LIST_EDITOR_REMOVE_REQUEST,\n    listId,\n    accountId\n  };\n};\nexport var removeFromListSuccess = function removeFromListSuccess(listId, accountId) {\n  return {\n    type: LIST_EDITOR_REMOVE_SUCCESS,\n    listId,\n    accountId\n  };\n};\nexport var removeFromListFail = function removeFromListFail(listId, accountId, error) {\n  return {\n    type: LIST_EDITOR_REMOVE_FAIL,\n    listId,\n    accountId,\n    error\n  };\n};\nexport var resetListAdder = function resetListAdder() {\n  return {\n    type: LIST_ADDER_RESET\n  };\n};\nexport var setupListAdder = function setupListAdder(accountId) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: LIST_ADDER_SETUP,\n      account: getState().getIn(['accounts', accountId])\n    });\n    dispatch(fetchLists());\n    dispatch(fetchAccountLists(accountId));\n  };\n};\nexport var fetchAccountLists = function fetchAccountLists(accountId) {\n  return function (dispatch, getState) {\n    dispatch(fetchAccountListsRequest(accountId));\n    api(getState).get(\"/api/v1/accounts/\" + accountId + \"/lists\").then(function (_ref7) {\n      var data = _ref7.data;\n      return dispatch(fetchAccountListsSuccess(accountId, data));\n    }).catch(function (err) {\n      return dispatch(fetchAccountListsFail(accountId, err));\n    });\n  };\n};\nexport var fetchAccountListsRequest = function fetchAccountListsRequest(id) {\n  return {\n    type: LIST_ADDER_LISTS_FETCH_REQUEST,\n    id\n  };\n};\nexport var fetchAccountListsSuccess = function fetchAccountListsSuccess(id, lists) {\n  return {\n    type: LIST_ADDER_LISTS_FETCH_SUCCESS,\n    id,\n    lists\n  };\n};\nexport var fetchAccountListsFail = function fetchAccountListsFail(id, err) {\n  return {\n    type: LIST_ADDER_LISTS_FETCH_FAIL,\n    id,\n    err\n  };\n};\nexport var addToListAdder = function addToListAdder(listId) {\n  return function (dispatch, getState) {\n    dispatch(addToList(listId, getState().getIn(['listAdder', 'accountId'])));\n  };\n};\nexport var removeFromListAdder = function removeFromListAdder(listId) {\n  return function (dispatch, getState) {\n    dispatch(removeFromList(listId, getState().getIn(['listAdder', 'accountId'])));\n  };\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/lists.js"],"names":["api","importFetchedAccounts","showAlertForError","LIST_FETCH_REQUEST","LIST_FETCH_SUCCESS","LIST_FETCH_FAIL","LISTS_FETCH_REQUEST","LISTS_FETCH_SUCCESS","LISTS_FETCH_FAIL","LIST_EDITOR_TITLE_CHANGE","LIST_EDITOR_RESET","LIST_EDITOR_SETUP","LIST_CREATE_REQUEST","LIST_CREATE_SUCCESS","LIST_CREATE_FAIL","LIST_UPDATE_REQUEST","LIST_UPDATE_SUCCESS","LIST_UPDATE_FAIL","LIST_DELETE_REQUEST","LIST_DELETE_SUCCESS","LIST_DELETE_FAIL","LIST_ACCOUNTS_FETCH_REQUEST","LIST_ACCOUNTS_FETCH_SUCCESS","LIST_ACCOUNTS_FETCH_FAIL","LIST_EDITOR_SUGGESTIONS_CHANGE","LIST_EDITOR_SUGGESTIONS_READY","LIST_EDITOR_SUGGESTIONS_CLEAR","LIST_EDITOR_ADD_REQUEST","LIST_EDITOR_ADD_SUCCESS","LIST_EDITOR_ADD_FAIL","LIST_EDITOR_REMOVE_REQUEST","LIST_EDITOR_REMOVE_SUCCESS","LIST_EDITOR_REMOVE_FAIL","LIST_ADDER_RESET","LIST_ADDER_SETUP","LIST_ADDER_LISTS_FETCH_REQUEST","LIST_ADDER_LISTS_FETCH_SUCCESS","LIST_ADDER_LISTS_FETCH_FAIL","fetchList","id","dispatch","getState","getIn","fetchListRequest","get","then","data","fetchListSuccess","catch","err","fetchListFail","type","list","error","fetchLists","fetchListsRequest","fetchListsSuccess","fetchListsFail","lists","submitListEditor","shouldReset","listId","title","createList","updateList","setupListEditor","fetchListAccounts","changeListEditorTitle","value","createListRequest","post","createListSuccess","resetListEditor","createListFail","replies_policy","updateListRequest","put","updateListSuccess","updateListFail","deleteList","deleteListRequest","delete","deleteListSuccess","deleteListFail","fetchListAccountsRequest","params","limit","fetchListAccountsSuccess","fetchListAccountsFail","accounts","next","fetchListSuggestions","q","resolve","following","fetchListSuggestionsReady","query","clearListSuggestions","changeListSuggestions","addToListEditor","accountId","addToList","addToListRequest","account_ids","addToListSuccess","addToListFail","removeFromListEditor","removeFromList","removeFromListRequest","removeFromListSuccess","removeFromListFail","resetListAdder","setupListAdder","account","fetchAccountLists","fetchAccountListsRequest","fetchAccountListsSuccess","fetchAccountListsFail","addToListAdder","removeFromListAdder"],"mappings":"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","sourcesContent":["import api from '../api';\nimport { importFetchedAccounts } from './importer';\nimport { showAlertForError } from './alerts';\n\nexport const LIST_FETCH_REQUEST = 'LIST_FETCH_REQUEST';\nexport const LIST_FETCH_SUCCESS = 'LIST_FETCH_SUCCESS';\nexport const LIST_FETCH_FAIL    = 'LIST_FETCH_FAIL';\n\nexport const LISTS_FETCH_REQUEST = 'LISTS_FETCH_REQUEST';\nexport const LISTS_FETCH_SUCCESS = 'LISTS_FETCH_SUCCESS';\nexport const LISTS_FETCH_FAIL    = 'LISTS_FETCH_FAIL';\n\nexport const LIST_EDITOR_TITLE_CHANGE = 'LIST_EDITOR_TITLE_CHANGE';\nexport const LIST_EDITOR_RESET        = 'LIST_EDITOR_RESET';\nexport const LIST_EDITOR_SETUP        = 'LIST_EDITOR_SETUP';\n\nexport const LIST_CREATE_REQUEST = 'LIST_CREATE_REQUEST';\nexport const LIST_CREATE_SUCCESS = 'LIST_CREATE_SUCCESS';\nexport const LIST_CREATE_FAIL    = 'LIST_CREATE_FAIL';\n\nexport const LIST_UPDATE_REQUEST = 'LIST_UPDATE_REQUEST';\nexport const LIST_UPDATE_SUCCESS = 'LIST_UPDATE_SUCCESS';\nexport const LIST_UPDATE_FAIL    = 'LIST_UPDATE_FAIL';\n\nexport const LIST_DELETE_REQUEST = 'LIST_DELETE_REQUEST';\nexport const LIST_DELETE_SUCCESS = 'LIST_DELETE_SUCCESS';\nexport const LIST_DELETE_FAIL    = 'LIST_DELETE_FAIL';\n\nexport const LIST_ACCOUNTS_FETCH_REQUEST = 'LIST_ACCOUNTS_FETCH_REQUEST';\nexport const LIST_ACCOUNTS_FETCH_SUCCESS = 'LIST_ACCOUNTS_FETCH_SUCCESS';\nexport const LIST_ACCOUNTS_FETCH_FAIL    = 'LIST_ACCOUNTS_FETCH_FAIL';\n\nexport const LIST_EDITOR_SUGGESTIONS_CHANGE = 'LIST_EDITOR_SUGGESTIONS_CHANGE';\nexport const LIST_EDITOR_SUGGESTIONS_READY  = 'LIST_EDITOR_SUGGESTIONS_READY';\nexport const LIST_EDITOR_SUGGESTIONS_CLEAR  = 'LIST_EDITOR_SUGGESTIONS_CLEAR';\n\nexport const LIST_EDITOR_ADD_REQUEST = 'LIST_EDITOR_ADD_REQUEST';\nexport const LIST_EDITOR_ADD_SUCCESS = 'LIST_EDITOR_ADD_SUCCESS';\nexport const LIST_EDITOR_ADD_FAIL    = 'LIST_EDITOR_ADD_FAIL';\n\nexport const LIST_EDITOR_REMOVE_REQUEST = 'LIST_EDITOR_REMOVE_REQUEST';\nexport const LIST_EDITOR_REMOVE_SUCCESS = 'LIST_EDITOR_REMOVE_SUCCESS';\nexport const LIST_EDITOR_REMOVE_FAIL    = 'LIST_EDITOR_REMOVE_FAIL';\n\nexport const LIST_ADDER_RESET = 'LIST_ADDER_RESET';\nexport const LIST_ADDER_SETUP = 'LIST_ADDER_SETUP';\n\nexport const LIST_ADDER_LISTS_FETCH_REQUEST = 'LIST_ADDER_LISTS_FETCH_REQUEST';\nexport const LIST_ADDER_LISTS_FETCH_SUCCESS = 'LIST_ADDER_LISTS_FETCH_SUCCESS';\nexport const LIST_ADDER_LISTS_FETCH_FAIL    = 'LIST_ADDER_LISTS_FETCH_FAIL';\n\nexport const fetchList = id => (dispatch, getState) => {\n  if (getState().getIn(['lists', id])) {\n    return;\n  }\n\n  dispatch(fetchListRequest(id));\n\n  api(getState).get(`/api/v1/lists/${id}`)\n    .then(({ data }) => dispatch(fetchListSuccess(data)))\n    .catch(err => dispatch(fetchListFail(id, err)));\n};\n\nexport const fetchListRequest = id => ({\n  type: LIST_FETCH_REQUEST,\n  id,\n});\n\nexport const fetchListSuccess = list => ({\n  type: LIST_FETCH_SUCCESS,\n  list,\n});\n\nexport const fetchListFail = (id, error) => ({\n  type: LIST_FETCH_FAIL,\n  id,\n  error,\n});\n\nexport const fetchLists = () => (dispatch, getState) => {\n  dispatch(fetchListsRequest());\n\n  api(getState).get('/api/v1/lists')\n    .then(({ data }) => dispatch(fetchListsSuccess(data)))\n    .catch(err => dispatch(fetchListsFail(err)));\n};\n\nexport const fetchListsRequest = () => ({\n  type: LISTS_FETCH_REQUEST,\n});\n\nexport const fetchListsSuccess = lists => ({\n  type: LISTS_FETCH_SUCCESS,\n  lists,\n});\n\nexport const fetchListsFail = error => ({\n  type: LISTS_FETCH_FAIL,\n  error,\n});\n\nexport const submitListEditor = shouldReset => (dispatch, getState) => {\n  const listId = getState().getIn(['listEditor', 'listId']);\n  const title  = getState().getIn(['listEditor', 'title']);\n\n  if (listId === null) {\n    dispatch(createList(title, shouldReset));\n  } else {\n    dispatch(updateList(listId, title, shouldReset));\n  }\n};\n\nexport const setupListEditor = listId => (dispatch, getState) => {\n  dispatch({\n    type: LIST_EDITOR_SETUP,\n    list: getState().getIn(['lists', listId]),\n  });\n\n  dispatch(fetchListAccounts(listId));\n};\n\nexport const changeListEditorTitle = value => ({\n  type: LIST_EDITOR_TITLE_CHANGE,\n  value,\n});\n\nexport const createList = (title, shouldReset) => (dispatch, getState) => {\n  dispatch(createListRequest());\n\n  api(getState).post('/api/v1/lists', { title }).then(({ data }) => {\n    dispatch(createListSuccess(data));\n\n    if (shouldReset) {\n      dispatch(resetListEditor());\n    }\n  }).catch(err => dispatch(createListFail(err)));\n};\n\nexport const createListRequest = () => ({\n  type: LIST_CREATE_REQUEST,\n});\n\nexport const createListSuccess = list => ({\n  type: LIST_CREATE_SUCCESS,\n  list,\n});\n\nexport const createListFail = error => ({\n  type: LIST_CREATE_FAIL,\n  error,\n});\n\nexport const updateList = (id, title, shouldReset, replies_policy) => (dispatch, getState) => {\n  dispatch(updateListRequest(id));\n\n  api(getState).put(`/api/v1/lists/${id}`, { title, replies_policy }).then(({ data }) => {\n    dispatch(updateListSuccess(data));\n\n    if (shouldReset) {\n      dispatch(resetListEditor());\n    }\n  }).catch(err => dispatch(updateListFail(id, err)));\n};\n\nexport const updateListRequest = id => ({\n  type: LIST_UPDATE_REQUEST,\n  id,\n});\n\nexport const updateListSuccess = list => ({\n  type: LIST_UPDATE_SUCCESS,\n  list,\n});\n\nexport const updateListFail = (id, error) => ({\n  type: LIST_UPDATE_FAIL,\n  id,\n  error,\n});\n\nexport const resetListEditor = () => ({\n  type: LIST_EDITOR_RESET,\n});\n\nexport const deleteList = id => (dispatch, getState) => {\n  dispatch(deleteListRequest(id));\n\n  api(getState).delete(`/api/v1/lists/${id}`)\n    .then(() => dispatch(deleteListSuccess(id)))\n    .catch(err => dispatch(deleteListFail(id, err)));\n};\n\nexport const deleteListRequest = id => ({\n  type: LIST_DELETE_REQUEST,\n  id,\n});\n\nexport const deleteListSuccess = id => ({\n  type: LIST_DELETE_SUCCESS,\n  id,\n});\n\nexport const deleteListFail = (id, error) => ({\n  type: LIST_DELETE_FAIL,\n  id,\n  error,\n});\n\nexport const fetchListAccounts = listId => (dispatch, getState) => {\n  dispatch(fetchListAccountsRequest(listId));\n\n  api(getState).get(`/api/v1/lists/${listId}/accounts`, { params: { limit: 0 } }).then(({ data }) => {\n    dispatch(importFetchedAccounts(data));\n    dispatch(fetchListAccountsSuccess(listId, data));\n  }).catch(err => dispatch(fetchListAccountsFail(listId, err)));\n};\n\nexport const fetchListAccountsRequest = id => ({\n  type: LIST_ACCOUNTS_FETCH_REQUEST,\n  id,\n});\n\nexport const fetchListAccountsSuccess = (id, accounts, next) => ({\n  type: LIST_ACCOUNTS_FETCH_SUCCESS,\n  id,\n  accounts,\n  next,\n});\n\nexport const fetchListAccountsFail = (id, error) => ({\n  type: LIST_ACCOUNTS_FETCH_FAIL,\n  id,\n  error,\n});\n\nexport const fetchListSuggestions = q => (dispatch, getState) => {\n  const params = {\n    q,\n    resolve: false,\n    limit: 4,\n    following: true,\n  };\n\n  api(getState).get('/api/v1/accounts/search', { params }).then(({ data }) => {\n    dispatch(importFetchedAccounts(data));\n    dispatch(fetchListSuggestionsReady(q, data));\n  }).catch(error => dispatch(showAlertForError(error)));\n};\n\nexport const fetchListSuggestionsReady = (query, accounts) => ({\n  type: LIST_EDITOR_SUGGESTIONS_READY,\n  query,\n  accounts,\n});\n\nexport const clearListSuggestions = () => ({\n  type: LIST_EDITOR_SUGGESTIONS_CLEAR,\n});\n\nexport const changeListSuggestions = value => ({\n  type: LIST_EDITOR_SUGGESTIONS_CHANGE,\n  value,\n});\n\nexport const addToListEditor = accountId => (dispatch, getState) => {\n  dispatch(addToList(getState().getIn(['listEditor', 'listId']), accountId));\n};\n\nexport const addToList = (listId, accountId) => (dispatch, getState) => {\n  dispatch(addToListRequest(listId, accountId));\n\n  api(getState).post(`/api/v1/lists/${listId}/accounts`, { account_ids: [accountId] })\n    .then(() => dispatch(addToListSuccess(listId, accountId)))\n    .catch(err => dispatch(addToListFail(listId, accountId, err)));\n};\n\nexport const addToListRequest = (listId, accountId) => ({\n  type: LIST_EDITOR_ADD_REQUEST,\n  listId,\n  accountId,\n});\n\nexport const addToListSuccess = (listId, accountId) => ({\n  type: LIST_EDITOR_ADD_SUCCESS,\n  listId,\n  accountId,\n});\n\nexport const addToListFail = (listId, accountId, error) => ({\n  type: LIST_EDITOR_ADD_FAIL,\n  listId,\n  accountId,\n  error,\n});\n\nexport const removeFromListEditor = accountId => (dispatch, getState) => {\n  dispatch(removeFromList(getState().getIn(['listEditor', 'listId']), accountId));\n};\n\nexport const removeFromList = (listId, accountId) => (dispatch, getState) => {\n  dispatch(removeFromListRequest(listId, accountId));\n\n  api(getState).delete(`/api/v1/lists/${listId}/accounts`, { params: { account_ids: [accountId] } })\n    .then(() => dispatch(removeFromListSuccess(listId, accountId)))\n    .catch(err => dispatch(removeFromListFail(listId, accountId, err)));\n};\n\nexport const removeFromListRequest = (listId, accountId) => ({\n  type: LIST_EDITOR_REMOVE_REQUEST,\n  listId,\n  accountId,\n});\n\nexport const removeFromListSuccess = (listId, accountId) => ({\n  type: LIST_EDITOR_REMOVE_SUCCESS,\n  listId,\n  accountId,\n});\n\nexport const removeFromListFail = (listId, accountId, error) => ({\n  type: LIST_EDITOR_REMOVE_FAIL,\n  listId,\n  accountId,\n  error,\n});\n\nexport const resetListAdder = () => ({\n  type: LIST_ADDER_RESET,\n});\n\nexport const setupListAdder = accountId => (dispatch, getState) => {\n  dispatch({\n    type: LIST_ADDER_SETUP,\n    account: getState().getIn(['accounts', accountId]),\n  });\n  dispatch(fetchLists());\n  dispatch(fetchAccountLists(accountId));\n};\n\nexport const fetchAccountLists = accountId => (dispatch, getState) => {\n  dispatch(fetchAccountListsRequest(accountId));\n\n  api(getState).get(`/api/v1/accounts/${accountId}/lists`)\n    .then(({ data }) => dispatch(fetchAccountListsSuccess(accountId, data)))\n    .catch(err => dispatch(fetchAccountListsFail(accountId, err)));\n};\n\nexport const fetchAccountListsRequest = id => ({\n  type:LIST_ADDER_LISTS_FETCH_REQUEST,\n  id,\n});\n\nexport const fetchAccountListsSuccess = (id, lists) => ({\n  type: LIST_ADDER_LISTS_FETCH_SUCCESS,\n  id,\n  lists,\n});\n\nexport const fetchAccountListsFail = (id, err) => ({\n  type: LIST_ADDER_LISTS_FETCH_FAIL,\n  id,\n  err,\n});\n\nexport const addToListAdder = listId => (dispatch, getState) => {\n  dispatch(addToList(listId, getState().getIn(['listAdder', 'accountId'])));\n};\n\nexport const removeFromListAdder = listId => (dispatch, getState) => {\n  dispatch(removeFromList(listId, getState().getIn(['listAdder', 'accountId'])));\n};\n\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}