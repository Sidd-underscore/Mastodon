{"ast":null,"code":"import { SEARCH_CHANGE, SEARCH_CLEAR, SEARCH_FETCH_SUCCESS, SEARCH_SHOW, SEARCH_EXPAND_SUCCESS } from '../actions/search';\nimport { COMPOSE_MENTION, COMPOSE_REPLY, COMPOSE_DIRECT } from '../actions/compose';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\nvar initialState = ImmutableMap({\n  value: '',\n  submitted: false,\n  hidden: false,\n  results: ImmutableMap(),\n  searchTerm: ''\n});\nexport default function search(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case SEARCH_CHANGE:\n      return state.set('value', action.value);\n\n    case SEARCH_CLEAR:\n      return state.withMutations(function (map) {\n        map.set('value', '');\n        map.set('results', ImmutableMap());\n        map.set('submitted', false);\n        map.set('hidden', false);\n      });\n\n    case SEARCH_SHOW:\n      return state.set('hidden', false);\n\n    case COMPOSE_REPLY:\n    case COMPOSE_MENTION:\n    case COMPOSE_DIRECT:\n      return state.set('hidden', true);\n\n    case SEARCH_FETCH_SUCCESS:\n      return state.set('results', ImmutableMap({\n        accounts: ImmutableList(action.results.accounts.map(function (item) {\n          return item.id;\n        })),\n        statuses: ImmutableList(action.results.statuses.map(function (item) {\n          return item.id;\n        })),\n        hashtags: fromJS(action.results.hashtags)\n      })).set('submitted', true).set('searchTerm', action.searchTerm);\n\n    case SEARCH_EXPAND_SUCCESS:\n      var results = action.searchType === 'hashtags' ? fromJS(action.results.hashtags) : action.results[action.searchType].map(function (item) {\n        return item.id;\n      });\n      return state.updateIn(['results', action.searchType], function (list) {\n        return list.concat(results);\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/search.js"],"names":["SEARCH_CHANGE","SEARCH_CLEAR","SEARCH_FETCH_SUCCESS","SEARCH_SHOW","SEARCH_EXPAND_SUCCESS","COMPOSE_MENTION","COMPOSE_REPLY","COMPOSE_DIRECT","Map","ImmutableMap","List","ImmutableList","fromJS","initialState","value","submitted","hidden","results","searchTerm","search","state","action","type","set","withMutations","map","accounts","item","id","statuses","hashtags","searchType","updateIn","list","concat"],"mappings":"AAAA,SACEA,aADF,EAEEC,YAFF,EAGEC,oBAHF,EAIEC,WAJF,EAKEC,qBALF,QAMO,mBANP;AAOA,SACEC,eADF,EAEEC,aAFF,EAGEC,cAHF,QAIO,oBAJP;AAKA,SAASC,GAAG,IAAIC,YAAhB,EAA8BC,IAAI,IAAIC,aAAtC,EAAqDC,MAArD,QAAmE,WAAnE;AAEA,IAAMC,YAAY,GAAGJ,YAAY,CAAC;AAChCK,EAAAA,KAAK,EAAE,EADyB;AAEhCC,EAAAA,SAAS,EAAE,KAFqB;AAGhCC,EAAAA,MAAM,EAAE,KAHwB;AAIhCC,EAAAA,OAAO,EAAER,YAAY,EAJW;AAKhCS,EAAAA,UAAU,EAAE;AALoB,CAAD,CAAjC;AAQA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAsCC,MAAtC,EAA8C;AAAA,MAA9BD,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBP,YAAsB;AAAA;;AAC3D,UAAOQ,MAAM,CAACC,IAAd;AACA,SAAKtB,aAAL;AACE,aAAOoB,KAAK,CAACG,GAAN,CAAU,OAAV,EAAmBF,MAAM,CAACP,KAA1B,CAAP;;AACF,SAAKb,YAAL;AACE,aAAOmB,KAAK,CAACI,aAAN,CAAoB,UAAAC,GAAG,EAAI;AAChCA,QAAAA,GAAG,CAACF,GAAJ,CAAQ,OAAR,EAAiB,EAAjB;AACAE,QAAAA,GAAG,CAACF,GAAJ,CAAQ,SAAR,EAAmBd,YAAY,EAA/B;AACAgB,QAAAA,GAAG,CAACF,GAAJ,CAAQ,WAAR,EAAqB,KAArB;AACAE,QAAAA,GAAG,CAACF,GAAJ,CAAQ,QAAR,EAAkB,KAAlB;AACD,OALM,CAAP;;AAMF,SAAKpB,WAAL;AACE,aAAOiB,KAAK,CAACG,GAAN,CAAU,QAAV,EAAoB,KAApB,CAAP;;AACF,SAAKjB,aAAL;AACA,SAAKD,eAAL;AACA,SAAKE,cAAL;AACE,aAAOa,KAAK,CAACG,GAAN,CAAU,QAAV,EAAoB,IAApB,CAAP;;AACF,SAAKrB,oBAAL;AACE,aAAOkB,KAAK,CAACG,GAAN,CAAU,SAAV,EAAqBd,YAAY,CAAC;AACvCiB,QAAAA,QAAQ,EAAEf,aAAa,CAACU,MAAM,CAACJ,OAAP,CAAeS,QAAf,CAAwBD,GAAxB,CAA4B,UAAAE,IAAI;AAAA,iBAAIA,IAAI,CAACC,EAAT;AAAA,SAAhC,CAAD,CADgB;AAEvCC,QAAAA,QAAQ,EAAElB,aAAa,CAACU,MAAM,CAACJ,OAAP,CAAeY,QAAf,CAAwBJ,GAAxB,CAA4B,UAAAE,IAAI;AAAA,iBAAIA,IAAI,CAACC,EAAT;AAAA,SAAhC,CAAD,CAFgB;AAGvCE,QAAAA,QAAQ,EAAElB,MAAM,CAACS,MAAM,CAACJ,OAAP,CAAea,QAAhB;AAHuB,OAAD,CAAjC,EAIHP,GAJG,CAIC,WAJD,EAIc,IAJd,EAIoBA,GAJpB,CAIwB,YAJxB,EAIsCF,MAAM,CAACH,UAJ7C,CAAP;;AAKF,SAAKd,qBAAL;AACE,UAAMa,OAAO,GAAGI,MAAM,CAACU,UAAP,KAAsB,UAAtB,GAAmCnB,MAAM,CAACS,MAAM,CAACJ,OAAP,CAAea,QAAhB,CAAzC,GAAqET,MAAM,CAACJ,OAAP,CAAeI,MAAM,CAACU,UAAtB,EAAkCN,GAAlC,CAAsC,UAAAE,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAT;AAAA,OAA1C,CAArF;AACA,aAAOR,KAAK,CAACY,QAAN,CAAe,CAAC,SAAD,EAAYX,MAAM,CAACU,UAAnB,CAAf,EAA+C,UAAAE,IAAI;AAAA,eAAIA,IAAI,CAACC,MAAL,CAAYjB,OAAZ,CAAJ;AAAA,OAAnD,CAAP;;AACF;AACE,aAAOG,KAAP;AA1BF;AA4BD;AAAA","sourcesContent":["import {\n  SEARCH_CHANGE,\n  SEARCH_CLEAR,\n  SEARCH_FETCH_SUCCESS,\n  SEARCH_SHOW,\n  SEARCH_EXPAND_SUCCESS,\n} from '../actions/search';\nimport {\n  COMPOSE_MENTION,\n  COMPOSE_REPLY,\n  COMPOSE_DIRECT,\n} from '../actions/compose';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\n\nconst initialState = ImmutableMap({\n  value: '',\n  submitted: false,\n  hidden: false,\n  results: ImmutableMap(),\n  searchTerm: '',\n});\n\nexport default function search(state = initialState, action) {\n  switch(action.type) {\n  case SEARCH_CHANGE:\n    return state.set('value', action.value);\n  case SEARCH_CLEAR:\n    return state.withMutations(map => {\n      map.set('value', '');\n      map.set('results', ImmutableMap());\n      map.set('submitted', false);\n      map.set('hidden', false);\n    });\n  case SEARCH_SHOW:\n    return state.set('hidden', false);\n  case COMPOSE_REPLY:\n  case COMPOSE_MENTION:\n  case COMPOSE_DIRECT:\n    return state.set('hidden', true);\n  case SEARCH_FETCH_SUCCESS:\n    return state.set('results', ImmutableMap({\n      accounts: ImmutableList(action.results.accounts.map(item => item.id)),\n      statuses: ImmutableList(action.results.statuses.map(item => item.id)),\n      hashtags: fromJS(action.results.hashtags),\n    })).set('submitted', true).set('searchTerm', action.searchTerm);\n  case SEARCH_EXPAND_SUCCESS:\n    const results = action.searchType === 'hashtags' ? fromJS(action.results.hashtags) : action.results[action.searchType].map(item => item.id);\n    return state.updateIn(['results', action.searchType], list => list.concat(results));\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}