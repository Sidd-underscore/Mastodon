{"ast":null,"code":"import { TRENDS_FETCH_REQUEST, TRENDS_FETCH_SUCCESS, TRENDS_FETCH_FAIL } from '../actions/trends';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\nvar initialState = ImmutableMap({\n  items: ImmutableList(),\n  isLoading: false\n});\nexport default function trendsReducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case TRENDS_FETCH_REQUEST:\n      return state.set('isLoading', true);\n\n    case TRENDS_FETCH_SUCCESS:\n      return state.withMutations(function (map) {\n        map.set('items', fromJS(action.trends));\n        map.set('isLoading', false);\n      });\n\n    case TRENDS_FETCH_FAIL:\n      return state.set('isLoading', false);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/trends.js"],"names":["TRENDS_FETCH_REQUEST","TRENDS_FETCH_SUCCESS","TRENDS_FETCH_FAIL","Map","ImmutableMap","List","ImmutableList","fromJS","initialState","items","isLoading","trendsReducer","state","action","type","set","withMutations","map","trends"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,oBAA/B,EAAqDC,iBAArD,QAA8E,mBAA9E;AACA,SAASC,GAAG,IAAIC,YAAhB,EAA8BC,IAAI,IAAIC,aAAtC,EAAqDC,MAArD,QAAmE,WAAnE;AAEA,IAAMC,YAAY,GAAGJ,YAAY,CAAC;AAChCK,EAAAA,KAAK,EAAEH,aAAa,EADY;AAEhCI,EAAAA,SAAS,EAAE;AAFqB,CAAD,CAAjC;AAKA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA6CC,MAA7C,EAAqD;AAAA,MAA9BD,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBJ,YAAsB;AAAA;;AAClE,UAAOK,MAAM,CAACC,IAAd;AACA,SAAKd,oBAAL;AACE,aAAOY,KAAK,CAACG,GAAN,CAAU,WAAV,EAAuB,IAAvB,CAAP;;AACF,SAAKd,oBAAL;AACE,aAAOW,KAAK,CAACI,aAAN,CAAoB,UAAAC,GAAG,EAAI;AAChCA,QAAAA,GAAG,CAACF,GAAJ,CAAQ,OAAR,EAAiBR,MAAM,CAACM,MAAM,CAACK,MAAR,CAAvB;AACAD,QAAAA,GAAG,CAACF,GAAJ,CAAQ,WAAR,EAAqB,KAArB;AACD,OAHM,CAAP;;AAIF,SAAKb,iBAAL;AACE,aAAOU,KAAK,CAACG,GAAN,CAAU,WAAV,EAAuB,KAAvB,CAAP;;AACF;AACE,aAAOH,KAAP;AAXF;AAaD;AAAA","sourcesContent":["import { TRENDS_FETCH_REQUEST, TRENDS_FETCH_SUCCESS, TRENDS_FETCH_FAIL } from '../actions/trends';\nimport { Map as ImmutableMap, List as ImmutableList, fromJS } from 'immutable';\n\nconst initialState = ImmutableMap({\n  items: ImmutableList(),\n  isLoading: false,\n});\n\nexport default function trendsReducer(state = initialState, action) {\n  switch(action.type) {\n  case TRENDS_FETCH_REQUEST:\n    return state.set('isLoading', true);\n  case TRENDS_FETCH_SUCCESS:\n    return state.withMutations(map => {\n      map.set('items', fromJS(action.trends));\n      map.set('isLoading', false);\n    });\n  case TRENDS_FETCH_FAIL:\n    return state.set('isLoading', false);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}