{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/account/components/account_note.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Textarea from 'react-textarea-autosize';\nimport { is } from 'immutable';\nvar messages = defineMessages({\n  placeholder: {\n    \"id\": \"account_note.placeholder\",\n    \"defaultMessage\": \"Click to add a note\"\n  }\n});\n\nvar InlineAlert = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(InlineAlert, _React$PureComponent);\n\n  function InlineAlert() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n    _this.state = {\n      mountMessage: false\n    };\n    return _this;\n  }\n\n  var _proto = InlineAlert.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    if (!this.props.show && nextProps.show) {\n      this.setState({\n        mountMessage: true\n      });\n    } else if (this.props.show && !nextProps.show) {\n      setTimeout(function () {\n        return _this2.setState({\n          mountMessage: false\n        });\n      }, InlineAlert.TRANSITION_DELAY);\n    }\n  };\n\n  _proto.render = function render() {\n    var show = this.props.show;\n    var mountMessage = this.state.mountMessage;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-live\": \"polite\",\n      role: \"status\",\n      className: \"inline-alert\",\n      style: {\n        opacity: show ? 1 : 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, mountMessage && /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"generic.saved\",\n      defaultMessage: \"Saved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 26\n      }\n    }));\n  };\n\n  return InlineAlert;\n}(React.PureComponent);\n\nInlineAlert.propTypes = {\n  show: PropTypes.bool\n};\nInlineAlert.TRANSITION_DELAY = 200;\n\nvar AccountNote = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(AccountNote, _ImmutablePureCompone);\n\n  function AccountNote() {\n    var _this3;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this3 = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n    _this3.state = {\n      value: null,\n      saving: false,\n      saved: false\n    };\n\n    _this3.setTextareaRef = function (c) {\n      _this3.textarea = c;\n    };\n\n    _this3.handleChange = function (e) {\n      _this3.setState({\n        value: e.target.value,\n        saving: false\n      });\n    };\n\n    _this3.handleKeyDown = function (e) {\n      if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n\n        _this3._save();\n\n        if (_this3.textarea) {\n          _this3.textarea.blur();\n        }\n      } else if (e.keyCode === 27) {\n        e.preventDefault();\n\n        _this3._reset(function () {\n          if (_this3.textarea) {\n            _this3.textarea.blur();\n          }\n        });\n      }\n    };\n\n    _this3.handleBlur = function () {\n      if (_this3._isDirty()) {\n        _this3._save();\n      }\n    };\n\n    return _this3;\n  }\n\n  var _proto2 = AccountNote.prototype;\n\n  _proto2.componentWillMount = function componentWillMount() {\n    this._reset();\n  };\n\n  _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var accountWillChange = !is(this.props.account, nextProps.account);\n    var newState = {};\n\n    if (accountWillChange && this._isDirty()) {\n      this._save(false);\n    }\n\n    if (accountWillChange || nextProps.value === this.state.value) {\n      newState.saving = false;\n    }\n\n    if (this.props.value !== nextProps.value) {\n      newState.value = nextProps.value;\n    }\n\n    this.setState(newState);\n  };\n\n  _proto2.componentWillUnmount = function componentWillUnmount() {\n    if (this._isDirty()) {\n      this._save(false);\n    }\n  };\n\n  _proto2._save = function _save(showMessage) {\n    var _this4 = this;\n\n    if (showMessage === void 0) {\n      showMessage = true;\n    }\n\n    this.setState({\n      saving: true\n    }, function () {\n      return _this4.props.onSave(_this4.state.value);\n    });\n\n    if (showMessage) {\n      this.setState({\n        saved: true\n      }, function () {\n        return setTimeout(function () {\n          return _this4.setState({\n            saved: false\n          });\n        }, 2000);\n      });\n    }\n  };\n\n  _proto2._reset = function _reset(callback) {\n    this.setState({\n      value: this.props.value\n    }, callback);\n  };\n\n  _proto2._isDirty = function _isDirty() {\n    return !this.state.saving && this.props.value !== null && this.state.value !== null && this.state.value !== this.props.value;\n  };\n\n  _proto2.render = function render() {\n    var _this$props = this.props,\n        account = _this$props.account,\n        intl = _this$props.intl;\n    var _this$state = this.state,\n        value = _this$state.value,\n        saved = _this$state.saved;\n\n    if (!account) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__header__account-note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"account-note-\" + account.get('id'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"account.account_note_header\",\n      defaultMessage: \"Note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }), \" \", /*#__PURE__*/React.createElement(InlineAlert, {\n      show: saved,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 87\n      }\n    })), /*#__PURE__*/React.createElement(Textarea, {\n      id: \"account-note-\" + account.get('id'),\n      className: \"account__header__account-note__content\",\n      disabled: this.props.value === null || value === null,\n      placeholder: intl.formatMessage(messages.placeholder),\n      value: value || '',\n      onChange: this.handleChange,\n      onKeyDown: this.handleKeyDown,\n      onBlur: this.handleBlur,\n      ref: this.setTextareaRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return AccountNote;\n}(ImmutablePureComponent), _class2.propTypes = {\n  account: ImmutablePropTypes.map.isRequired,\n  value: PropTypes.string,\n  onSave: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired\n}, _temp)) || _class;\n\nexport { AccountNote as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/account/components/account_note.js"],"names":["React","ImmutablePropTypes","PropTypes","defineMessages","injectIntl","FormattedMessage","ImmutablePureComponent","Textarea","is","messages","placeholder","InlineAlert","state","mountMessage","componentWillReceiveProps","nextProps","props","show","setState","setTimeout","TRANSITION_DELAY","render","opacity","PureComponent","propTypes","bool","AccountNote","value","saving","saved","setTextareaRef","c","textarea","handleChange","e","target","handleKeyDown","keyCode","ctrlKey","metaKey","preventDefault","_save","blur","_reset","handleBlur","_isDirty","componentWillMount","accountWillChange","account","newState","componentWillUnmount","showMessage","onSave","callback","intl","get","formatMessage","map","isRequired","string","func","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Textarea from 'react-textarea-autosize';\nimport { is } from 'immutable';\n\nconst messages = defineMessages({\n  placeholder: { id: 'account_note.placeholder', defaultMessage: 'Click to add a note' },\n});\n\nclass InlineAlert extends React.PureComponent {\n\n  static propTypes = {\n    show: PropTypes.bool,\n  };\n\n  state = {\n    mountMessage: false,\n  };\n\n  static TRANSITION_DELAY = 200;\n\n  componentWillReceiveProps (nextProps) {\n    if (!this.props.show && nextProps.show) {\n      this.setState({ mountMessage: true });\n    } else if (this.props.show && !nextProps.show) {\n      setTimeout(() => this.setState({ mountMessage: false }), InlineAlert.TRANSITION_DELAY);\n    }\n  }\n\n  render () {\n    const { show } = this.props;\n    const { mountMessage } = this.state;\n\n    return (\n      <span aria-live='polite' role='status' className='inline-alert' style={{ opacity: show ? 1 : 0 }}>\n        {mountMessage && <FormattedMessage id='generic.saved' defaultMessage='Saved' />}\n      </span>\n    );\n  }\n\n}\n\nexport default @injectIntl\nclass AccountNote extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    value: PropTypes.string,\n    onSave: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    value: null,\n    saving: false,\n    saved: false,\n  };\n\n  componentWillMount () {\n    this._reset();\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const accountWillChange = !is(this.props.account, nextProps.account);\n    const newState = {};\n\n    if (accountWillChange && this._isDirty()) {\n      this._save(false);\n    }\n\n    if (accountWillChange || nextProps.value === this.state.value) {\n      newState.saving = false;\n    }\n\n    if (this.props.value !== nextProps.value) {\n      newState.value = nextProps.value;\n    }\n\n    this.setState(newState);\n  }\n\n  componentWillUnmount () {\n    if (this._isDirty()) {\n      this._save(false);\n    }\n  }\n\n  setTextareaRef = c => {\n    this.textarea = c;\n  }\n\n  handleChange = e => {\n    this.setState({ value: e.target.value, saving: false });\n  };\n\n  handleKeyDown = e => {\n    if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n\n      this._save();\n\n      if (this.textarea) {\n        this.textarea.blur();\n      }\n    } else if (e.keyCode === 27) {\n      e.preventDefault();\n\n      this._reset(() => {\n        if (this.textarea) {\n          this.textarea.blur();\n        }\n      });\n    }\n  }\n\n  handleBlur = () => {\n    if (this._isDirty()) {\n      this._save();\n    }\n  }\n\n  _save (showMessage = true) {\n    this.setState({ saving: true }, () => this.props.onSave(this.state.value));\n\n    if (showMessage) {\n      this.setState({ saved: true }, () => setTimeout(() => this.setState({ saved: false }), 2000));\n    }\n  }\n\n  _reset (callback) {\n    this.setState({ value: this.props.value }, callback);\n  }\n\n  _isDirty () {\n    return !this.state.saving && this.props.value !== null && this.state.value !== null && this.state.value !== this.props.value;\n  }\n\n  render () {\n    const { account, intl } = this.props;\n    const { value, saved } = this.state;\n\n    if (!account) {\n      return null;\n    }\n\n    return (\n      <div className='account__header__account-note'>\n        <label htmlFor={`account-note-${account.get('id')}`}>\n          <FormattedMessage id='account.account_note_header' defaultMessage='Note' /> <InlineAlert show={saved} />\n        </label>\n\n        <Textarea\n          id={`account-note-${account.get('id')}`}\n          className='account__header__account-note__content'\n          disabled={this.props.value === null || value === null}\n          placeholder={intl.formatMessage(messages.placeholder)}\n          value={value || ''}\n          onChange={this.handleChange}\n          onKeyDown={this.handleKeyDown}\n          onBlur={this.handleBlur}\n          ref={this.setTextareaRef}\n        />\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"account_note.placeholder","defaultMessage":"Click to add a note"},{"id":"generic.saved","defaultMessage":"Saved"},{"id":"account.account_note_header","defaultMessage":"Note"}]}},"sourceType":"module"}