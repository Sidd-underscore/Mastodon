{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/directory/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { addColumn, removeColumn, moveColumn, changeColumnParams } from 'mastodon/actions/columns';\nimport { fetchDirectory, expandDirectory } from 'mastodon/actions/directory';\nimport { List as ImmutableList } from 'immutable';\nimport AccountCard from './components/account_card';\nimport RadioButton from 'mastodon/components/radio_button';\nimport classNames from 'classnames';\nimport LoadMore from 'mastodon/components/load_more';\nimport ScrollContainer from 'mastodon/containers/scroll_container';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"column.directory\",\n    \"defaultMessage\": \"Browse profiles\"\n  },\n  recentlyActive: {\n    \"id\": \"directory.recently_active\",\n    \"defaultMessage\": \"Recently active\"\n  },\n  newArrivals: {\n    \"id\": \"directory.new_arrivals\",\n    \"defaultMessage\": \"New arrivals\"\n  },\n  local: {\n    \"id\": \"directory.local\",\n    \"defaultMessage\": \"From {domain} only\"\n  },\n  federated: {\n    \"id\": \"directory.federated\",\n    \"defaultMessage\": \"From known fediverse\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    accountIds: state.getIn(['user_lists', 'directory', 'items'], ImmutableList()),\n    isLoading: state.getIn(['user_lists', 'directory', 'isLoading'], true),\n    domain: state.getIn(['meta', 'domain'])\n  };\n};\n\nvar Directory = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(Directory, _React$PureComponent);\n\n  function Directory() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n    _this.state = {\n      order: null,\n      local: null\n    };\n\n    _this.handlePin = function () {\n      var _this$props = _this.props,\n          columnId = _this$props.columnId,\n          dispatch = _this$props.dispatch;\n\n      if (columnId) {\n        dispatch(removeColumn(columnId));\n      } else {\n        dispatch(addColumn('DIRECTORY', _this.getParams(_this.props, _this.state)));\n      }\n    };\n\n    _this.getParams = function (props, state) {\n      return {\n        order: state.order === null ? props.params.order || 'active' : state.order,\n        local: state.local === null ? props.params.local || false : state.local\n      };\n    };\n\n    _this.handleMove = function (dir) {\n      var _this$props2 = _this.props,\n          columnId = _this$props2.columnId,\n          dispatch = _this$props2.dispatch;\n      dispatch(moveColumn(columnId, dir));\n    };\n\n    _this.handleHeaderClick = function () {\n      _this.column.scrollTop();\n    };\n\n    _this.setRef = function (c) {\n      _this.column = c;\n    };\n\n    _this.handleChangeOrder = function (e) {\n      var _this$props3 = _this.props,\n          dispatch = _this$props3.dispatch,\n          columnId = _this$props3.columnId;\n\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, ['order'], e.target.value));\n      } else {\n        _this.setState({\n          order: e.target.value\n        });\n      }\n    };\n\n    _this.handleChangeLocal = function (e) {\n      var _this$props4 = _this.props,\n          dispatch = _this$props4.dispatch,\n          columnId = _this$props4.columnId;\n\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, ['local'], e.target.value === '1'));\n      } else {\n        _this.setState({\n          local: e.target.value === '1'\n        });\n      }\n    };\n\n    _this.handleLoadMore = function () {\n      var dispatch = _this.props.dispatch;\n      dispatch(expandDirectory(_this.getParams(_this.props, _this.state)));\n    };\n\n    return _this;\n  }\n\n  var _proto = Directory.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var dispatch = this.props.dispatch;\n    dispatch(fetchDirectory(this.getParams(this.props, this.state)));\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var dispatch = this.props.dispatch;\n    var paramsOld = this.getParams(prevProps, prevState);\n    var paramsNew = this.getParams(this.props, this.state);\n\n    if (paramsOld.order !== paramsNew.order || paramsOld.local !== paramsNew.local) {\n      dispatch(fetchDirectory(paramsNew));\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props5 = this.props,\n        isLoading = _this$props5.isLoading,\n        accountIds = _this$props5.accountIds,\n        intl = _this$props5.intl,\n        columnId = _this$props5.columnId,\n        multiColumn = _this$props5.multiColumn,\n        domain = _this$props5.domain;\n\n    var _this$getParams = this.getParams(this.props, this.state),\n        order = _this$getParams.order,\n        local = _this$getParams.local;\n\n    var pinned = !!columnId;\n    var scrollableArea = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scrollable\",\n      style: {\n        background: 'transparent'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter-form__column\",\n      role: \"group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RadioButton, {\n      name: \"order\",\n      value: \"active\",\n      label: intl.formatMessage(messages.recentlyActive),\n      checked: order === 'active',\n      onChange: this.handleChangeOrder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(RadioButton, {\n      name: \"order\",\n      value: \"new\",\n      label: intl.formatMessage(messages.newArrivals),\n      checked: order === 'new',\n      onChange: this.handleChangeOrder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter-form__column\",\n      role: \"group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RadioButton, {\n      name: \"local\",\n      value: \"1\",\n      label: intl.formatMessage(messages.local, {\n        domain\n      }),\n      checked: local,\n      onChange: this.handleChangeLocal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(RadioButton, {\n      name: \"local\",\n      value: \"0\",\n      label: intl.formatMessage(messages.federated),\n      checked: !local,\n      onChange: this.handleChangeLocal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('directory__list', {\n        loading: isLoading\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, accountIds.map(function (accountId) {\n      return /*#__PURE__*/React.createElement(AccountCard, {\n        id: accountId,\n        key: accountId,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 40\n        }\n      });\n    })), /*#__PURE__*/React.createElement(LoadMore, {\n      onClick: this.handleLoadMore,\n      visible: !isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      ref: this.setRef,\n      label: intl.formatMessage(messages.title),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      icon: \"address-book-o\",\n      title: intl.formatMessage(messages.title),\n      onPin: this.handlePin,\n      onMove: this.handleMove,\n      onClick: this.handleHeaderClick,\n      pinned: pinned,\n      multiColumn: multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }), multiColumn && !pinned ? /*#__PURE__*/React.createElement(ScrollContainer, {\n      scrollKey: \"directory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 35\n      }\n    }, scrollableArea) : scrollableArea);\n  };\n\n  return Directory;\n}(React.PureComponent), _class2.contextTypes = {\n  router: PropTypes.object\n}, _class2.propTypes = {\n  isLoading: PropTypes.bool,\n  accountIds: ImmutablePropTypes.list.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  columnId: PropTypes.string,\n  intl: PropTypes.object.isRequired,\n  multiColumn: PropTypes.bool,\n  domain: PropTypes.string.isRequired,\n  params: PropTypes.shape({\n    order: PropTypes.string,\n    local: PropTypes.bool\n  })\n}, _temp)) || _class) || _class);\nexport { Directory as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/directory/index.js"],"names":["React","connect","defineMessages","injectIntl","PropTypes","ImmutablePropTypes","Column","ColumnHeader","addColumn","removeColumn","moveColumn","changeColumnParams","fetchDirectory","expandDirectory","List","ImmutableList","AccountCard","RadioButton","classNames","LoadMore","ScrollContainer","messages","title","recentlyActive","newArrivals","local","federated","mapStateToProps","state","accountIds","getIn","isLoading","domain","Directory","order","handlePin","props","columnId","dispatch","getParams","params","handleMove","dir","handleHeaderClick","column","scrollTop","setRef","c","handleChangeOrder","e","target","value","setState","handleChangeLocal","handleLoadMore","componentDidMount","componentDidUpdate","prevProps","prevState","paramsOld","paramsNew","render","intl","multiColumn","pinned","scrollableArea","background","formatMessage","loading","map","accountId","PureComponent","contextTypes","router","object","propTypes","bool","list","isRequired","func","string","shape"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { addColumn, removeColumn, moveColumn, changeColumnParams } from 'mastodon/actions/columns';\nimport { fetchDirectory, expandDirectory } from 'mastodon/actions/directory';\nimport { List as ImmutableList } from 'immutable';\nimport AccountCard from './components/account_card';\nimport RadioButton from 'mastodon/components/radio_button';\nimport classNames from 'classnames';\nimport LoadMore from 'mastodon/components/load_more';\nimport ScrollContainer from 'mastodon/containers/scroll_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.directory', defaultMessage: 'Browse profiles' },\n  recentlyActive: { id: 'directory.recently_active', defaultMessage: 'Recently active' },\n  newArrivals: { id: 'directory.new_arrivals', defaultMessage: 'New arrivals' },\n  local: { id: 'directory.local', defaultMessage: 'From {domain} only' },\n  federated: { id: 'directory.federated', defaultMessage: 'From known fediverse' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'directory', 'items'], ImmutableList()),\n  isLoading: state.getIn(['user_lists', 'directory', 'isLoading'], true),\n  domain: state.getIn(['meta', 'domain']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Directory extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n    params: PropTypes.shape({\n      order: PropTypes.string,\n      local: PropTypes.bool,\n    }),\n  };\n\n  state = {\n    order: null,\n    local: null,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECTORY', this.getParams(this.props, this.state)));\n    }\n  }\n\n  getParams = (props, state) => ({\n    order: state.order === null ? (props.params.order || 'active') : state.order,\n    local: state.local === null ? (props.params.local || false) : state.local,\n  });\n\n  handleMove = dir => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchDirectory(this.getParams(this.props, this.state)));\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const { dispatch } = this.props;\n    const paramsOld = this.getParams(prevProps, prevState);\n    const paramsNew = this.getParams(this.props, this.state);\n\n    if (paramsOld.order !== paramsNew.order || paramsOld.local !== paramsNew.local) {\n      dispatch(fetchDirectory(paramsNew));\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleChangeOrder = e => {\n    const { dispatch, columnId } = this.props;\n\n    if (columnId) {\n      dispatch(changeColumnParams(columnId, ['order'], e.target.value));\n    } else {\n      this.setState({ order: e.target.value });\n    }\n  }\n\n  handleChangeLocal = e => {\n    const { dispatch, columnId } = this.props;\n\n    if (columnId) {\n      dispatch(changeColumnParams(columnId, ['local'], e.target.value === '1'));\n    } else {\n      this.setState({ local: e.target.value === '1' });\n    }\n  }\n\n  handleLoadMore = () => {\n    const { dispatch } = this.props;\n    dispatch(expandDirectory(this.getParams(this.props, this.state)));\n  }\n\n  render () {\n    const { isLoading, accountIds, intl, columnId, multiColumn, domain } = this.props;\n    const { order, local }  = this.getParams(this.props, this.state);\n    const pinned = !!columnId;\n\n    const scrollableArea = (\n      <div className='scrollable' style={{ background: 'transparent' }}>\n        <div className='filter-form'>\n          <div className='filter-form__column' role='group'>\n            <RadioButton name='order' value='active' label={intl.formatMessage(messages.recentlyActive)} checked={order === 'active'} onChange={this.handleChangeOrder} />\n            <RadioButton name='order' value='new' label={intl.formatMessage(messages.newArrivals)} checked={order === 'new'} onChange={this.handleChangeOrder} />\n          </div>\n\n          <div className='filter-form__column' role='group'>\n            <RadioButton name='local' value='1' label={intl.formatMessage(messages.local, { domain })} checked={local} onChange={this.handleChangeLocal} />\n            <RadioButton name='local' value='0' label={intl.formatMessage(messages.federated)} checked={!local} onChange={this.handleChangeLocal} />\n          </div>\n        </div>\n\n        <div className={classNames('directory__list', { loading: isLoading })}>\n          {accountIds.map(accountId => <AccountCard id={accountId} key={accountId} />)}\n        </div>\n\n        <LoadMore onClick={this.handleLoadMore} visible={!isLoading} />\n      </div>\n    );\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='address-book-o'\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        />\n\n        {multiColumn && !pinned ? <ScrollContainer scrollKey='directory'>{scrollableArea}</ScrollContainer> : scrollableArea}\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"column.directory","defaultMessage":"Browse profiles"},{"id":"directory.recently_active","defaultMessage":"Recently active"},{"id":"directory.new_arrivals","defaultMessage":"New arrivals"},{"id":"directory.local","defaultMessage":"From {domain} only"},{"id":"directory.federated","defaultMessage":"From known fediverse"}]}},"sourceType":"module"}