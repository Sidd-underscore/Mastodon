{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/containers/account_container.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { makeGetAccount } from '../selectors';\nimport Account from '../components/account';\nimport { followAccount, unfollowAccount, blockAccount, unblockAccount, muteAccount, unmuteAccount } from '../actions/accounts';\nimport { openModal } from '../actions/modal';\nimport { initMuteModal } from '../actions/mutes';\nimport { unfollowModal } from '../initial_state';\nvar messages = defineMessages({\n  unfollowConfirm: {\n    \"id\": \"confirmations.unfollow.confirm\",\n    \"defaultMessage\": \"Unfollow\"\n  }\n});\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var getAccount = makeGetAccount();\n\n  var mapStateToProps = function mapStateToProps(state, props) {\n    return {\n      account: getAccount(state, props.id)\n    };\n  };\n\n  return mapStateToProps;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {\n  var intl = _ref.intl;\n  return {\n    onFollow(account) {\n      if (account.getIn(['relationship', 'following']) || account.getIn(['relationship', 'requested'])) {\n        if (unfollowModal) {\n          dispatch(openModal('CONFIRM', {\n            message: /*#__PURE__*/React.createElement(FormattedMessage, {\n              id: \"confirmations.unfollow.message\",\n              defaultMessage: \"Are you sure you want to unfollow {name}?\",\n              values: {\n                name: /*#__PURE__*/React.createElement(\"strong\", {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 38,\n                    columnNumber: 149\n                  }\n                }, \"@\", account.get('acct'))\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 20\n              }\n            }),\n            confirm: intl.formatMessage(messages.unfollowConfirm),\n            onConfirm: function onConfirm() {\n              return dispatch(unfollowAccount(account.get('id')));\n            }\n          }));\n        } else {\n          dispatch(unfollowAccount(account.get('id')));\n        }\n      } else {\n        dispatch(followAccount(account.get('id')));\n      }\n    },\n\n    onBlock(account) {\n      if (account.getIn(['relationship', 'blocking'])) {\n        dispatch(unblockAccount(account.get('id')));\n      } else {\n        dispatch(blockAccount(account.get('id')));\n      }\n    },\n\n    onMute(account) {\n      if (account.getIn(['relationship', 'muting'])) {\n        dispatch(unmuteAccount(account.get('id')));\n      } else {\n        dispatch(initMuteModal(account));\n      }\n    },\n\n    onMuteNotifications(account, notifications) {\n      dispatch(muteAccount(account.get('id'), notifications));\n    }\n\n  };\n};\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Account));","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/containers/account_container.js"],"names":["React","connect","defineMessages","injectIntl","FormattedMessage","makeGetAccount","Account","followAccount","unfollowAccount","blockAccount","unblockAccount","muteAccount","unmuteAccount","openModal","initMuteModal","unfollowModal","messages","unfollowConfirm","makeMapStateToProps","getAccount","mapStateToProps","state","props","account","id","mapDispatchToProps","dispatch","intl","onFollow","getIn","message","name","get","confirm","formatMessage","onConfirm","onBlock","onMute","onMuteNotifications","notifications"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { makeGetAccount } from '../selectors';\nimport Account from '../components/account';\nimport {\n  followAccount,\n  unfollowAccount,\n  blockAccount,\n  unblockAccount,\n  muteAccount,\n  unmuteAccount,\n} from '../actions/accounts';\nimport { openModal } from '../actions/modal';\nimport { initMuteModal } from '../actions/mutes';\nimport { unfollowModal } from '../initial_state';\n\nconst messages = defineMessages({\n  unfollowConfirm: { id: 'confirmations.unfollow.confirm', defaultMessage: 'Unfollow' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onFollow (account) {\n    if (account.getIn(['relationship', 'following']) || account.getIn(['relationship', 'requested'])) {\n      if (unfollowModal) {\n        dispatch(openModal('CONFIRM', {\n          message: <FormattedMessage id='confirmations.unfollow.message' defaultMessage='Are you sure you want to unfollow {name}?' values={{ name: <strong>@{account.get('acct')}</strong> }} />,\n          confirm: intl.formatMessage(messages.unfollowConfirm),\n          onConfirm: () => dispatch(unfollowAccount(account.get('id'))),\n        }));\n      } else {\n        dispatch(unfollowAccount(account.get('id')));\n      }\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  },\n\n  onBlock (account) {\n    if (account.getIn(['relationship', 'blocking'])) {\n      dispatch(unblockAccount(account.get('id')));\n    } else {\n      dispatch(blockAccount(account.get('id')));\n    }\n  },\n\n  onMute (account) {\n    if (account.getIn(['relationship', 'muting'])) {\n      dispatch(unmuteAccount(account.get('id')));\n    } else {\n      dispatch(initMuteModal(account));\n    }\n  },\n\n\n  onMuteNotifications (account, notifications) {\n    dispatch(muteAccount(account.get('id'), notifications));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Account));\n"]},"metadata":{"react-intl":{"messages":[{"id":"confirmations.unfollow.confirm","defaultMessage":"Unfollow"},{"id":"confirmations.unfollow.message","defaultMessage":"Are you sure you want to unfollow {name}?"}]}},"sourceType":"module"}