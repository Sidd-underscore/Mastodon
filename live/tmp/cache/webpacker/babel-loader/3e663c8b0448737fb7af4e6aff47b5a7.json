{"ast":null,"code":"// The output of this module is designed to mimic emoji-mart's\n// \"data\" object, such that we can use it for a light version of emoji-mart's\n// emojiIndex.search functionality.\nvar _require = require('./unicode_to_unified_name'),\n    unicodeToUnifiedName = _require.unicodeToUnifiedName;\n\nvar _require2 = require('./emoji_compressed'),\n    shortCodesToEmojiData = _require2[0],\n    skins = _require2[1],\n    categories = _require2[2],\n    short_names = _require2[3];\n\nvar emojis = {}; // decompress\n\nObject.keys(shortCodesToEmojiData).forEach(function (shortCode) {\n  var _shortCodesToEmojiDat = shortCodesToEmojiData[shortCode],\n      filenameData = _shortCodesToEmojiDat[0],\n      // eslint-disable-line no-unused-vars\n  searchData = _shortCodesToEmojiDat[1];\n  var native = searchData[0],\n      short_names = searchData[1],\n      search = searchData[2],\n      unified = searchData[3];\n\n  if (!unified) {\n    // unified name can be derived from unicodeToUnifiedName\n    unified = unicodeToUnifiedName(native);\n  }\n\n  short_names = [shortCode].concat(short_names);\n  emojis[shortCode] = {\n    native,\n    search,\n    short_names,\n    unified\n  };\n});\nmodule.exports = {\n  emojis,\n  skins,\n  categories,\n  short_names\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/emoji/emoji_mart_data_light.js"],"names":["require","unicodeToUnifiedName","shortCodesToEmojiData","skins","categories","short_names","emojis","Object","keys","forEach","shortCode","filenameData","searchData","native","search","unified","concat","module","exports"],"mappings":"AAAA;AACA;AACA;AACA,eAAiCA,OAAO,CAAC,2BAAD,CAAxC;AAAA,IAAQC,oBAAR,YAAQA,oBAAR;;AACA,gBAAkED,OAAO,CAAC,oBAAD,CAAzE;AAAA,IAAQE,qBAAR;AAAA,IAA+BC,KAA/B;AAAA,IAAsCC,UAAtC;AAAA,IAAkDC,WAAlD;;AAEA,IAAMC,MAAM,GAAG,EAAf,C,CAEA;;AACAC,MAAM,CAACC,IAAP,CAAYN,qBAAZ,EAAmCO,OAAnC,CAA2C,UAACC,SAAD,EAAe;AACxD,8BAGIR,qBAAqB,CAACQ,SAAD,CAHzB;AAAA,MACEC,YADF;AAAA,MACgB;AACdC,EAAAA,UAFF;AAIA,MACEC,MADF,GAKID,UALJ;AAAA,MAEEP,WAFF,GAKIO,UALJ;AAAA,MAGEE,MAHF,GAKIF,UALJ;AAAA,MAIEG,OAJF,GAKIH,UALJ;;AAOA,MAAI,CAACG,OAAL,EAAc;AACZ;AACAA,IAAAA,OAAO,GAAGd,oBAAoB,CAACY,MAAD,CAA9B;AACD;;AAEDR,EAAAA,WAAW,GAAG,CAACK,SAAD,EAAYM,MAAZ,CAAmBX,WAAnB,CAAd;AACAC,EAAAA,MAAM,CAACI,SAAD,CAAN,GAAoB;AAClBG,IAAAA,MADkB;AAElBC,IAAAA,MAFkB;AAGlBT,IAAAA,WAHkB;AAIlBU,IAAAA;AAJkB,GAApB;AAMD,CAxBD;AA0BAE,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA,MADe;AAEfH,EAAAA,KAFe;AAGfC,EAAAA,UAHe;AAIfC,EAAAA;AAJe,CAAjB","sourcesContent":["// The output of this module is designed to mimic emoji-mart's\n// \"data\" object, such that we can use it for a light version of emoji-mart's\n// emojiIndex.search functionality.\nconst { unicodeToUnifiedName } = require('./unicode_to_unified_name');\nconst [ shortCodesToEmojiData, skins, categories, short_names ] = require('./emoji_compressed');\n\nconst emojis = {};\n\n// decompress\nObject.keys(shortCodesToEmojiData).forEach((shortCode) => {\n  let [\n    filenameData, // eslint-disable-line no-unused-vars\n    searchData,\n  ] = shortCodesToEmojiData[shortCode];\n  let [\n    native,\n    short_names,\n    search,\n    unified,\n  ] = searchData;\n\n  if (!unified) {\n    // unified name can be derived from unicodeToUnifiedName\n    unified = unicodeToUnifiedName(native);\n  }\n\n  short_names = [shortCode].concat(short_names);\n  emojis[shortCode] = {\n    native,\n    search,\n    short_names,\n    unified,\n  };\n});\n\nmodule.exports = {\n  emojis,\n  skins,\n  categories,\n  short_names,\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}