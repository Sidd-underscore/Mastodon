{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/notifications/components/notification.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage, defineMessages } from 'react-intl';\nimport { HotKeys } from 'react-hotkeys';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me } from 'mastodon/initial_state';\nimport StatusContainer from 'mastodon/containers/status_container';\nimport AccountContainer from 'mastodon/containers/account_container';\nimport FollowRequestContainer from '../containers/follow_request_container';\nimport Icon from 'mastodon/components/icon';\nimport Permalink from 'mastodon/components/permalink';\nimport classNames from 'classnames';\nvar messages = defineMessages({\n  favourite: {\n    \"id\": \"notification.favourite\",\n    \"defaultMessage\": \"{name} favourited your status\"\n  },\n  follow: {\n    \"id\": \"notification.follow\",\n    \"defaultMessage\": \"{name} followed you\"\n  },\n  ownPoll: {\n    \"id\": \"notification.own_poll\",\n    \"defaultMessage\": \"Your poll has ended\"\n  },\n  poll: {\n    \"id\": \"notification.poll\",\n    \"defaultMessage\": \"A poll you have voted in has ended\"\n  },\n  reblog: {\n    \"id\": \"notification.reblog\",\n    \"defaultMessage\": \"{name} boosted your status\"\n  },\n  status: {\n    \"id\": \"notification.status\",\n    \"defaultMessage\": \"{name} just posted\"\n  }\n});\n\nvar notificationForScreenReader = function notificationForScreenReader(intl, message, timestamp) {\n  var output = [message];\n  output.push(intl.formatDate(timestamp, {\n    hour: '2-digit',\n    minute: '2-digit',\n    month: 'short',\n    day: 'numeric'\n  }));\n  return output.join(', ');\n};\n\nvar Notification = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(Notification, _ImmutablePureCompone);\n\n  function Notification() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n\n    _this.handleMoveUp = function () {\n      var _this$props = _this.props,\n          notification = _this$props.notification,\n          onMoveUp = _this$props.onMoveUp;\n      onMoveUp(notification.get('id'));\n    };\n\n    _this.handleMoveDown = function () {\n      var _this$props2 = _this.props,\n          notification = _this$props2.notification,\n          onMoveDown = _this$props2.onMoveDown;\n      onMoveDown(notification.get('id'));\n    };\n\n    _this.handleOpen = function () {\n      var notification = _this.props.notification;\n\n      if (notification.get('status')) {\n        _this.context.router.history.push(\"/statuses/\" + notification.get('status'));\n      } else {\n        _this.handleOpenProfile();\n      }\n    };\n\n    _this.handleOpenProfile = function () {\n      var notification = _this.props.notification;\n\n      _this.context.router.history.push(\"/accounts/\" + notification.getIn(['account', 'id']));\n    };\n\n    _this.handleMention = function (e) {\n      e.preventDefault();\n      var _this$props3 = _this.props,\n          notification = _this$props3.notification,\n          onMention = _this$props3.onMention;\n      onMention(notification.get('account'), _this.context.router.history);\n    };\n\n    _this.handleHotkeyFavourite = function () {\n      var status = _this.props.status;\n      if (status) _this.props.onFavourite(status);\n    };\n\n    _this.handleHotkeyBoost = function (e) {\n      var status = _this.props.status;\n      if (status) _this.props.onReblog(status, e);\n    };\n\n    _this.handleHotkeyToggleHidden = function () {\n      var status = _this.props.status;\n      if (status) _this.props.onToggleHidden(status);\n    };\n\n    return _this;\n  }\n\n  var _proto = Notification.prototype;\n\n  _proto.getHandlers = function getHandlers() {\n    return {\n      reply: this.handleMention,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleMention,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      toggleHidden: this.handleHotkeyToggleHidden\n    };\n  };\n\n  _proto.renderFollow = function renderFollow(notification, account, link) {\n    var _this$props4 = this.props,\n        intl = _this$props4.intl,\n        unread = _this$props4.unread;\n    return /*#__PURE__*/React.createElement(HotKeys, {\n      handlers: this.getHandlers(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('notification notification-follow focusable', {\n        unread\n      }),\n      tabIndex: \"0\",\n      \"aria-label\": notificationForScreenReader(intl, intl.formatMessage(messages.follow, {\n        name: account.get('acct')\n      }), notification.get('created_at')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__favourite-icon-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"user-plus\",\n      fixedWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      title: notification.get('created_at'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"notification.follow\",\n      defaultMessage: \"{name} followed you\",\n      values: {\n        name: link\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(AccountContainer, {\n      id: account.get('id'),\n      hidden: this.props.hidden,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  _proto.renderFollowRequest = function renderFollowRequest(notification, account, link) {\n    var _this$props5 = this.props,\n        intl = _this$props5.intl,\n        unread = _this$props5.unread;\n    return /*#__PURE__*/React.createElement(HotKeys, {\n      handlers: this.getHandlers(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('notification notification-follow-request focusable', {\n        unread\n      }),\n      tabIndex: \"0\",\n      \"aria-label\": notificationForScreenReader(intl, intl.formatMessage({\n        id: 'notification.follow_request',\n        defaultMessage: '{name} has requested to follow you'\n      }, {\n        name: account.get('acct')\n      }), notification.get('created_at')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__favourite-icon-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"user\",\n      fixedWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      title: notification.get('created_at'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"notification.follow_request\",\n      defaultMessage: \"{name} has requested to follow you\",\n      values: {\n        name: link\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(FollowRequestContainer, {\n      id: account.get('id'),\n      withNote: false,\n      hidden: this.props.hidden,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  _proto.renderMention = function renderMention(notification) {\n    return /*#__PURE__*/React.createElement(StatusContainer, {\n      id: notification.get('status'),\n      withDismiss: true,\n      hidden: this.props.hidden,\n      onMoveDown: this.handleMoveDown,\n      onMoveUp: this.handleMoveUp,\n      contextType: \"notifications\",\n      getScrollPosition: this.props.getScrollPosition,\n      updateScrollBottom: this.props.updateScrollBottom,\n      cachedMediaWidth: this.props.cachedMediaWidth,\n      cacheMediaWidth: this.props.cacheMediaWidth,\n      unread: this.props.unread,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    });\n  };\n\n  _proto.renderFavourite = function renderFavourite(notification, link) {\n    var _this$props6 = this.props,\n        intl = _this$props6.intl,\n        unread = _this$props6.unread;\n    return /*#__PURE__*/React.createElement(HotKeys, {\n      handlers: this.getHandlers(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('notification notification-favourite focusable', {\n        unread\n      }),\n      tabIndex: \"0\",\n      \"aria-label\": notificationForScreenReader(intl, intl.formatMessage(messages.favourite, {\n        name: notification.getIn(['account', 'acct'])\n      }), notification.get('created_at')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__favourite-icon-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"star\",\n      className: \"star-icon\",\n      fixedWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      title: notification.get('created_at'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"notification.favourite\",\n      defaultMessage: \"{name} favourited your status\",\n      values: {\n        name: link\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(StatusContainer, {\n      id: notification.get('status'),\n      account: notification.get('account'),\n      muted: true,\n      withDismiss: true,\n      hidden: !!this.props.hidden,\n      getScrollPosition: this.props.getScrollPosition,\n      updateScrollBottom: this.props.updateScrollBottom,\n      cachedMediaWidth: this.props.cachedMediaWidth,\n      cacheMediaWidth: this.props.cacheMediaWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  _proto.renderReblog = function renderReblog(notification, link) {\n    var _this$props7 = this.props,\n        intl = _this$props7.intl,\n        unread = _this$props7.unread;\n    return /*#__PURE__*/React.createElement(HotKeys, {\n      handlers: this.getHandlers(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('notification notification-reblog focusable', {\n        unread\n      }),\n      tabIndex: \"0\",\n      \"aria-label\": notificationForScreenReader(intl, intl.formatMessage(messages.reblog, {\n        name: notification.getIn(['account', 'acct'])\n      }), notification.get('created_at')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__favourite-icon-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"retweet\",\n      fixedWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      title: notification.get('created_at'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"notification.reblog\",\n      defaultMessage: \"{name} boosted your status\",\n      values: {\n        name: link\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(StatusContainer, {\n      id: notification.get('status'),\n      account: notification.get('account'),\n      muted: true,\n      withDismiss: true,\n      hidden: this.props.hidden,\n      getScrollPosition: this.props.getScrollPosition,\n      updateScrollBottom: this.props.updateScrollBottom,\n      cachedMediaWidth: this.props.cachedMediaWidth,\n      cacheMediaWidth: this.props.cacheMediaWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  _proto.renderStatus = function renderStatus(notification, link) {\n    var _this$props8 = this.props,\n        intl = _this$props8.intl,\n        unread = _this$props8.unread;\n    return /*#__PURE__*/React.createElement(HotKeys, {\n      handlers: this.getHandlers(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('notification notification-status focusable', {\n        unread\n      }),\n      tabIndex: \"0\",\n      \"aria-label\": notificationForScreenReader(intl, intl.formatMessage(messages.status, {\n        name: notification.getIn(['account', 'acct'])\n      }), notification.get('created_at')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__favourite-icon-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"home\",\n      fixedWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      title: notification.get('created_at'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"notification.status\",\n      defaultMessage: \"{name} just posted\",\n      values: {\n        name: link\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(StatusContainer, {\n      id: notification.get('status'),\n      account: notification.get('account'),\n      muted: true,\n      withDismiss: true,\n      hidden: this.props.hidden,\n      getScrollPosition: this.props.getScrollPosition,\n      updateScrollBottom: this.props.updateScrollBottom,\n      cachedMediaWidth: this.props.cachedMediaWidth,\n      cacheMediaWidth: this.props.cacheMediaWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  _proto.renderPoll = function renderPoll(notification, account) {\n    var _this$props9 = this.props,\n        intl = _this$props9.intl,\n        unread = _this$props9.unread;\n    var ownPoll = me === account.get('id');\n    var message = ownPoll ? intl.formatMessage(messages.ownPoll) : intl.formatMessage(messages.poll);\n    return /*#__PURE__*/React.createElement(HotKeys, {\n      handlers: this.getHandlers(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('notification notification-poll focusable', {\n        unread\n      }),\n      tabIndex: \"0\",\n      \"aria-label\": notificationForScreenReader(intl, message, notification.get('created_at')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification__favourite-icon-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      id: \"tasks\",\n      fixedWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      title: notification.get('created_at'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }\n    }, ownPoll ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"notification.own_poll\",\n      defaultMessage: \"Your poll has ended\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }\n    }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"notification.poll\",\n      defaultMessage: \"A poll you have voted in has ended\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(StatusContainer, {\n      id: notification.get('status'),\n      account: account,\n      muted: true,\n      withDismiss: true,\n      hidden: this.props.hidden,\n      getScrollPosition: this.props.getScrollPosition,\n      updateScrollBottom: this.props.updateScrollBottom,\n      cachedMediaWidth: this.props.cachedMediaWidth,\n      cacheMediaWidth: this.props.cacheMediaWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  _proto.render = function render() {\n    var notification = this.props.notification;\n    var account = notification.get('account');\n    var displayNameHtml = {\n      __html: account.get('display_name_html')\n    };\n    var link = /*#__PURE__*/React.createElement(\"bdi\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 30\n      }\n    }, /*#__PURE__*/React.createElement(Permalink, {\n      className: \"notification__display-name\",\n      href: account.get('url'),\n      title: account.get('acct'),\n      to: \"/accounts/\" + account.get('id'),\n      dangerouslySetInnerHTML: displayNameHtml,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 35\n      }\n    }));\n\n    switch (notification.get('type')) {\n      case 'follow':\n        return this.renderFollow(notification, account, link);\n\n      case 'follow_request':\n        return this.renderFollowRequest(notification, account, link);\n\n      case 'mention':\n        return this.renderMention(notification);\n\n      case 'favourite':\n        return this.renderFavourite(notification, link);\n\n      case 'reblog':\n        return this.renderReblog(notification, link);\n\n      case 'status':\n        return this.renderStatus(notification, link);\n\n      case 'poll':\n        return this.renderPoll(notification, account);\n    }\n\n    return null;\n  };\n\n  return Notification;\n}(ImmutablePureComponent), _class2.contextTypes = {\n  router: PropTypes.object\n}, _class2.propTypes = {\n  notification: ImmutablePropTypes.map.isRequired,\n  hidden: PropTypes.bool,\n  onMoveUp: PropTypes.func.isRequired,\n  onMoveDown: PropTypes.func.isRequired,\n  onMention: PropTypes.func.isRequired,\n  onFavourite: PropTypes.func.isRequired,\n  onReblog: PropTypes.func.isRequired,\n  onToggleHidden: PropTypes.func.isRequired,\n  status: ImmutablePropTypes.map,\n  intl: PropTypes.object.isRequired,\n  getScrollPosition: PropTypes.func,\n  updateScrollBottom: PropTypes.func,\n  cacheMediaWidth: PropTypes.func,\n  cachedMediaWidth: PropTypes.number,\n  unread: PropTypes.bool\n}, _temp)) || _class;\n\nexport { Notification as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/notifications/components/notification.js"],"names":["React","ImmutablePropTypes","injectIntl","FormattedMessage","defineMessages","HotKeys","PropTypes","ImmutablePureComponent","me","StatusContainer","AccountContainer","FollowRequestContainer","Icon","Permalink","classNames","messages","favourite","follow","ownPoll","poll","reblog","status","notificationForScreenReader","intl","message","timestamp","output","push","formatDate","hour","minute","month","day","join","Notification","handleMoveUp","props","notification","onMoveUp","get","handleMoveDown","onMoveDown","handleOpen","context","router","history","handleOpenProfile","getIn","handleMention","e","preventDefault","onMention","handleHotkeyFavourite","onFavourite","handleHotkeyBoost","onReblog","handleHotkeyToggleHidden","onToggleHidden","getHandlers","reply","boost","mention","open","openProfile","moveUp","moveDown","toggleHidden","renderFollow","account","link","unread","formatMessage","name","hidden","renderFollowRequest","id","defaultMessage","renderMention","getScrollPosition","updateScrollBottom","cachedMediaWidth","cacheMediaWidth","renderFavourite","renderReblog","renderStatus","renderPoll","render","displayNameHtml","__html","contextTypes","object","propTypes","map","isRequired","bool","func","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage, defineMessages } from 'react-intl';\nimport { HotKeys } from 'react-hotkeys';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me } from 'mastodon/initial_state';\nimport StatusContainer from 'mastodon/containers/status_container';\nimport AccountContainer from 'mastodon/containers/account_container';\nimport FollowRequestContainer from '../containers/follow_request_container';\nimport Icon from 'mastodon/components/icon';\nimport Permalink from 'mastodon/components/permalink';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  favourite: { id: 'notification.favourite', defaultMessage: '{name} favourited your status' },\n  follow: { id: 'notification.follow', defaultMessage: '{name} followed you' },\n  ownPoll: { id: 'notification.own_poll', defaultMessage: 'Your poll has ended' },\n  poll: { id: 'notification.poll', defaultMessage: 'A poll you have voted in has ended' },\n  reblog: { id: 'notification.reblog', defaultMessage: '{name} boosted your status' },\n  status: { id: 'notification.status', defaultMessage: '{name} just posted' },\n});\n\nconst notificationForScreenReader = (intl, message, timestamp) => {\n  const output = [message];\n\n  output.push(intl.formatDate(timestamp, { hour: '2-digit', minute: '2-digit', month: 'short', day: 'numeric' }));\n\n  return output.join(', ');\n};\n\nexport default @injectIntl\nclass Notification extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    intl: PropTypes.object.isRequired,\n    getScrollPosition: PropTypes.func,\n    updateScrollBottom: PropTypes.func,\n    cacheMediaWidth: PropTypes.func,\n    cachedMediaWidth: PropTypes.number,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  }\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  }\n\n  handleOpen = () => {\n    const { notification } = this.props;\n\n    if (notification.get('status')) {\n      this.context.router.history.push(`/statuses/${notification.get('status')}`);\n    } else {\n      this.handleOpenProfile();\n    }\n  }\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/accounts/${notification.getIn(['account', 'id'])}`);\n  }\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  }\n\n  handleHotkeyFavourite = () => {\n    const { status } = this.props;\n    if (status) this.props.onFavourite(status);\n  }\n\n  handleHotkeyBoost = e => {\n    const { status } = this.props;\n    if (status) this.props.onReblog(status, e);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    const { status } = this.props;\n    if (status) this.props.onToggleHidden(status);\n  }\n\n  getHandlers () {\n    return {\n      reply: this.handleMention,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleMention,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      toggleHidden: this.handleHotkeyToggleHidden,\n    };\n  }\n\n  renderFollow (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.follow, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user-plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow' defaultMessage='{name} followed you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderFollowRequest (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow-request focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.follow_request', defaultMessage: '{name} has requested to follow you' }, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow_request' defaultMessage='{name} has requested to follow you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <FollowRequestContainer id={account.get('id')} withNote={false} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderMention (notification) {\n    return (\n      <StatusContainer\n        id={notification.get('status')}\n        withDismiss\n        hidden={this.props.hidden}\n        onMoveDown={this.handleMoveDown}\n        onMoveUp={this.handleMoveUp}\n        contextType='notifications'\n        getScrollPosition={this.props.getScrollPosition}\n        updateScrollBottom={this.props.updateScrollBottom}\n        cachedMediaWidth={this.props.cachedMediaWidth}\n        cacheMediaWidth={this.props.cacheMediaWidth}\n        unread={this.props.unread}\n      />\n    );\n  }\n\n  renderFavourite (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-favourite focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.favourite, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='star' className='star-icon' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.favourite' defaultMessage='{name} favourited your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={!!this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderReblog (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-reblog focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.reblog, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='retweet' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.reblog' defaultMessage='{name} boosted your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderStatus (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-status focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.status, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='home' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.status' defaultMessage='{name} just posted' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderPoll (notification, account) {\n    const { intl, unread } = this.props;\n    const ownPoll  = me === account.get('id');\n    const message  = ownPoll ? intl.formatMessage(messages.ownPoll) : intl.formatMessage(messages.poll);\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-poll focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, message, notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='tasks' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              {ownPoll ? (\n                <FormattedMessage id='notification.own_poll' defaultMessage='Your poll has ended' />\n              ) : (\n                <FormattedMessage id='notification.poll' defaultMessage='A poll you have voted in has ended' />\n              )}\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={account}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  render () {\n    const { notification } = this.props;\n    const account          = notification.get('account');\n    const displayNameHtml  = { __html: account.get('display_name_html') };\n    const link             = <bdi><Permalink className='notification__display-name' href={account.get('url')} title={account.get('acct')} to={`/accounts/${account.get('id')}`} dangerouslySetInnerHTML={displayNameHtml} /></bdi>;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return this.renderFollow(notification, account, link);\n    case 'follow_request':\n      return this.renderFollowRequest(notification, account, link);\n    case 'mention':\n      return this.renderMention(notification);\n    case 'favourite':\n      return this.renderFavourite(notification, link);\n    case 'reblog':\n      return this.renderReblog(notification, link);\n    case 'status':\n      return this.renderStatus(notification, link);\n    case 'poll':\n      return this.renderPoll(notification, account);\n    }\n\n    return null;\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"notification.favourite","defaultMessage":"{name} favourited your status"},{"id":"notification.follow","defaultMessage":"{name} followed you"},{"id":"notification.own_poll","defaultMessage":"Your poll has ended"},{"id":"notification.poll","defaultMessage":"A poll you have voted in has ended"},{"id":"notification.reblog","defaultMessage":"{name} boosted your status"},{"id":"notification.status","defaultMessage":"{name} just posted"},{"id":"notification.follow_request","defaultMessage":"{name} has requested to follow you"}]}},"sourceType":"module"}