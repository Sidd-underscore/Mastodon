{"ast":null,"code":"import api, { getLinks } from '../api';\nimport IntlMessageFormat from 'intl-messageformat';\nimport { fetchRelationships } from './accounts';\nimport { importFetchedAccount, importFetchedAccounts, importFetchedStatus, importFetchedStatuses } from './importer';\nimport { submitMarkers } from './markers';\nimport { saveSettings } from './settings';\nimport { defineMessages } from 'react-intl';\nimport { List as ImmutableList } from 'immutable';\nimport { unescapeHTML } from '../utils/html';\nimport { getFiltersRegex } from '../selectors';\nimport { usePendingItems as preferPendingItems } from 'mastodon/initial_state';\nimport compareId from 'mastodon/compare_id';\nimport { searchTextFromRawStatus } from 'mastodon/actions/importer/normalizer';\nimport { requestNotificationPermission } from '../utils/notifications';\nexport var NOTIFICATIONS_UPDATE = 'NOTIFICATIONS_UPDATE';\nexport var NOTIFICATIONS_UPDATE_NOOP = 'NOTIFICATIONS_UPDATE_NOOP';\nexport var NOTIFICATIONS_EXPAND_REQUEST = 'NOTIFICATIONS_EXPAND_REQUEST';\nexport var NOTIFICATIONS_EXPAND_SUCCESS = 'NOTIFICATIONS_EXPAND_SUCCESS';\nexport var NOTIFICATIONS_EXPAND_FAIL = 'NOTIFICATIONS_EXPAND_FAIL';\nexport var NOTIFICATIONS_FILTER_SET = 'NOTIFICATIONS_FILTER_SET';\nexport var NOTIFICATIONS_CLEAR = 'NOTIFICATIONS_CLEAR';\nexport var NOTIFICATIONS_SCROLL_TOP = 'NOTIFICATIONS_SCROLL_TOP';\nexport var NOTIFICATIONS_LOAD_PENDING = 'NOTIFICATIONS_LOAD_PENDING';\nexport var NOTIFICATIONS_MOUNT = 'NOTIFICATIONS_MOUNT';\nexport var NOTIFICATIONS_UNMOUNT = 'NOTIFICATIONS_UNMOUNT';\nexport var NOTIFICATIONS_MARK_AS_READ = 'NOTIFICATIONS_MARK_AS_READ';\nexport var NOTIFICATIONS_SET_BROWSER_SUPPORT = 'NOTIFICATIONS_SET_BROWSER_SUPPORT';\nexport var NOTIFICATIONS_SET_BROWSER_PERMISSION = 'NOTIFICATIONS_SET_BROWSER_PERMISSION';\ndefineMessages({\n  mention: {\n    \"id\": \"notification.mention\",\n    \"defaultMessage\": \"{name} mentioned you\"\n  },\n  group: {\n    \"id\": \"notifications.group\",\n    \"defaultMessage\": \"{count} notifications\"\n  }\n});\n\nvar fetchRelatedRelationships = function fetchRelatedRelationships(dispatch, notifications) {\n  var accountIds = notifications.filter(function (item) {\n    return item.type === 'follow';\n  }).map(function (item) {\n    return item.account.id;\n  });\n\n  if (accountIds.length > 0) {\n    dispatch(fetchRelationships(accountIds));\n  }\n};\n\nexport var loadPending = function loadPending() {\n  return {\n    type: NOTIFICATIONS_LOAD_PENDING\n  };\n};\nexport function updateNotifications(notification, intlMessages, intlLocale) {\n  return function (dispatch, getState) {\n    var showInColumn = getState().getIn(['settings', 'notifications', 'shows', notification.type], true);\n    var showAlert = getState().getIn(['settings', 'notifications', 'alerts', notification.type], true);\n    var playSound = getState().getIn(['settings', 'notifications', 'sounds', notification.type], true);\n    var filters = getFiltersRegex(getState(), {\n      contextType: 'notifications'\n    });\n    var filtered = false;\n\n    if (['mention', 'status'].includes(notification.type)) {\n      var dropRegex = filters[0];\n      var regex = filters[1];\n      var searchIndex = searchTextFromRawStatus(notification.status);\n\n      if (dropRegex && dropRegex.test(searchIndex)) {\n        return;\n      }\n\n      filtered = regex && regex.test(searchIndex);\n    }\n\n    dispatch(submitMarkers());\n\n    if (showInColumn) {\n      dispatch(importFetchedAccount(notification.account));\n\n      if (notification.status) {\n        dispatch(importFetchedStatus(notification.status));\n      }\n\n      dispatch({\n        type: NOTIFICATIONS_UPDATE,\n        notification,\n        usePendingItems: preferPendingItems,\n        meta: playSound && !filtered ? {\n          sound: 'boop'\n        } : undefined\n      });\n      fetchRelatedRelationships(dispatch, [notification]);\n    } else if (playSound && !filtered) {\n      dispatch({\n        type: NOTIFICATIONS_UPDATE_NOOP,\n        meta: {\n          sound: 'boop'\n        }\n      });\n    } // Desktop notifications\n\n\n    if (typeof window.Notification !== 'undefined' && showAlert && !filtered) {\n      var title = new IntlMessageFormat(intlMessages[\"notification.\" + notification.type], intlLocale).format({\n        name: notification.account.display_name.length > 0 ? notification.account.display_name : notification.account.username\n      });\n      var body = notification.status && notification.status.spoiler_text.length > 0 ? notification.status.spoiler_text : unescapeHTML(notification.status ? notification.status.content : '');\n      var notify = new Notification(title, {\n        body,\n        icon: notification.account.avatar,\n        tag: notification.id\n      });\n      notify.addEventListener('click', function () {\n        window.focus();\n        notify.close();\n      });\n    }\n  };\n}\n;\n\nvar excludeTypesFromSettings = function excludeTypesFromSettings(state) {\n  return state.getIn(['settings', 'notifications', 'shows']).filter(function (enabled) {\n    return !enabled;\n  }).keySeq().toJS();\n};\n\nvar excludeTypesFromFilter = function excludeTypesFromFilter(filter) {\n  var allTypes = ImmutableList(['follow', 'follow_request', 'favourite', 'reblog', 'mention', 'poll']);\n  return allTypes.filterNot(function (item) {\n    return item === filter;\n  }).toJS();\n};\n\nvar noOp = function noOp() {};\n\nexport function expandNotifications(_temp, done) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      maxId = _ref.maxId;\n\n  if (done === void 0) {\n    done = noOp;\n  }\n\n  return function (dispatch, getState) {\n    var activeFilter = getState().getIn(['settings', 'notifications', 'quickFilter', 'active']);\n    var notifications = getState().get('notifications');\n    var isLoadingMore = !!maxId;\n\n    if (notifications.get('isLoading')) {\n      done();\n      return;\n    }\n\n    var params = {\n      max_id: maxId,\n      exclude_types: activeFilter === 'all' ? excludeTypesFromSettings(getState()) : excludeTypesFromFilter(activeFilter)\n    };\n\n    if (!params.max_id && notifications.get('items', ImmutableList()).size + notifications.get('pendingItems', ImmutableList()).size > 0) {\n      var a = notifications.getIn(['pendingItems', 0, 'id']);\n      var b = notifications.getIn(['items', 0, 'id']);\n\n      if (a && b && compareId(a, b) > 0) {\n        params.since_id = a;\n      } else {\n        params.since_id = b || a;\n      }\n    }\n\n    var isLoadingRecent = !!params.since_id;\n    dispatch(expandNotificationsRequest(isLoadingMore));\n    api(getState).get('/api/v1/notifications', {\n      params\n    }).then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(importFetchedAccounts(response.data.map(function (item) {\n        return item.account;\n      })));\n      dispatch(importFetchedStatuses(response.data.map(function (item) {\n        return item.status;\n      }).filter(function (status) {\n        return !!status;\n      })));\n      dispatch(expandNotificationsSuccess(response.data, next ? next.uri : null, isLoadingMore, isLoadingRecent, isLoadingRecent && preferPendingItems));\n      fetchRelatedRelationships(dispatch, response.data);\n      dispatch(submitMarkers());\n    }).catch(function (error) {\n      dispatch(expandNotificationsFail(error, isLoadingMore));\n    }).finally(function () {\n      done();\n    });\n  };\n}\n;\nexport function expandNotificationsRequest(isLoadingMore) {\n  return {\n    type: NOTIFICATIONS_EXPAND_REQUEST,\n    skipLoading: !isLoadingMore\n  };\n}\n;\nexport function expandNotificationsSuccess(notifications, next, isLoadingMore, isLoadingRecent, usePendingItems) {\n  return {\n    type: NOTIFICATIONS_EXPAND_SUCCESS,\n    notifications,\n    next,\n    isLoadingRecent: isLoadingRecent,\n    usePendingItems,\n    skipLoading: !isLoadingMore\n  };\n}\n;\nexport function expandNotificationsFail(error, isLoadingMore) {\n  return {\n    type: NOTIFICATIONS_EXPAND_FAIL,\n    error,\n    skipLoading: !isLoadingMore,\n    skipAlert: !isLoadingMore\n  };\n}\n;\nexport function clearNotifications() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: NOTIFICATIONS_CLEAR\n    });\n    api(getState).post('/api/v1/notifications/clear');\n  };\n}\n;\nexport function scrollTopNotifications(top) {\n  return {\n    type: NOTIFICATIONS_SCROLL_TOP,\n    top\n  };\n}\n;\nexport function setFilter(filterType) {\n  return function (dispatch) {\n    dispatch({\n      type: NOTIFICATIONS_FILTER_SET,\n      path: ['notifications', 'quickFilter', 'active'],\n      value: filterType\n    });\n    dispatch(expandNotifications());\n    dispatch(saveSettings());\n  };\n}\n;\nexport var mountNotifications = function mountNotifications() {\n  return {\n    type: NOTIFICATIONS_MOUNT\n  };\n};\nexport var unmountNotifications = function unmountNotifications() {\n  return {\n    type: NOTIFICATIONS_UNMOUNT\n  };\n};\nexport var markNotificationsAsRead = function markNotificationsAsRead() {\n  return {\n    type: NOTIFICATIONS_MARK_AS_READ\n  };\n}; // Browser support\n\nexport function setupBrowserNotifications() {\n  return function (dispatch) {\n    dispatch(setBrowserSupport('Notification' in window));\n\n    if ('Notification' in window) {\n      dispatch(setBrowserPermission(Notification.permission));\n    }\n\n    if ('Notification' in window && 'permissions' in navigator) {\n      navigator.permissions.query({\n        name: 'notifications'\n      }).then(function (status) {\n        status.onchange = function () {\n          return dispatch(setBrowserPermission(Notification.permission));\n        };\n      }).catch(console.warn);\n    }\n  };\n}\nexport function requestBrowserPermission(callback) {\n  if (callback === void 0) {\n    callback = noOp;\n  }\n\n  return function (dispatch) {\n    requestNotificationPermission(function (permission) {\n      dispatch(setBrowserPermission(permission));\n      callback(permission);\n    });\n  };\n}\n;\nexport function setBrowserSupport(value) {\n  return {\n    type: NOTIFICATIONS_SET_BROWSER_SUPPORT,\n    value\n  };\n}\nexport function setBrowserPermission(value) {\n  return {\n    type: NOTIFICATIONS_SET_BROWSER_PERMISSION,\n    value\n  };\n}","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/notifications.js"],"names":["api","getLinks","IntlMessageFormat","fetchRelationships","importFetchedAccount","importFetchedAccounts","importFetchedStatus","importFetchedStatuses","submitMarkers","saveSettings","defineMessages","List","ImmutableList","unescapeHTML","getFiltersRegex","usePendingItems","preferPendingItems","compareId","searchTextFromRawStatus","requestNotificationPermission","NOTIFICATIONS_UPDATE","NOTIFICATIONS_UPDATE_NOOP","NOTIFICATIONS_EXPAND_REQUEST","NOTIFICATIONS_EXPAND_SUCCESS","NOTIFICATIONS_EXPAND_FAIL","NOTIFICATIONS_FILTER_SET","NOTIFICATIONS_CLEAR","NOTIFICATIONS_SCROLL_TOP","NOTIFICATIONS_LOAD_PENDING","NOTIFICATIONS_MOUNT","NOTIFICATIONS_UNMOUNT","NOTIFICATIONS_MARK_AS_READ","NOTIFICATIONS_SET_BROWSER_SUPPORT","NOTIFICATIONS_SET_BROWSER_PERMISSION","mention","group","fetchRelatedRelationships","dispatch","notifications","accountIds","filter","item","type","map","account","id","length","loadPending","updateNotifications","notification","intlMessages","intlLocale","getState","showInColumn","getIn","showAlert","playSound","filters","contextType","filtered","includes","dropRegex","regex","searchIndex","status","test","meta","sound","undefined","window","Notification","title","format","name","display_name","username","body","spoiler_text","content","notify","icon","avatar","tag","addEventListener","focus","close","excludeTypesFromSettings","state","enabled","keySeq","toJS","excludeTypesFromFilter","allTypes","filterNot","noOp","expandNotifications","done","maxId","activeFilter","get","isLoadingMore","params","max_id","exclude_types","size","a","b","since_id","isLoadingRecent","expandNotificationsRequest","then","response","next","refs","find","link","rel","data","expandNotificationsSuccess","uri","catch","error","expandNotificationsFail","finally","skipLoading","skipAlert","clearNotifications","post","scrollTopNotifications","top","setFilter","filterType","path","value","mountNotifications","unmountNotifications","markNotificationsAsRead","setupBrowserNotifications","setBrowserSupport","setBrowserPermission","permission","navigator","permissions","query","onchange","console","warn","requestBrowserPermission","callback"],"mappings":"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","sourcesContent":["import api, { getLinks } from '../api';\nimport IntlMessageFormat from 'intl-messageformat';\nimport { fetchRelationships } from './accounts';\nimport {\n  importFetchedAccount,\n  importFetchedAccounts,\n  importFetchedStatus,\n  importFetchedStatuses,\n} from './importer';\nimport { submitMarkers } from './markers';\nimport { saveSettings } from './settings';\nimport { defineMessages } from 'react-intl';\nimport { List as ImmutableList } from 'immutable';\nimport { unescapeHTML } from '../utils/html';\nimport { getFiltersRegex } from '../selectors';\nimport { usePendingItems as preferPendingItems } from 'mastodon/initial_state';\nimport compareId from 'mastodon/compare_id';\nimport { searchTextFromRawStatus } from 'mastodon/actions/importer/normalizer';\nimport { requestNotificationPermission } from '../utils/notifications';\n\nexport const NOTIFICATIONS_UPDATE      = 'NOTIFICATIONS_UPDATE';\nexport const NOTIFICATIONS_UPDATE_NOOP = 'NOTIFICATIONS_UPDATE_NOOP';\n\nexport const NOTIFICATIONS_EXPAND_REQUEST = 'NOTIFICATIONS_EXPAND_REQUEST';\nexport const NOTIFICATIONS_EXPAND_SUCCESS = 'NOTIFICATIONS_EXPAND_SUCCESS';\nexport const NOTIFICATIONS_EXPAND_FAIL    = 'NOTIFICATIONS_EXPAND_FAIL';\n\nexport const NOTIFICATIONS_FILTER_SET = 'NOTIFICATIONS_FILTER_SET';\n\nexport const NOTIFICATIONS_CLEAR        = 'NOTIFICATIONS_CLEAR';\nexport const NOTIFICATIONS_SCROLL_TOP   = 'NOTIFICATIONS_SCROLL_TOP';\nexport const NOTIFICATIONS_LOAD_PENDING = 'NOTIFICATIONS_LOAD_PENDING';\n\nexport const NOTIFICATIONS_MOUNT   = 'NOTIFICATIONS_MOUNT';\nexport const NOTIFICATIONS_UNMOUNT = 'NOTIFICATIONS_UNMOUNT';\n\n\nexport const NOTIFICATIONS_MARK_AS_READ = 'NOTIFICATIONS_MARK_AS_READ';\n\nexport const NOTIFICATIONS_SET_BROWSER_SUPPORT    = 'NOTIFICATIONS_SET_BROWSER_SUPPORT';\nexport const NOTIFICATIONS_SET_BROWSER_PERMISSION = 'NOTIFICATIONS_SET_BROWSER_PERMISSION';\n\ndefineMessages({\n  mention: { id: 'notification.mention', defaultMessage: '{name} mentioned you' },\n  group: { id: 'notifications.group', defaultMessage: '{count} notifications' },\n});\n\nconst fetchRelatedRelationships = (dispatch, notifications) => {\n  const accountIds = notifications.filter(item => item.type === 'follow').map(item => item.account.id);\n\n  if (accountIds.length > 0) {\n    dispatch(fetchRelationships(accountIds));\n  }\n};\n\nexport const loadPending = () => ({\n  type: NOTIFICATIONS_LOAD_PENDING,\n});\n\nexport function updateNotifications(notification, intlMessages, intlLocale) {\n  return (dispatch, getState) => {\n    const showInColumn = getState().getIn(['settings', 'notifications', 'shows', notification.type], true);\n    const showAlert    = getState().getIn(['settings', 'notifications', 'alerts', notification.type], true);\n    const playSound    = getState().getIn(['settings', 'notifications', 'sounds', notification.type], true);\n    const filters      = getFiltersRegex(getState(), { contextType: 'notifications' });\n\n    let filtered = false;\n\n    if (['mention', 'status'].includes(notification.type)) {\n      const dropRegex   = filters[0];\n      const regex       = filters[1];\n      const searchIndex = searchTextFromRawStatus(notification.status);\n\n      if (dropRegex && dropRegex.test(searchIndex)) {\n        return;\n      }\n\n      filtered = regex && regex.test(searchIndex);\n    }\n\n    dispatch(submitMarkers());\n\n    if (showInColumn) {\n      dispatch(importFetchedAccount(notification.account));\n\n      if (notification.status) {\n        dispatch(importFetchedStatus(notification.status));\n      }\n\n      dispatch({\n        type: NOTIFICATIONS_UPDATE,\n        notification,\n        usePendingItems: preferPendingItems,\n        meta: (playSound && !filtered) ? { sound: 'boop' } : undefined,\n      });\n\n      fetchRelatedRelationships(dispatch, [notification]);\n    } else if (playSound && !filtered) {\n      dispatch({\n        type: NOTIFICATIONS_UPDATE_NOOP,\n        meta: { sound: 'boop' },\n      });\n    }\n\n    // Desktop notifications\n    if (typeof window.Notification !== 'undefined' && showAlert && !filtered) {\n      const title = new IntlMessageFormat(intlMessages[`notification.${notification.type}`], intlLocale).format({ name: notification.account.display_name.length > 0 ? notification.account.display_name : notification.account.username });\n      const body  = (notification.status && notification.status.spoiler_text.length > 0) ? notification.status.spoiler_text : unescapeHTML(notification.status ? notification.status.content : '');\n\n      const notify = new Notification(title, { body, icon: notification.account.avatar, tag: notification.id });\n\n      notify.addEventListener('click', () => {\n        window.focus();\n        notify.close();\n      });\n    }\n  };\n};\n\nconst excludeTypesFromSettings = state => state.getIn(['settings', 'notifications', 'shows']).filter(enabled => !enabled).keySeq().toJS();\n\nconst excludeTypesFromFilter = filter => {\n  const allTypes = ImmutableList(['follow', 'follow_request', 'favourite', 'reblog', 'mention', 'poll']);\n  return allTypes.filterNot(item => item === filter).toJS();\n};\n\nconst noOp = () => {};\n\nexport function expandNotifications({ maxId } = {}, done = noOp) {\n  return (dispatch, getState) => {\n    const activeFilter = getState().getIn(['settings', 'notifications', 'quickFilter', 'active']);\n    const notifications = getState().get('notifications');\n    const isLoadingMore = !!maxId;\n\n    if (notifications.get('isLoading')) {\n      done();\n      return;\n    }\n\n    const params = {\n      max_id: maxId,\n      exclude_types: activeFilter === 'all'\n        ? excludeTypesFromSettings(getState())\n        : excludeTypesFromFilter(activeFilter),\n    };\n\n    if (!params.max_id && (notifications.get('items', ImmutableList()).size + notifications.get('pendingItems', ImmutableList()).size) > 0) {\n      const a = notifications.getIn(['pendingItems', 0, 'id']);\n      const b = notifications.getIn(['items', 0, 'id']);\n\n      if (a && b && compareId(a, b) > 0) {\n        params.since_id = a;\n      } else {\n        params.since_id = b || a;\n      }\n    }\n\n    const isLoadingRecent = !!params.since_id;\n\n    dispatch(expandNotificationsRequest(isLoadingMore));\n\n    api(getState).get('/api/v1/notifications', { params }).then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n\n      dispatch(importFetchedAccounts(response.data.map(item => item.account)));\n      dispatch(importFetchedStatuses(response.data.map(item => item.status).filter(status => !!status)));\n\n      dispatch(expandNotificationsSuccess(response.data, next ? next.uri : null, isLoadingMore, isLoadingRecent, isLoadingRecent && preferPendingItems));\n      fetchRelatedRelationships(dispatch, response.data);\n      dispatch(submitMarkers());\n    }).catch(error => {\n      dispatch(expandNotificationsFail(error, isLoadingMore));\n    }).finally(() => {\n      done();\n    });\n  };\n};\n\nexport function expandNotificationsRequest(isLoadingMore) {\n  return {\n    type: NOTIFICATIONS_EXPAND_REQUEST,\n    skipLoading: !isLoadingMore,\n  };\n};\n\nexport function expandNotificationsSuccess(notifications, next, isLoadingMore, isLoadingRecent, usePendingItems) {\n  return {\n    type: NOTIFICATIONS_EXPAND_SUCCESS,\n    notifications,\n    next,\n    isLoadingRecent: isLoadingRecent,\n    usePendingItems,\n    skipLoading: !isLoadingMore,\n  };\n};\n\nexport function expandNotificationsFail(error, isLoadingMore) {\n  return {\n    type: NOTIFICATIONS_EXPAND_FAIL,\n    error,\n    skipLoading: !isLoadingMore,\n    skipAlert: !isLoadingMore,\n  };\n};\n\nexport function clearNotifications() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: NOTIFICATIONS_CLEAR,\n    });\n\n    api(getState).post('/api/v1/notifications/clear');\n  };\n};\n\nexport function scrollTopNotifications(top) {\n  return {\n    type: NOTIFICATIONS_SCROLL_TOP,\n    top,\n  };\n};\n\nexport function setFilter (filterType) {\n  return dispatch => {\n    dispatch({\n      type: NOTIFICATIONS_FILTER_SET,\n      path: ['notifications', 'quickFilter', 'active'],\n      value: filterType,\n    });\n    dispatch(expandNotifications());\n    dispatch(saveSettings());\n  };\n};\n\nexport const mountNotifications = () => ({\n  type: NOTIFICATIONS_MOUNT,\n});\n\nexport const unmountNotifications = () => ({\n  type: NOTIFICATIONS_UNMOUNT,\n});\n\n\nexport const markNotificationsAsRead = () => ({\n  type: NOTIFICATIONS_MARK_AS_READ,\n});\n\n// Browser support\nexport function setupBrowserNotifications() {\n  return dispatch => {\n    dispatch(setBrowserSupport('Notification' in window));\n    if ('Notification' in window) {\n      dispatch(setBrowserPermission(Notification.permission));\n    }\n\n    if ('Notification' in window && 'permissions' in navigator) {\n      navigator.permissions.query({ name: 'notifications' }).then((status) => {\n        status.onchange = () => dispatch(setBrowserPermission(Notification.permission));\n      }).catch(console.warn);\n    }\n  };\n}\n\nexport function requestBrowserPermission(callback = noOp) {\n  return dispatch => {\n    requestNotificationPermission((permission) => {\n      dispatch(setBrowserPermission(permission));\n      callback(permission);\n    });\n  };\n};\n\nexport function setBrowserSupport (value) {\n  return {\n    type: NOTIFICATIONS_SET_BROWSER_SUPPORT,\n    value,\n  };\n}\n\nexport function setBrowserPermission (value) {\n  return {\n    type: NOTIFICATIONS_SET_BROWSER_PERMISSION,\n    value,\n  };\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"notification.mention","defaultMessage":"{name} mentioned you"},{"id":"notifications.group","defaultMessage":"{count} notifications"}]}},"sourceType":"module"}