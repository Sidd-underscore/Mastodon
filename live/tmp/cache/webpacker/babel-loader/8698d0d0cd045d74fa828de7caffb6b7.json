{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/components/account.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Avatar from './avatar';\nimport DisplayName from './display_name';\nimport Permalink from './permalink';\nimport IconButton from './icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me } from '../initial_state';\nimport RelativeTimestamp from './relative_timestamp';\nvar messages = defineMessages({\n  follow: {\n    \"id\": \"account.follow\",\n    \"defaultMessage\": \"Follow\"\n  },\n  unfollow: {\n    \"id\": \"account.unfollow\",\n    \"defaultMessage\": \"Unfollow\"\n  },\n  requested: {\n    \"id\": \"account.requested\",\n    \"defaultMessage\": \"Awaiting approval\"\n  },\n  unblock: {\n    \"id\": \"account.unblock\",\n    \"defaultMessage\": \"Unblock @{name}\"\n  },\n  unmute: {\n    \"id\": \"account.unmute\",\n    \"defaultMessage\": \"Unmute @{name}\"\n  },\n  mute_notifications: {\n    \"id\": \"account.mute_notifications\",\n    \"defaultMessage\": \"Mute notifications from @{name}\"\n  },\n  unmute_notifications: {\n    \"id\": \"account.unmute_notifications\",\n    \"defaultMessage\": \"Unmute notifications from @{name}\"\n  }\n});\n\nvar Account = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(Account, _ImmutablePureCompone);\n\n  function Account() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n\n    _this.handleFollow = function () {\n      _this.props.onFollow(_this.props.account);\n    };\n\n    _this.handleBlock = function () {\n      _this.props.onBlock(_this.props.account);\n    };\n\n    _this.handleMute = function () {\n      _this.props.onMute(_this.props.account);\n    };\n\n    _this.handleMuteNotifications = function () {\n      _this.props.onMuteNotifications(_this.props.account, true);\n    };\n\n    _this.handleUnmuteNotifications = function () {\n      _this.props.onMuteNotifications(_this.props.account, false);\n    };\n\n    _this.handleAction = function () {\n      _this.props.onActionClick(_this.props.account);\n    };\n\n    return _this;\n  }\n\n  var _proto = Account.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        account = _this$props.account,\n        intl = _this$props.intl,\n        hidden = _this$props.hidden,\n        onActionClick = _this$props.onActionClick,\n        actionIcon = _this$props.actionIcon,\n        actionTitle = _this$props.actionTitle;\n\n    if (!account) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 14\n        }\n      });\n    }\n\n    if (hidden) {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, account.get('display_name'), account.get('username'));\n    }\n\n    var buttons;\n\n    if (actionIcon) {\n      if (onActionClick) {\n        buttons = /*#__PURE__*/React.createElement(IconButton, {\n          icon: actionIcon,\n          title: actionTitle,\n          onClick: this.handleAction,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }\n        });\n      }\n    } else if (account.get('id') !== me && account.get('relationship', null) !== null) {\n      var following = account.getIn(['relationship', 'following']);\n      var requested = account.getIn(['relationship', 'requested']);\n      var blocking = account.getIn(['relationship', 'blocking']);\n      var muting = account.getIn(['relationship', 'muting']);\n\n      if (requested) {\n        buttons = /*#__PURE__*/React.createElement(IconButton, {\n          disabled: true,\n          icon: \"hourglass\",\n          title: intl.formatMessage(messages.requested),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 19\n          }\n        });\n      } else if (blocking) {\n        buttons = /*#__PURE__*/React.createElement(IconButton, {\n          active: true,\n          icon: \"unlock\",\n          title: intl.formatMessage(messages.unblock, {\n            name: account.get('username')\n          }),\n          onClick: this.handleBlock,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 19\n          }\n        });\n      } else if (muting) {\n        var hidingNotificationsButton;\n\n        if (account.getIn(['relationship', 'muting_notifications'])) {\n          hidingNotificationsButton = /*#__PURE__*/React.createElement(IconButton, {\n            active: true,\n            icon: \"bell\",\n            title: intl.formatMessage(messages.unmute_notifications, {\n              name: account.get('username')\n            }),\n            onClick: this.handleUnmuteNotifications,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 39\n            }\n          });\n        } else {\n          hidingNotificationsButton = /*#__PURE__*/React.createElement(IconButton, {\n            active: true,\n            icon: \"bell-slash\",\n            title: intl.formatMessage(messages.mute_notifications, {\n              name: account.get('username')\n            }),\n            onClick: this.handleMuteNotifications,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 39\n            }\n          });\n        }\n\n        buttons = /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          active: true,\n          icon: \"volume-up\",\n          title: intl.formatMessage(messages.unmute, {\n            name: account.get('username')\n          }),\n          onClick: this.handleMute,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }\n        }), hidingNotificationsButton);\n      } else if (!account.get('moved') || following) {\n        buttons = /*#__PURE__*/React.createElement(IconButton, {\n          icon: following ? 'user-times' : 'user-plus',\n          title: intl.formatMessage(following ? messages.unfollow : messages.follow),\n          onClick: this.handleFollow,\n          active: following,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 19\n          }\n        });\n      }\n    }\n\n    var mute_expires_at;\n\n    if (account.get('mute_expires_at')) {\n      mute_expires_at = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(RelativeTimestamp, {\n        timestamp: account.get('mute_expires_at'),\n        futureDate: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 31\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Permalink, {\n      key: account.get('id'),\n      className: \"account__display-name\",\n      title: account.get('acct'),\n      href: account.get('url'),\n      to: \"/accounts/\" + account.get('id'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__avatar-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      account: account,\n      size: 36,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 54\n      }\n    })), mute_expires_at, /*#__PURE__*/React.createElement(DisplayName, {\n      account: account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account__relationship\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, buttons)));\n  };\n\n  return Account;\n}(ImmutablePureComponent), _class2.propTypes = {\n  account: ImmutablePropTypes.map.isRequired,\n  onFollow: PropTypes.func.isRequired,\n  onBlock: PropTypes.func.isRequired,\n  onMute: PropTypes.func.isRequired,\n  onMuteNotifications: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired,\n  hidden: PropTypes.bool,\n  actionIcon: PropTypes.string,\n  actionTitle: PropTypes.string,\n  onActionClick: PropTypes.func\n}, _temp)) || _class;\n\nexport { Account as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/components/account.js"],"names":["React","Fragment","ImmutablePropTypes","PropTypes","Avatar","DisplayName","Permalink","IconButton","defineMessages","injectIntl","ImmutablePureComponent","me","RelativeTimestamp","messages","follow","unfollow","requested","unblock","unmute","mute_notifications","unmute_notifications","Account","handleFollow","props","onFollow","account","handleBlock","onBlock","handleMute","onMute","handleMuteNotifications","onMuteNotifications","handleUnmuteNotifications","handleAction","onActionClick","render","intl","hidden","actionIcon","actionTitle","get","buttons","following","getIn","blocking","muting","formatMessage","name","hidingNotificationsButton","mute_expires_at","propTypes","map","isRequired","func","object","bool","string"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Avatar from './avatar';\nimport DisplayName from './display_name';\nimport Permalink from './permalink';\nimport IconButton from './icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me } from '../initial_state';\nimport RelativeTimestamp from './relative_timestamp';\n\nconst messages = defineMessages({\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n  requested: { id: 'account.requested', defaultMessage: 'Awaiting approval' },\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  mute_notifications: { id: 'account.mute_notifications', defaultMessage: 'Mute notifications from @{name}' },\n  unmute_notifications: { id: 'account.unmute_notifications', defaultMessage: 'Unmute notifications from @{name}' },\n});\n\nexport default @injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onFollow: PropTypes.func.isRequired,\n    onBlock: PropTypes.func.isRequired,\n    onMute: PropTypes.func.isRequired,\n    onMuteNotifications: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hidden: PropTypes.bool,\n    actionIcon: PropTypes.string,\n    actionTitle: PropTypes.string,\n    onActionClick: PropTypes.func,\n  };\n\n  handleFollow = () => {\n    this.props.onFollow(this.props.account);\n  }\n\n  handleBlock = () => {\n    this.props.onBlock(this.props.account);\n  }\n\n  handleMute = () => {\n    this.props.onMute(this.props.account);\n  }\n\n  handleMuteNotifications = () => {\n    this.props.onMuteNotifications(this.props.account, true);\n  }\n\n  handleUnmuteNotifications = () => {\n    this.props.onMuteNotifications(this.props.account, false);\n  }\n\n  handleAction = () => {\n    this.props.onActionClick(this.props.account);\n  }\n\n  render () {\n    const { account, intl, hidden, onActionClick, actionIcon, actionTitle } = this.props;\n\n    if (!account) {\n      return <div />;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {account.get('display_name')}\n          {account.get('username')}\n        </Fragment>\n      );\n    }\n\n    let buttons;\n\n    if (actionIcon) {\n      if (onActionClick) {\n        buttons = <IconButton icon={actionIcon} title={actionTitle} onClick={this.handleAction} />;\n      }\n    } else if (account.get('id') !== me && account.get('relationship', null) !== null) {\n      const following = account.getIn(['relationship', 'following']);\n      const requested = account.getIn(['relationship', 'requested']);\n      const blocking  = account.getIn(['relationship', 'blocking']);\n      const muting  = account.getIn(['relationship', 'muting']);\n\n      if (requested) {\n        buttons = <IconButton disabled icon='hourglass' title={intl.formatMessage(messages.requested)} />;\n      } else if (blocking) {\n        buttons = <IconButton active icon='unlock' title={intl.formatMessage(messages.unblock, { name: account.get('username') })} onClick={this.handleBlock} />;\n      } else if (muting) {\n        let hidingNotificationsButton;\n        if (account.getIn(['relationship', 'muting_notifications'])) {\n          hidingNotificationsButton = <IconButton active icon='bell' title={intl.formatMessage(messages.unmute_notifications, { name: account.get('username') })} onClick={this.handleUnmuteNotifications} />;\n        } else {\n          hidingNotificationsButton = <IconButton active icon='bell-slash' title={intl.formatMessage(messages.mute_notifications, { name: account.get('username')  })} onClick={this.handleMuteNotifications} />;\n        }\n        buttons = (\n          <Fragment>\n            <IconButton active icon='volume-up' title={intl.formatMessage(messages.unmute, { name: account.get('username') })} onClick={this.handleMute} />\n            {hidingNotificationsButton}\n          </Fragment>\n        );\n      } else if (!account.get('moved') || following) {\n        buttons = <IconButton icon={following ? 'user-times' : 'user-plus'} title={intl.formatMessage(following ? messages.unfollow : messages.follow)} onClick={this.handleFollow} active={following} />;\n      }\n    }\n\n    let mute_expires_at;\n    if (account.get('mute_expires_at')) {\n      mute_expires_at =  <div><RelativeTimestamp timestamp={account.get('mute_expires_at')} futureDate /></div>;\n    }\n\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <Permalink key={account.get('id')} className='account__display-name' title={account.get('acct')} href={account.get('url')} to={`/accounts/${account.get('id')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            {mute_expires_at}\n            <DisplayName account={account} />\n          </Permalink>\n\n          <div className='account__relationship'>\n            {buttons}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"account.follow","defaultMessage":"Follow"},{"id":"account.unfollow","defaultMessage":"Unfollow"},{"id":"account.requested","defaultMessage":"Awaiting approval"},{"id":"account.unblock","defaultMessage":"Unblock @{name}"},{"id":"account.unmute","defaultMessage":"Unmute @{name}"},{"id":"account.mute_notifications","defaultMessage":"Mute notifications from @{name}"},{"id":"account.unmute_notifications","defaultMessage":"Unmute notifications from @{name}"}]}},"sourceType":"module"}