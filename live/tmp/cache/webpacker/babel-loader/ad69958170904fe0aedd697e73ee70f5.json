{"ast":null,"code":"import api, { getLinks } from '../api';\nimport { importFetchedStatuses } from './importer';\nexport var BOOKMARKED_STATUSES_FETCH_REQUEST = 'BOOKMARKED_STATUSES_FETCH_REQUEST';\nexport var BOOKMARKED_STATUSES_FETCH_SUCCESS = 'BOOKMARKED_STATUSES_FETCH_SUCCESS';\nexport var BOOKMARKED_STATUSES_FETCH_FAIL = 'BOOKMARKED_STATUSES_FETCH_FAIL';\nexport var BOOKMARKED_STATUSES_EXPAND_REQUEST = 'BOOKMARKED_STATUSES_EXPAND_REQUEST';\nexport var BOOKMARKED_STATUSES_EXPAND_SUCCESS = 'BOOKMARKED_STATUSES_EXPAND_SUCCESS';\nexport var BOOKMARKED_STATUSES_EXPAND_FAIL = 'BOOKMARKED_STATUSES_EXPAND_FAIL';\nexport function fetchBookmarkedStatuses() {\n  return function (dispatch, getState) {\n    if (getState().getIn(['status_lists', 'bookmarks', 'isLoading'])) {\n      return;\n    }\n\n    dispatch(fetchBookmarkedStatusesRequest());\n    api(getState).get('/api/v1/bookmarks').then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(importFetchedStatuses(response.data));\n      dispatch(fetchBookmarkedStatusesSuccess(response.data, next ? next.uri : null));\n    }).catch(function (error) {\n      dispatch(fetchBookmarkedStatusesFail(error));\n    });\n  };\n}\n;\nexport function fetchBookmarkedStatusesRequest() {\n  return {\n    type: BOOKMARKED_STATUSES_FETCH_REQUEST\n  };\n}\n;\nexport function fetchBookmarkedStatusesSuccess(statuses, next) {\n  return {\n    type: BOOKMARKED_STATUSES_FETCH_SUCCESS,\n    statuses,\n    next\n  };\n}\n;\nexport function fetchBookmarkedStatusesFail(error) {\n  return {\n    type: BOOKMARKED_STATUSES_FETCH_FAIL,\n    error\n  };\n}\n;\nexport function expandBookmarkedStatuses() {\n  return function (dispatch, getState) {\n    var url = getState().getIn(['status_lists', 'bookmarks', 'next'], null);\n\n    if (url === null || getState().getIn(['status_lists', 'bookmarks', 'isLoading'])) {\n      return;\n    }\n\n    dispatch(expandBookmarkedStatusesRequest());\n    api(getState).get(url).then(function (response) {\n      var next = getLinks(response).refs.find(function (link) {\n        return link.rel === 'next';\n      });\n      dispatch(importFetchedStatuses(response.data));\n      dispatch(expandBookmarkedStatusesSuccess(response.data, next ? next.uri : null));\n    }).catch(function (error) {\n      dispatch(expandBookmarkedStatusesFail(error));\n    });\n  };\n}\n;\nexport function expandBookmarkedStatusesRequest() {\n  return {\n    type: BOOKMARKED_STATUSES_EXPAND_REQUEST\n  };\n}\n;\nexport function expandBookmarkedStatusesSuccess(statuses, next) {\n  return {\n    type: BOOKMARKED_STATUSES_EXPAND_SUCCESS,\n    statuses,\n    next\n  };\n}\n;\nexport function expandBookmarkedStatusesFail(error) {\n  return {\n    type: BOOKMARKED_STATUSES_EXPAND_FAIL,\n    error\n  };\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/bookmarks.js"],"names":["api","getLinks","importFetchedStatuses","BOOKMARKED_STATUSES_FETCH_REQUEST","BOOKMARKED_STATUSES_FETCH_SUCCESS","BOOKMARKED_STATUSES_FETCH_FAIL","BOOKMARKED_STATUSES_EXPAND_REQUEST","BOOKMARKED_STATUSES_EXPAND_SUCCESS","BOOKMARKED_STATUSES_EXPAND_FAIL","fetchBookmarkedStatuses","dispatch","getState","getIn","fetchBookmarkedStatusesRequest","get","then","response","next","refs","find","link","rel","data","fetchBookmarkedStatusesSuccess","uri","catch","error","fetchBookmarkedStatusesFail","type","statuses","expandBookmarkedStatuses","url","expandBookmarkedStatusesRequest","expandBookmarkedStatusesSuccess","expandBookmarkedStatusesFail"],"mappings":"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","sourcesContent":["import api, { getLinks } from '../api';\nimport { importFetchedStatuses } from './importer';\n\nexport const BOOKMARKED_STATUSES_FETCH_REQUEST = 'BOOKMARKED_STATUSES_FETCH_REQUEST';\nexport const BOOKMARKED_STATUSES_FETCH_SUCCESS = 'BOOKMARKED_STATUSES_FETCH_SUCCESS';\nexport const BOOKMARKED_STATUSES_FETCH_FAIL    = 'BOOKMARKED_STATUSES_FETCH_FAIL';\n\nexport const BOOKMARKED_STATUSES_EXPAND_REQUEST = 'BOOKMARKED_STATUSES_EXPAND_REQUEST';\nexport const BOOKMARKED_STATUSES_EXPAND_SUCCESS = 'BOOKMARKED_STATUSES_EXPAND_SUCCESS';\nexport const BOOKMARKED_STATUSES_EXPAND_FAIL    = 'BOOKMARKED_STATUSES_EXPAND_FAIL';\n\nexport function fetchBookmarkedStatuses() {\n  return (dispatch, getState) => {\n    if (getState().getIn(['status_lists', 'bookmarks', 'isLoading'])) {\n      return;\n    }\n\n    dispatch(fetchBookmarkedStatusesRequest());\n\n    api(getState).get('/api/v1/bookmarks').then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n      dispatch(importFetchedStatuses(response.data));\n      dispatch(fetchBookmarkedStatusesSuccess(response.data, next ? next.uri : null));\n    }).catch(error => {\n      dispatch(fetchBookmarkedStatusesFail(error));\n    });\n  };\n};\n\nexport function fetchBookmarkedStatusesRequest() {\n  return {\n    type: BOOKMARKED_STATUSES_FETCH_REQUEST,\n  };\n};\n\nexport function fetchBookmarkedStatusesSuccess(statuses, next) {\n  return {\n    type: BOOKMARKED_STATUSES_FETCH_SUCCESS,\n    statuses,\n    next,\n  };\n};\n\nexport function fetchBookmarkedStatusesFail(error) {\n  return {\n    type: BOOKMARKED_STATUSES_FETCH_FAIL,\n    error,\n  };\n};\n\nexport function expandBookmarkedStatuses() {\n  return (dispatch, getState) => {\n    const url = getState().getIn(['status_lists', 'bookmarks', 'next'], null);\n\n    if (url === null || getState().getIn(['status_lists', 'bookmarks', 'isLoading'])) {\n      return;\n    }\n\n    dispatch(expandBookmarkedStatusesRequest());\n\n    api(getState).get(url).then(response => {\n      const next = getLinks(response).refs.find(link => link.rel === 'next');\n      dispatch(importFetchedStatuses(response.data));\n      dispatch(expandBookmarkedStatusesSuccess(response.data, next ? next.uri : null));\n    }).catch(error => {\n      dispatch(expandBookmarkedStatusesFail(error));\n    });\n  };\n};\n\nexport function expandBookmarkedStatusesRequest() {\n  return {\n    type: BOOKMARKED_STATUSES_EXPAND_REQUEST,\n  };\n};\n\nexport function expandBookmarkedStatusesSuccess(statuses, next) {\n  return {\n    type: BOOKMARKED_STATUSES_EXPAND_SUCCESS,\n    statuses,\n    next,\n  };\n};\n\nexport function expandBookmarkedStatusesFail(error) {\n  return {\n    type: BOOKMARKED_STATUSES_EXPAND_FAIL,\n    error,\n  };\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}