{"ast":null,"code":"import { defineMessages } from 'react-intl';\nvar messages = defineMessages({\n  unexpectedTitle: {\n    \"id\": \"alert.unexpected.title\",\n    \"defaultMessage\": \"Oops!\"\n  },\n  unexpectedMessage: {\n    \"id\": \"alert.unexpected.message\",\n    \"defaultMessage\": \"An unexpected error occurred.\"\n  },\n  rateLimitedTitle: {\n    \"id\": \"alert.rate_limited.title\",\n    \"defaultMessage\": \"Rate limited\"\n  },\n  rateLimitedMessage: {\n    \"id\": \"alert.rate_limited.message\",\n    \"defaultMessage\": \"Please retry after {retry_time, time, medium}.\"\n  }\n});\nexport var ALERT_SHOW = 'ALERT_SHOW';\nexport var ALERT_DISMISS = 'ALERT_DISMISS';\nexport var ALERT_CLEAR = 'ALERT_CLEAR';\nexport var ALERT_NOOP = 'ALERT_NOOP';\nexport function dismissAlert(alert) {\n  return {\n    type: ALERT_DISMISS,\n    alert\n  };\n}\n;\nexport function clearAlert() {\n  return {\n    type: ALERT_CLEAR\n  };\n}\n;\nexport function showAlert(title, message, message_values) {\n  if (title === void 0) {\n    title = messages.unexpectedTitle;\n  }\n\n  if (message === void 0) {\n    message = messages.unexpectedMessage;\n  }\n\n  if (message_values === void 0) {\n    message_values = undefined;\n  }\n\n  return {\n    type: ALERT_SHOW,\n    title,\n    message,\n    message_values\n  };\n}\n;\nexport function showAlertForError(error, skipNotFound) {\n  if (skipNotFound === void 0) {\n    skipNotFound = false;\n  }\n\n  if (error.response) {\n    var _error$response = error.response,\n        data = _error$response.data,\n        status = _error$response.status,\n        statusText = _error$response.statusText,\n        headers = _error$response.headers;\n\n    if (skipNotFound && (status === 404 || status === 410)) {\n      // Skip these errors as they are reflected in the UI\n      return {\n        type: ALERT_NOOP\n      };\n    }\n\n    if (status === 429 && headers['x-ratelimit-reset']) {\n      var reset_date = new Date(headers['x-ratelimit-reset']);\n      return showAlert(messages.rateLimitedTitle, messages.rateLimitedMessage, {\n        'retry_time': reset_date\n      });\n    }\n\n    var message = statusText;\n    var title = \"\" + status;\n\n    if (data.error) {\n      message = data.error;\n    }\n\n    return showAlert(title, message);\n  } else {\n    console.error(error);\n    return showAlert();\n  }\n}","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/alerts.js"],"names":["defineMessages","messages","unexpectedTitle","unexpectedMessage","rateLimitedTitle","rateLimitedMessage","ALERT_SHOW","ALERT_DISMISS","ALERT_CLEAR","ALERT_NOOP","dismissAlert","alert","type","clearAlert","showAlert","title","message","message_values","undefined","showAlertForError","error","skipNotFound","response","data","status","statusText","headers","reset_date","Date","console"],"mappings":"AAAA,SAASA,cAAT,QAA+B,YAA/B;AAEA,IAAMC,QAAQ,GAAGD,cAAc,CAAC;AAC9BE,EAAAA,eAAe;AAAA;AAAA;AAAA,GADe;AAE9BC,EAAAA,iBAAiB;AAAA;AAAA;AAAA,GAFa;AAG9BC,EAAAA,gBAAgB;AAAA;AAAA;AAAA,GAHc;AAI9BC,EAAAA,kBAAkB;AAAA;AAAA;AAAA;AAJY,CAAD,CAA/B;AAOA,OAAO,IAAMC,UAAU,GAAM,YAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,WAAW,GAAK,aAAtB;AACP,OAAO,IAAMC,UAAU,GAAM,YAAtB;AAEP,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEL,aADD;AAELI,IAAAA;AAFK,GAAP;AAID;AAAA;AAED,OAAO,SAASE,UAAT,GAAsB;AAC3B,SAAO;AACLD,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD;AAAA;AAED,OAAO,SAASM,SAAT,CAAmBC,KAAnB,EAAqDC,OAArD,EAA2FC,cAA3F,EAAuH;AAAA,MAApGF,KAAoG;AAApGA,IAAAA,KAAoG,GAA5Fd,QAAQ,CAACC,eAAmF;AAAA;;AAAA,MAAlEc,OAAkE;AAAlEA,IAAAA,OAAkE,GAAxDf,QAAQ,CAACE,iBAA+C;AAAA;;AAAA,MAA5Bc,cAA4B;AAA5BA,IAAAA,cAA4B,GAAXC,SAAW;AAAA;;AAC5H,SAAO;AACLN,IAAAA,IAAI,EAAEN,UADD;AAELS,IAAAA,KAFK;AAGLC,IAAAA,OAHK;AAILC,IAAAA;AAJK,GAAP;AAMD;AAAA;AAED,OAAO,SAASE,iBAAT,CAA2BC,KAA3B,EAAkCC,YAAlC,EAAwD;AAAA,MAAtBA,YAAsB;AAAtBA,IAAAA,YAAsB,GAAP,KAAO;AAAA;;AAC7D,MAAID,KAAK,CAACE,QAAV,EAAoB;AAClB,0BAA8CF,KAAK,CAACE,QAApD;AAAA,QAAQC,IAAR,mBAAQA,IAAR;AAAA,QAAcC,MAAd,mBAAcA,MAAd;AAAA,QAAsBC,UAAtB,mBAAsBA,UAAtB;AAAA,QAAkCC,OAAlC,mBAAkCA,OAAlC;;AAEA,QAAIL,YAAY,KAAKG,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAlC,CAAhB,EAAwD;AACtD;AACA,aAAO;AAAEZ,QAAAA,IAAI,EAAEH;AAAR,OAAP;AACD;;AAED,QAAIe,MAAM,KAAK,GAAX,IAAkBE,OAAO,CAAC,mBAAD,CAA7B,EAAoD;AAClD,UAAMC,UAAU,GAAG,IAAIC,IAAJ,CAASF,OAAO,CAAC,mBAAD,CAAhB,CAAnB;AACA,aAAOZ,SAAS,CAACb,QAAQ,CAACG,gBAAV,EAA4BH,QAAQ,CAACI,kBAArC,EAAyD;AAAE,sBAAcsB;AAAhB,OAAzD,CAAhB;AACD;;AAED,QAAIX,OAAO,GAAGS,UAAd;AACA,QAAIV,KAAK,QAAQS,MAAjB;;AAEA,QAAID,IAAI,CAACH,KAAT,EAAgB;AACdJ,MAAAA,OAAO,GAAGO,IAAI,CAACH,KAAf;AACD;;AAED,WAAON,SAAS,CAACC,KAAD,EAAQC,OAAR,CAAhB;AACD,GArBD,MAqBO;AACLa,IAAAA,OAAO,CAACT,KAAR,CAAcA,KAAd;AACA,WAAON,SAAS,EAAhB;AACD;AACF","sourcesContent":["import { defineMessages } from 'react-intl';\n\nconst messages = defineMessages({\n  unexpectedTitle: { id: 'alert.unexpected.title', defaultMessage: 'Oops!' },\n  unexpectedMessage: { id: 'alert.unexpected.message', defaultMessage: 'An unexpected error occurred.' },\n  rateLimitedTitle: { id: 'alert.rate_limited.title', defaultMessage: 'Rate limited' },\n  rateLimitedMessage: { id: 'alert.rate_limited.message', defaultMessage: 'Please retry after {retry_time, time, medium}.' },\n});\n\nexport const ALERT_SHOW    = 'ALERT_SHOW';\nexport const ALERT_DISMISS = 'ALERT_DISMISS';\nexport const ALERT_CLEAR   = 'ALERT_CLEAR';\nexport const ALERT_NOOP    = 'ALERT_NOOP';\n\nexport function dismissAlert(alert) {\n  return {\n    type: ALERT_DISMISS,\n    alert,\n  };\n};\n\nexport function clearAlert() {\n  return {\n    type: ALERT_CLEAR,\n  };\n};\n\nexport function showAlert(title = messages.unexpectedTitle, message = messages.unexpectedMessage, message_values = undefined) {\n  return {\n    type: ALERT_SHOW,\n    title,\n    message,\n    message_values,\n  };\n};\n\nexport function showAlertForError(error, skipNotFound = false) {\n  if (error.response) {\n    const { data, status, statusText, headers } = error.response;\n\n    if (skipNotFound && (status === 404 || status === 410)) {\n      // Skip these errors as they are reflected in the UI\n      return { type: ALERT_NOOP };\n    }\n\n    if (status === 429 && headers['x-ratelimit-reset']) {\n      const reset_date = new Date(headers['x-ratelimit-reset']);\n      return showAlert(messages.rateLimitedTitle, messages.rateLimitedMessage, { 'retry_time': reset_date });\n    }\n\n    let message = statusText;\n    let title   = `${status}`;\n\n    if (data.error) {\n      message = data.error;\n    }\n\n    return showAlert(title, message);\n  } else {\n    console.error(error);\n    return showAlert();\n  }\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"alert.unexpected.title","defaultMessage":"Oops!"},{"id":"alert.unexpected.message","defaultMessage":"An unexpected error occurred."},{"id":"alert.rate_limited.title","defaultMessage":"Rate limited"},{"id":"alert.rate_limited.message","defaultMessage":"Please retry after {retry_time, time, medium}."}]}},"sourceType":"module"}