{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/components/relative_timestamp.js\",\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport PropTypes from 'prop-types';\nvar messages = defineMessages({\n  today: {\n    \"id\": \"relative_time.today\",\n    \"defaultMessage\": \"today\"\n  },\n  just_now: {\n    \"id\": \"relative_time.just_now\",\n    \"defaultMessage\": \"now\"\n  },\n  seconds: {\n    \"id\": \"relative_time.seconds\",\n    \"defaultMessage\": \"{number}s\"\n  },\n  minutes: {\n    \"id\": \"relative_time.minutes\",\n    \"defaultMessage\": \"{number}m\"\n  },\n  hours: {\n    \"id\": \"relative_time.hours\",\n    \"defaultMessage\": \"{number}h\"\n  },\n  days: {\n    \"id\": \"relative_time.days\",\n    \"defaultMessage\": \"{number}d\"\n  },\n  moments_remaining: {\n    \"id\": \"time_remaining.moments\",\n    \"defaultMessage\": \"Moments remaining\"\n  },\n  seconds_remaining: {\n    \"id\": \"time_remaining.seconds\",\n    \"defaultMessage\": \"{number, plural, one {# second} other {# seconds}} left\"\n  },\n  minutes_remaining: {\n    \"id\": \"time_remaining.minutes\",\n    \"defaultMessage\": \"{number, plural, one {# minute} other {# minutes}} left\"\n  },\n  hours_remaining: {\n    \"id\": \"time_remaining.hours\",\n    \"defaultMessage\": \"{number, plural, one {# hour} other {# hours}} left\"\n  },\n  days_remaining: {\n    \"id\": \"time_remaining.days\",\n    \"defaultMessage\": \"{number, plural, one {# day} other {# days}} left\"\n  }\n});\nvar dateFormatOptions = {\n  hour12: false,\n  year: 'numeric',\n  month: 'short',\n  day: '2-digit',\n  hour: '2-digit',\n  minute: '2-digit'\n};\nvar shortDateFormatOptions = {\n  month: 'short',\n  day: 'numeric'\n};\nvar SECOND = 1000;\nvar MINUTE = 1000 * 60;\nvar HOUR = 1000 * 60 * 60;\nvar DAY = 1000 * 60 * 60 * 24;\nvar MAX_DELAY = 2147483647;\n\nvar selectUnits = function selectUnits(delta) {\n  var absDelta = Math.abs(delta);\n\n  if (absDelta < MINUTE) {\n    return 'second';\n  } else if (absDelta < HOUR) {\n    return 'minute';\n  } else if (absDelta < DAY) {\n    return 'hour';\n  }\n\n  return 'day';\n};\n\nvar getUnitDelay = function getUnitDelay(units) {\n  switch (units) {\n    case 'second':\n      return SECOND;\n\n    case 'minute':\n      return MINUTE;\n\n    case 'hour':\n      return HOUR;\n\n    case 'day':\n      return DAY;\n\n    default:\n      return MAX_DELAY;\n  }\n};\n\nexport var timeAgoString = function timeAgoString(intl, date, now, year, timeGiven) {\n  if (timeGiven === void 0) {\n    timeGiven = true;\n  }\n\n  var delta = now - date.getTime();\n  var relativeTime;\n\n  if (delta < DAY && !timeGiven) {\n    relativeTime = intl.formatMessage(messages.today);\n  } else if (delta < 10 * SECOND) {\n    relativeTime = intl.formatMessage(messages.just_now);\n  } else if (delta < 7 * DAY) {\n    if (delta < MINUTE) {\n      relativeTime = intl.formatMessage(messages.seconds, {\n        number: Math.floor(delta / SECOND)\n      });\n    } else if (delta < HOUR) {\n      relativeTime = intl.formatMessage(messages.minutes, {\n        number: Math.floor(delta / MINUTE)\n      });\n    } else if (delta < DAY) {\n      relativeTime = intl.formatMessage(messages.hours, {\n        number: Math.floor(delta / HOUR)\n      });\n    } else {\n      relativeTime = intl.formatMessage(messages.days, {\n        number: Math.floor(delta / DAY)\n      });\n    }\n  } else if (date.getFullYear() === year) {\n    relativeTime = intl.formatDate(date, shortDateFormatOptions);\n  } else {\n    relativeTime = intl.formatDate(date, _extends({}, shortDateFormatOptions, {\n      year: 'numeric'\n    }));\n  }\n\n  return relativeTime;\n};\n\nvar timeRemainingString = function timeRemainingString(intl, date, now, timeGiven) {\n  if (timeGiven === void 0) {\n    timeGiven = true;\n  }\n\n  var delta = date.getTime() - now;\n  var relativeTime;\n\n  if (delta < DAY && !timeGiven) {\n    relativeTime = intl.formatMessage(messages.today);\n  } else if (delta < 10 * SECOND) {\n    relativeTime = intl.formatMessage(messages.moments_remaining);\n  } else if (delta < MINUTE) {\n    relativeTime = intl.formatMessage(messages.seconds_remaining, {\n      number: Math.floor(delta / SECOND)\n    });\n  } else if (delta < HOUR) {\n    relativeTime = intl.formatMessage(messages.minutes_remaining, {\n      number: Math.floor(delta / MINUTE)\n    });\n  } else if (delta < DAY) {\n    relativeTime = intl.formatMessage(messages.hours_remaining, {\n      number: Math.floor(delta / HOUR)\n    });\n  } else {\n    relativeTime = intl.formatMessage(messages.days_remaining, {\n      number: Math.floor(delta / DAY)\n    });\n  }\n\n  return relativeTime;\n};\n\nvar RelativeTimestamp = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(RelativeTimestamp, _React$Component);\n\n  function RelativeTimestamp() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      now: _this.props.intl.now()\n    };\n    return _this;\n  }\n\n  var _proto = RelativeTimestamp.prototype;\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    // As of right now the locale doesn't change without a new page load,\n    // but we might as well check in case that ever changes.\n    return this.props.timestamp !== nextProps.timestamp || this.props.intl.locale !== nextProps.intl.locale || this.state.now !== nextState.now;\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.props.timestamp !== nextProps.timestamp) {\n      this.setState({\n        now: this.props.intl.now()\n      });\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._scheduleNextUpdate(this.props, this.state);\n  };\n\n  _proto.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {\n    this._scheduleNextUpdate(nextProps, nextState);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this._timer);\n  };\n\n  _proto._scheduleNextUpdate = function _scheduleNextUpdate(props, state) {\n    var _this2 = this;\n\n    clearTimeout(this._timer);\n    var timestamp = props.timestamp;\n    var delta = new Date(timestamp).getTime() - state.now;\n    var unitDelay = getUnitDelay(selectUnits(delta));\n    var unitRemainder = Math.abs(delta % unitDelay);\n    var updateInterval = 1000 * 10;\n    var delay = delta < 0 ? Math.max(updateInterval, unitDelay - unitRemainder) : Math.max(updateInterval, unitRemainder);\n    this._timer = setTimeout(function () {\n      _this2.setState({\n        now: _this2.props.intl.now()\n      });\n    }, delay);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        timestamp = _this$props.timestamp,\n        intl = _this$props.intl,\n        year = _this$props.year,\n        futureDate = _this$props.futureDate;\n    var timeGiven = timestamp.includes('T');\n    var date = new Date(timestamp);\n    var relativeTime = futureDate ? timeRemainingString(intl, date, this.state.now, timeGiven) : timeAgoString(intl, date, this.state.now, year, timeGiven);\n    return /*#__PURE__*/React.createElement(\"time\", {\n      dateTime: timestamp,\n      title: intl.formatDate(date, dateFormatOptions),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }\n    }, relativeTime);\n  };\n\n  return RelativeTimestamp;\n}(React.Component), _class2.propTypes = {\n  intl: PropTypes.object.isRequired,\n  timestamp: PropTypes.string.isRequired,\n  year: PropTypes.number.isRequired,\n  futureDate: PropTypes.bool\n}, _class2.defaultProps = {\n  year: new Date().getFullYear()\n}, _temp)) || _class;\n\nexport { RelativeTimestamp as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/components/relative_timestamp.js"],"names":["React","injectIntl","defineMessages","PropTypes","messages","today","just_now","seconds","minutes","hours","days","moments_remaining","seconds_remaining","minutes_remaining","hours_remaining","days_remaining","dateFormatOptions","hour12","year","month","day","hour","minute","shortDateFormatOptions","SECOND","MINUTE","HOUR","DAY","MAX_DELAY","selectUnits","delta","absDelta","Math","abs","getUnitDelay","units","timeAgoString","intl","date","now","timeGiven","getTime","relativeTime","formatMessage","number","floor","getFullYear","formatDate","timeRemainingString","RelativeTimestamp","state","props","shouldComponentUpdate","nextProps","nextState","timestamp","locale","componentWillReceiveProps","setState","componentDidMount","_scheduleNextUpdate","componentWillUpdate","componentWillUnmount","clearTimeout","_timer","Date","unitDelay","unitRemainder","updateInterval","delay","max","setTimeout","render","futureDate","includes","Component","propTypes","object","isRequired","string","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nconst messages = defineMessages({\n  today: { id: 'relative_time.today', defaultMessage: 'today' },\n  just_now: { id: 'relative_time.just_now', defaultMessage: 'now' },\n  seconds: { id: 'relative_time.seconds', defaultMessage: '{number}s' },\n  minutes: { id: 'relative_time.minutes', defaultMessage: '{number}m' },\n  hours: { id: 'relative_time.hours', defaultMessage: '{number}h' },\n  days: { id: 'relative_time.days', defaultMessage: '{number}d' },\n  moments_remaining: { id: 'time_remaining.moments', defaultMessage: 'Moments remaining' },\n  seconds_remaining: { id: 'time_remaining.seconds', defaultMessage: '{number, plural, one {# second} other {# seconds}} left' },\n  minutes_remaining: { id: 'time_remaining.minutes', defaultMessage: '{number, plural, one {# minute} other {# minutes}} left' },\n  hours_remaining: { id: 'time_remaining.hours', defaultMessage: '{number, plural, one {# hour} other {# hours}} left' },\n  days_remaining: { id: 'time_remaining.days', defaultMessage: '{number, plural, one {# day} other {# days}} left' },\n});\n\nconst dateFormatOptions = {\n  hour12: false,\n  year: 'numeric',\n  month: 'short',\n  day: '2-digit',\n  hour: '2-digit',\n  minute: '2-digit',\n};\n\nconst shortDateFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n};\n\nconst SECOND = 1000;\nconst MINUTE = 1000 * 60;\nconst HOUR   = 1000 * 60 * 60;\nconst DAY    = 1000 * 60 * 60 * 24;\n\nconst MAX_DELAY = 2147483647;\n\nconst selectUnits = delta => {\n  const absDelta = Math.abs(delta);\n\n  if (absDelta < MINUTE) {\n    return 'second';\n  } else if (absDelta < HOUR) {\n    return 'minute';\n  } else if (absDelta < DAY) {\n    return 'hour';\n  }\n\n  return 'day';\n};\n\nconst getUnitDelay = units => {\n  switch (units) {\n  case 'second':\n    return SECOND;\n  case 'minute':\n    return MINUTE;\n  case 'hour':\n    return HOUR;\n  case 'day':\n    return DAY;\n  default:\n    return MAX_DELAY;\n  }\n};\n\nexport const timeAgoString = (intl, date, now, year, timeGiven = true) => {\n  const delta = now - date.getTime();\n\n  let relativeTime;\n\n  if (delta < DAY && !timeGiven) {\n    relativeTime = intl.formatMessage(messages.today);\n  } else if (delta < 10 * SECOND) {\n    relativeTime = intl.formatMessage(messages.just_now);\n  } else if (delta < 7 * DAY) {\n    if (delta < MINUTE) {\n      relativeTime = intl.formatMessage(messages.seconds, { number: Math.floor(delta / SECOND) });\n    } else if (delta < HOUR) {\n      relativeTime = intl.formatMessage(messages.minutes, { number: Math.floor(delta / MINUTE) });\n    } else if (delta < DAY) {\n      relativeTime = intl.formatMessage(messages.hours, { number: Math.floor(delta / HOUR) });\n    } else {\n      relativeTime = intl.formatMessage(messages.days, { number: Math.floor(delta / DAY) });\n    }\n  } else if (date.getFullYear() === year) {\n    relativeTime = intl.formatDate(date, shortDateFormatOptions);\n  } else {\n    relativeTime = intl.formatDate(date, { ...shortDateFormatOptions, year: 'numeric' });\n  }\n\n  return relativeTime;\n};\n\nconst timeRemainingString = (intl, date, now, timeGiven = true) => {\n  const delta = date.getTime() - now;\n\n  let relativeTime;\n\n  if (delta < DAY && !timeGiven) {\n    relativeTime = intl.formatMessage(messages.today);\n  } else if (delta < 10 * SECOND) {\n    relativeTime = intl.formatMessage(messages.moments_remaining);\n  } else if (delta < MINUTE) {\n    relativeTime = intl.formatMessage(messages.seconds_remaining, { number: Math.floor(delta / SECOND) });\n  } else if (delta < HOUR) {\n    relativeTime = intl.formatMessage(messages.minutes_remaining, { number: Math.floor(delta / MINUTE) });\n  } else if (delta < DAY) {\n    relativeTime = intl.formatMessage(messages.hours_remaining, { number: Math.floor(delta / HOUR) });\n  } else {\n    relativeTime = intl.formatMessage(messages.days_remaining, { number: Math.floor(delta / DAY) });\n  }\n\n  return relativeTime;\n};\n\nexport default @injectIntl\nclass RelativeTimestamp extends React.Component {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    timestamp: PropTypes.string.isRequired,\n    year: PropTypes.number.isRequired,\n    futureDate: PropTypes.bool,\n  };\n\n  state = {\n    now: this.props.intl.now(),\n  };\n\n  static defaultProps = {\n    year: (new Date()).getFullYear(),\n  };\n\n  shouldComponentUpdate (nextProps, nextState) {\n    // As of right now the locale doesn't change without a new page load,\n    // but we might as well check in case that ever changes.\n    return this.props.timestamp !== nextProps.timestamp ||\n      this.props.intl.locale !== nextProps.intl.locale ||\n      this.state.now !== nextState.now;\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (this.props.timestamp !== nextProps.timestamp) {\n      this.setState({ now: this.props.intl.now() });\n    }\n  }\n\n  componentDidMount () {\n    this._scheduleNextUpdate(this.props, this.state);\n  }\n\n  componentWillUpdate (nextProps, nextState) {\n    this._scheduleNextUpdate(nextProps, nextState);\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this._timer);\n  }\n\n  _scheduleNextUpdate (props, state) {\n    clearTimeout(this._timer);\n\n    const { timestamp }  = props;\n    const delta          = (new Date(timestamp)).getTime() - state.now;\n    const unitDelay      = getUnitDelay(selectUnits(delta));\n    const unitRemainder  = Math.abs(delta % unitDelay);\n    const updateInterval = 1000 * 10;\n    const delay          = delta < 0 ? Math.max(updateInterval, unitDelay - unitRemainder) : Math.max(updateInterval, unitRemainder);\n\n    this._timer = setTimeout(() => {\n      this.setState({ now: this.props.intl.now() });\n    }, delay);\n  }\n\n  render () {\n    const { timestamp, intl, year, futureDate } = this.props;\n\n    const timeGiven    = timestamp.includes('T');\n    const date         = new Date(timestamp);\n    const relativeTime = futureDate ? timeRemainingString(intl, date, this.state.now, timeGiven) : timeAgoString(intl, date, this.state.now, year, timeGiven);\n\n    return (\n      <time dateTime={timestamp} title={intl.formatDate(date, dateFormatOptions)}>\n        {relativeTime}\n      </time>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"relative_time.today","defaultMessage":"today"},{"id":"relative_time.just_now","defaultMessage":"now"},{"id":"relative_time.seconds","defaultMessage":"{number}s"},{"id":"relative_time.minutes","defaultMessage":"{number}m"},{"id":"relative_time.hours","defaultMessage":"{number}h"},{"id":"relative_time.days","defaultMessage":"{number}d"},{"id":"time_remaining.moments","defaultMessage":"Moments remaining"},{"id":"time_remaining.seconds","defaultMessage":"{number, plural, one {# second} other {# seconds}} left"},{"id":"time_remaining.minutes","defaultMessage":"{number, plural, one {# minute} other {# minutes}} left"},{"id":"time_remaining.hours","defaultMessage":"{number, plural, one {# hour} other {# hours}} left"},{"id":"time_remaining.days","defaultMessage":"{number, plural, one {# day} other {# days}} left"}]}},"sourceType":"module"}