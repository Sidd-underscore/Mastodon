{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/components/status_action_bar.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport IconButton from './icon_button';\nimport DropdownMenuContainer from '../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me, isStaff } from '../initial_state';\nimport classNames from 'classnames';\nvar messages = defineMessages({\n  delete: {\n    \"id\": \"status.delete\",\n    \"defaultMessage\": \"Delete\"\n  },\n  redraft: {\n    \"id\": \"status.redraft\",\n    \"defaultMessage\": \"Delete & re-draft\"\n  },\n  direct: {\n    \"id\": \"status.direct\",\n    \"defaultMessage\": \"Direct message @{name}\"\n  },\n  mention: {\n    \"id\": \"status.mention\",\n    \"defaultMessage\": \"Mention @{name}\"\n  },\n  mute: {\n    \"id\": \"account.mute\",\n    \"defaultMessage\": \"Mute @{name}\"\n  },\n  block: {\n    \"id\": \"account.block\",\n    \"defaultMessage\": \"Block @{name}\"\n  },\n  reply: {\n    \"id\": \"status.reply\",\n    \"defaultMessage\": \"Reply\"\n  },\n  share: {\n    \"id\": \"status.share\",\n    \"defaultMessage\": \"Share\"\n  },\n  more: {\n    \"id\": \"status.more\",\n    \"defaultMessage\": \"More\"\n  },\n  replyAll: {\n    \"id\": \"status.replyAll\",\n    \"defaultMessage\": \"Reply to thread\"\n  },\n  reblog: {\n    \"id\": \"status.reblog\",\n    \"defaultMessage\": \"Boost\"\n  },\n  reblog_private: {\n    \"id\": \"status.reblog_private\",\n    \"defaultMessage\": \"Boost with original visibility\"\n  },\n  cancel_reblog_private: {\n    \"id\": \"status.cancel_reblog_private\",\n    \"defaultMessage\": \"Unboost\"\n  },\n  cannot_reblog: {\n    \"id\": \"status.cannot_reblog\",\n    \"defaultMessage\": \"This post cannot be boosted\"\n  },\n  favourite: {\n    \"id\": \"status.favourite\",\n    \"defaultMessage\": \"Favourite\"\n  },\n  bookmark: {\n    \"id\": \"status.bookmark\",\n    \"defaultMessage\": \"Bookmark\"\n  },\n  removeBookmark: {\n    \"id\": \"status.remove_bookmark\",\n    \"defaultMessage\": \"Remove bookmark\"\n  },\n  open: {\n    \"id\": \"status.open\",\n    \"defaultMessage\": \"Expand this status\"\n  },\n  report: {\n    \"id\": \"status.report\",\n    \"defaultMessage\": \"Report @{name}\"\n  },\n  muteConversation: {\n    \"id\": \"status.mute_conversation\",\n    \"defaultMessage\": \"Mute conversation\"\n  },\n  unmuteConversation: {\n    \"id\": \"status.unmute_conversation\",\n    \"defaultMessage\": \"Unmute conversation\"\n  },\n  pin: {\n    \"id\": \"status.pin\",\n    \"defaultMessage\": \"Pin on profile\"\n  },\n  unpin: {\n    \"id\": \"status.unpin\",\n    \"defaultMessage\": \"Unpin from profile\"\n  },\n  embed: {\n    \"id\": \"status.embed\",\n    \"defaultMessage\": \"Embed\"\n  },\n  admin_account: {\n    \"id\": \"status.admin_account\",\n    \"defaultMessage\": \"Open moderation interface for @{name}\"\n  },\n  admin_status: {\n    \"id\": \"status.admin_status\",\n    \"defaultMessage\": \"Open this status in the moderation interface\"\n  },\n  copy: {\n    \"id\": \"status.copy\",\n    \"defaultMessage\": \"Copy link to status\"\n  },\n  blockDomain: {\n    \"id\": \"account.block_domain\",\n    \"defaultMessage\": \"Block domain {domain}\"\n  },\n  unblockDomain: {\n    \"id\": \"account.unblock_domain\",\n    \"defaultMessage\": \"Unblock domain {domain}\"\n  },\n  unmute: {\n    \"id\": \"account.unmute\",\n    \"defaultMessage\": \"Unmute @{name}\"\n  },\n  unblock: {\n    \"id\": \"account.unblock\",\n    \"defaultMessage\": \"Unblock @{name}\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var status = _ref.status;\n  return {\n    relationship: state.getIn(['relationships', status.getIn(['account', 'id'])])\n  };\n};\n\nvar StatusActionBar = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(StatusActionBar, _ImmutablePureCompone);\n\n  function StatusActionBar() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n    _this.updateOnProps = ['status', 'relationship', 'withDismiss'];\n\n    _this.handleReplyClick = function () {\n      if (me) {\n        _this.props.onReply(_this.props.status, _this.context.router.history);\n      } else {\n        _this._openInteractionDialog('reply');\n      }\n    };\n\n    _this.handleShareClick = function () {\n      navigator.share({\n        text: _this.props.status.get('search_index'),\n        url: _this.props.status.get('url')\n      }).catch(function (e) {\n        if (e.name !== 'AbortError') console.error(e);\n      });\n    };\n\n    _this.handleFavouriteClick = function () {\n      if (me) {\n        _this.props.onFavourite(_this.props.status);\n      } else {\n        _this._openInteractionDialog('favourite');\n      }\n    };\n\n    _this.handleReblogClick = function (e) {\n      if (me) {\n        _this.props.onReblog(_this.props.status, e);\n      } else {\n        _this._openInteractionDialog('reblog');\n      }\n    };\n\n    _this._openInteractionDialog = function (type) {\n      window.open(\"/interact/\" + _this.props.status.get('id') + \"?type=\" + type, 'mastodon-intent', 'width=445,height=600,resizable=no,menubar=no,status=no,scrollbars=yes');\n    };\n\n    _this.handleBookmarkClick = function () {\n      _this.props.onBookmark(_this.props.status);\n    };\n\n    _this.handleDeleteClick = function () {\n      _this.props.onDelete(_this.props.status, _this.context.router.history);\n    };\n\n    _this.handleRedraftClick = function () {\n      _this.props.onDelete(_this.props.status, _this.context.router.history, true);\n    };\n\n    _this.handlePinClick = function () {\n      _this.props.onPin(_this.props.status);\n    };\n\n    _this.handleMentionClick = function () {\n      _this.props.onMention(_this.props.status.get('account'), _this.context.router.history);\n    };\n\n    _this.handleDirectClick = function () {\n      _this.props.onDirect(_this.props.status.get('account'), _this.context.router.history);\n    };\n\n    _this.handleMuteClick = function () {\n      var _this$props = _this.props,\n          status = _this$props.status,\n          relationship = _this$props.relationship,\n          onMute = _this$props.onMute,\n          onUnmute = _this$props.onUnmute;\n      var account = status.get('account');\n\n      if (relationship && relationship.get('muting')) {\n        onUnmute(account);\n      } else {\n        onMute(account);\n      }\n    };\n\n    _this.handleBlockClick = function () {\n      var _this$props2 = _this.props,\n          status = _this$props2.status,\n          relationship = _this$props2.relationship,\n          onBlock = _this$props2.onBlock,\n          onUnblock = _this$props2.onUnblock;\n      var account = status.get('account');\n\n      if (relationship && relationship.get('blocking')) {\n        onUnblock(account);\n      } else {\n        onBlock(status);\n      }\n    };\n\n    _this.handleBlockDomain = function () {\n      var _this$props3 = _this.props,\n          status = _this$props3.status,\n          onBlockDomain = _this$props3.onBlockDomain;\n      var account = status.get('account');\n      onBlockDomain(account.get('acct').split('@')[1]);\n    };\n\n    _this.handleUnblockDomain = function () {\n      var _this$props4 = _this.props,\n          status = _this$props4.status,\n          onUnblockDomain = _this$props4.onUnblockDomain;\n      var account = status.get('account');\n      onUnblockDomain(account.get('acct').split('@')[1]);\n    };\n\n    _this.handleOpen = function () {\n      _this.context.router.history.push(\"/statuses/\" + _this.props.status.get('id'));\n    };\n\n    _this.handleEmbed = function () {\n      _this.props.onEmbed(_this.props.status);\n    };\n\n    _this.handleReport = function () {\n      _this.props.onReport(_this.props.status);\n    };\n\n    _this.handleConversationMuteClick = function () {\n      _this.props.onMuteConversation(_this.props.status);\n    };\n\n    _this.handleCopy = function () {\n      var url = _this.props.status.get('url');\n\n      var textarea = document.createElement('textarea');\n      textarea.textContent = url;\n      textarea.style.position = 'fixed';\n      document.body.appendChild(textarea);\n\n      try {\n        textarea.select();\n        document.execCommand('copy');\n      } catch (e) {} finally {\n        document.body.removeChild(textarea);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = StatusActionBar.prototype;\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        status = _this$props5.status,\n        relationship = _this$props5.relationship,\n        intl = _this$props5.intl,\n        withDismiss = _this$props5.withDismiss,\n        scrollKey = _this$props5.scrollKey;\n    var anonymousAccess = !me;\n    var publicStatus = ['public', 'unlisted'].includes(status.get('visibility'));\n    var mutingConversation = status.get('muted');\n    var account = status.get('account');\n    var writtenByMe = status.getIn(['account', 'id']) === me;\n    var menu = [];\n    menu.push({\n      text: intl.formatMessage(messages.open),\n      action: this.handleOpen\n    });\n\n    if (publicStatus) {\n      menu.push({\n        text: intl.formatMessage(messages.copy),\n        action: this.handleCopy\n      });\n      menu.push({\n        text: intl.formatMessage(messages.embed),\n        action: this.handleEmbed\n      });\n    }\n\n    menu.push(null);\n    menu.push({\n      text: intl.formatMessage(status.get('bookmarked') ? messages.removeBookmark : messages.bookmark),\n      action: this.handleBookmarkClick\n    });\n\n    if (writtenByMe && publicStatus) {\n      menu.push({\n        text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin),\n        action: this.handlePinClick\n      });\n    }\n\n    menu.push(null);\n\n    if (writtenByMe || withDismiss) {\n      menu.push({\n        text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation),\n        action: this.handleConversationMuteClick\n      });\n      menu.push(null);\n    }\n\n    if (writtenByMe) {\n      menu.push({\n        text: intl.formatMessage(messages.delete),\n        action: this.handleDeleteClick\n      });\n      menu.push({\n        text: intl.formatMessage(messages.redraft),\n        action: this.handleRedraftClick\n      });\n    } else {\n      menu.push({\n        text: intl.formatMessage(messages.mention, {\n          name: account.get('username')\n        }),\n        action: this.handleMentionClick\n      });\n      menu.push({\n        text: intl.formatMessage(messages.direct, {\n          name: account.get('username')\n        }),\n        action: this.handleDirectClick\n      });\n      menu.push(null);\n\n      if (relationship && relationship.get('muting')) {\n        menu.push({\n          text: intl.formatMessage(messages.unmute, {\n            name: account.get('username')\n          }),\n          action: this.handleMuteClick\n        });\n      } else {\n        menu.push({\n          text: intl.formatMessage(messages.mute, {\n            name: account.get('username')\n          }),\n          action: this.handleMuteClick\n        });\n      }\n\n      if (relationship && relationship.get('blocking')) {\n        menu.push({\n          text: intl.formatMessage(messages.unblock, {\n            name: account.get('username')\n          }),\n          action: this.handleBlockClick\n        });\n      } else {\n        menu.push({\n          text: intl.formatMessage(messages.block, {\n            name: account.get('username')\n          }),\n          action: this.handleBlockClick\n        });\n      }\n\n      menu.push({\n        text: intl.formatMessage(messages.report, {\n          name: account.get('username')\n        }),\n        action: this.handleReport\n      });\n\n      if (account.get('acct') !== account.get('username')) {\n        var domain = account.get('acct').split('@')[1];\n        menu.push(null);\n\n        if (relationship && relationship.get('domain_blocking')) {\n          menu.push({\n            text: intl.formatMessage(messages.unblockDomain, {\n              domain\n            }),\n            action: this.handleUnblockDomain\n          });\n        } else {\n          menu.push({\n            text: intl.formatMessage(messages.blockDomain, {\n              domain\n            }),\n            action: this.handleBlockDomain\n          });\n        }\n      }\n\n      if (isStaff) {\n        menu.push(null);\n        menu.push({\n          text: intl.formatMessage(messages.admin_account, {\n            name: account.get('username')\n          }),\n          href: \"/admin/accounts/\" + status.getIn(['account', 'id'])\n        });\n        menu.push({\n          text: intl.formatMessage(messages.admin_status),\n          href: \"/admin/accounts/\" + status.getIn(['account', 'id']) + \"/statuses/\" + status.get('id')\n        });\n      }\n    }\n\n    var replyIcon;\n    var replyTitle;\n\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n      replyTitle = intl.formatMessage(messages.reply);\n    } else {\n      replyIcon = 'reply-all';\n      replyTitle = intl.formatMessage(messages.replyAll);\n    }\n\n    var reblogPrivate = status.getIn(['account', 'id']) === me && status.get('visibility') === 'private';\n    var reblogTitle = '';\n\n    if (status.get('reblogged')) {\n      reblogTitle = intl.formatMessage(messages.cancel_reblog_private);\n    } else if (publicStatus) {\n      reblogTitle = intl.formatMessage(messages.reblog);\n    } else if (reblogPrivate) {\n      reblogTitle = intl.formatMessage(messages.reblog_private);\n    } else {\n      reblogTitle = intl.formatMessage(messages.cannot_reblog);\n    }\n\n    var shareButton = 'share' in navigator && publicStatus && /*#__PURE__*/React.createElement(IconButton, {\n      className: \"status__action-bar-button\",\n      title: intl.formatMessage(messages.share),\n      icon: \"share-alt\",\n      onClick: this.handleShareClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 7\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status__action-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      className: \"status__action-bar-button\",\n      title: replyTitle,\n      icon: status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon,\n      onClick: this.handleReplyClick,\n      counter: status.get('replies_count'),\n      obfuscateCount: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(IconButton, {\n      className: classNames('status__action-bar-button', {\n        reblogPrivate\n      }),\n      disabled: !publicStatus && !reblogPrivate,\n      active: status.get('reblogged'),\n      pressed: status.get('reblogged'),\n      title: reblogTitle,\n      icon: \"retweet\",\n      onClick: this.handleReblogClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(IconButton, {\n      className: \"status__action-bar-button star-icon\",\n      animate: true,\n      active: status.get('favourited'),\n      pressed: status.get('favourited'),\n      title: intl.formatMessage(messages.favourite),\n      icon: \"star\",\n      onClick: this.handleFavouriteClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }\n    }), shareButton, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status__action-bar-dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DropdownMenuContainer, {\n      scrollKey: scrollKey,\n      disabled: anonymousAccess,\n      status: status,\n      items: menu,\n      icon: \"ellipsis-h\",\n      size: 18,\n      direction: \"right\",\n      title: intl.formatMessage(messages.more),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return StatusActionBar;\n}(ImmutablePureComponent), _class2.contextTypes = {\n  router: PropTypes.object\n}, _class2.propTypes = {\n  status: ImmutablePropTypes.map.isRequired,\n  relationship: ImmutablePropTypes.map,\n  onReply: PropTypes.func,\n  onFavourite: PropTypes.func,\n  onReblog: PropTypes.func,\n  onDelete: PropTypes.func,\n  onDirect: PropTypes.func,\n  onMention: PropTypes.func,\n  onMute: PropTypes.func,\n  onUnmute: PropTypes.func,\n  onBlock: PropTypes.func,\n  onUnblock: PropTypes.func,\n  onBlockDomain: PropTypes.func,\n  onUnblockDomain: PropTypes.func,\n  onReport: PropTypes.func,\n  onEmbed: PropTypes.func,\n  onMuteConversation: PropTypes.func,\n  onPin: PropTypes.func,\n  onBookmark: PropTypes.func,\n  withDismiss: PropTypes.bool,\n  scrollKey: PropTypes.string,\n  intl: PropTypes.object.isRequired\n}, _temp)) || _class) || _class);\nexport { StatusActionBar as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/components/status_action_bar.js"],"names":["React","ImmutablePropTypes","connect","PropTypes","IconButton","DropdownMenuContainer","defineMessages","injectIntl","ImmutablePureComponent","me","isStaff","classNames","messages","delete","redraft","direct","mention","mute","block","reply","share","more","replyAll","reblog","reblog_private","cancel_reblog_private","cannot_reblog","favourite","bookmark","removeBookmark","open","report","muteConversation","unmuteConversation","pin","unpin","embed","admin_account","admin_status","copy","blockDomain","unblockDomain","unmute","unblock","mapStateToProps","state","status","relationship","getIn","StatusActionBar","updateOnProps","handleReplyClick","props","onReply","context","router","history","_openInteractionDialog","handleShareClick","navigator","text","get","url","catch","e","name","console","error","handleFavouriteClick","onFavourite","handleReblogClick","onReblog","type","window","handleBookmarkClick","onBookmark","handleDeleteClick","onDelete","handleRedraftClick","handlePinClick","onPin","handleMentionClick","onMention","handleDirectClick","onDirect","handleMuteClick","onMute","onUnmute","account","handleBlockClick","onBlock","onUnblock","handleBlockDomain","onBlockDomain","split","handleUnblockDomain","onUnblockDomain","handleOpen","push","handleEmbed","onEmbed","handleReport","onReport","handleConversationMuteClick","onMuteConversation","handleCopy","textarea","document","createElement","textContent","style","position","body","appendChild","select","execCommand","removeChild","render","intl","withDismiss","scrollKey","anonymousAccess","publicStatus","includes","mutingConversation","writtenByMe","menu","formatMessage","action","domain","href","replyIcon","replyTitle","reblogPrivate","reblogTitle","shareButton","contextTypes","object","propTypes","map","isRequired","func","bool","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport IconButton from './icon_button';\nimport DropdownMenuContainer from '../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me, isStaff } from '../initial_state';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  delete: { id: 'status.delete', defaultMessage: 'Delete' },\n  redraft: { id: 'status.redraft', defaultMessage: 'Delete & re-draft' },\n  direct: { id: 'status.direct', defaultMessage: 'Direct message @{name}' },\n  mention: { id: 'status.mention', defaultMessage: 'Mention @{name}' },\n  mute: { id: 'account.mute', defaultMessage: 'Mute @{name}' },\n  block: { id: 'account.block', defaultMessage: 'Block @{name}' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  share: { id: 'status.share', defaultMessage: 'Share' },\n  more: { id: 'status.more', defaultMessage: 'More' },\n  replyAll: { id: 'status.replyAll', defaultMessage: 'Reply to thread' },\n  reblog: { id: 'status.reblog', defaultMessage: 'Boost' },\n  reblog_private: { id: 'status.reblog_private', defaultMessage: 'Boost with original visibility' },\n  cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Unboost' },\n  cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be boosted' },\n  favourite: { id: 'status.favourite', defaultMessage: 'Favourite' },\n  bookmark: { id: 'status.bookmark', defaultMessage: 'Bookmark' },\n  removeBookmark: { id: 'status.remove_bookmark', defaultMessage: 'Remove bookmark' },\n  open: { id: 'status.open', defaultMessage: 'Expand this status' },\n  report: { id: 'status.report', defaultMessage: 'Report @{name}' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  pin: { id: 'status.pin', defaultMessage: 'Pin on profile' },\n  unpin: { id: 'status.unpin', defaultMessage: 'Unpin from profile' },\n  embed: { id: 'status.embed', defaultMessage: 'Embed' },\n  admin_account: { id: 'status.admin_account', defaultMessage: 'Open moderation interface for @{name}' },\n  admin_status: { id: 'status.admin_status', defaultMessage: 'Open this status in the moderation interface' },\n  copy: { id: 'status.copy', defaultMessage: 'Copy link to status' },\n  blockDomain: { id: 'account.block_domain', defaultMessage: 'Block domain {domain}' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n});\n\nconst mapStateToProps = (state, { status }) => ({\n  relationship: state.getIn(['relationships', status.getIn(['account', 'id'])]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass StatusActionBar extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    relationship: ImmutablePropTypes.map,\n    onReply: PropTypes.func,\n    onFavourite: PropTypes.func,\n    onReblog: PropTypes.func,\n    onDelete: PropTypes.func,\n    onDirect: PropTypes.func,\n    onMention: PropTypes.func,\n    onMute: PropTypes.func,\n    onUnmute: PropTypes.func,\n    onBlock: PropTypes.func,\n    onUnblock: PropTypes.func,\n    onBlockDomain: PropTypes.func,\n    onUnblockDomain: PropTypes.func,\n    onReport: PropTypes.func,\n    onEmbed: PropTypes.func,\n    onMuteConversation: PropTypes.func,\n    onPin: PropTypes.func,\n    onBookmark: PropTypes.func,\n    withDismiss: PropTypes.bool,\n    scrollKey: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n  };\n\n  // Avoid checking props that are functions (and whose equality will always\n  // evaluate to false. See react-immutable-pure-component for usage.\n  updateOnProps = [\n    'status',\n    'relationship',\n    'withDismiss',\n  ]\n\n  handleReplyClick = () => {\n    if (me) {\n      this.props.onReply(this.props.status, this.context.router.history);\n    } else {\n      this._openInteractionDialog('reply');\n    }\n  }\n\n  handleShareClick = () => {\n    navigator.share({\n      text: this.props.status.get('search_index'),\n      url: this.props.status.get('url'),\n    }).catch((e) => {\n      if (e.name !== 'AbortError') console.error(e);\n    });\n  }\n\n  handleFavouriteClick = () => {\n    if (me) {\n      this.props.onFavourite(this.props.status);\n    } else {\n      this._openInteractionDialog('favourite');\n    }\n  }\n\n  handleReblogClick = e => {\n    if (me) {\n      this.props.onReblog(this.props.status, e);\n    } else {\n      this._openInteractionDialog('reblog');\n    }\n  }\n\n  _openInteractionDialog = type => {\n    window.open(`/interact/${this.props.status.get('id')}?type=${type}`, 'mastodon-intent', 'width=445,height=600,resizable=no,menubar=no,status=no,scrollbars=yes');\n  }\n\n  handleBookmarkClick = () => {\n    this.props.onBookmark(this.props.status);\n  }\n\n  handleDeleteClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history);\n  }\n\n  handleRedraftClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history, true);\n  }\n\n  handlePinClick = () => {\n    this.props.onPin(this.props.status);\n  }\n\n  handleMentionClick = () => {\n    this.props.onMention(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleDirectClick = () => {\n    this.props.onDirect(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMuteClick = () => {\n    const { status, relationship, onMute, onUnmute } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('muting')) {\n      onUnmute(account);\n    } else {\n      onMute(account);\n    }\n  }\n\n  handleBlockClick = () => {\n    const { status, relationship, onBlock, onUnblock } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('blocking')) {\n      onUnblock(account);\n    } else {\n      onBlock(status);\n    }\n  }\n\n  handleBlockDomain = () => {\n    const { status, onBlockDomain } = this.props;\n    const account = status.get('account');\n\n    onBlockDomain(account.get('acct').split('@')[1]);\n  }\n\n  handleUnblockDomain = () => {\n    const { status, onUnblockDomain } = this.props;\n    const account = status.get('account');\n\n    onUnblockDomain(account.get('acct').split('@')[1]);\n  }\n\n  handleOpen = () => {\n    this.context.router.history.push(`/statuses/${this.props.status.get('id')}`);\n  }\n\n  handleEmbed = () => {\n    this.props.onEmbed(this.props.status);\n  }\n\n  handleReport = () => {\n    this.props.onReport(this.props.status);\n  }\n\n  handleConversationMuteClick = () => {\n    this.props.onMuteConversation(this.props.status);\n  }\n\n  handleCopy = () => {\n    const url      = this.props.status.get('url');\n    const textarea = document.createElement('textarea');\n\n    textarea.textContent    = url;\n    textarea.style.position = 'fixed';\n\n    document.body.appendChild(textarea);\n\n    try {\n      textarea.select();\n      document.execCommand('copy');\n    } catch (e) {\n\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  render () {\n    const { status, relationship, intl, withDismiss, scrollKey } = this.props;\n\n    const anonymousAccess    = !me;\n    const publicStatus       = ['public', 'unlisted'].includes(status.get('visibility'));\n    const mutingConversation = status.get('muted');\n    const account            = status.get('account');\n    const writtenByMe        = status.getIn(['account', 'id']) === me;\n\n    let menu = [];\n\n    menu.push({ text: intl.formatMessage(messages.open), action: this.handleOpen });\n\n    if (publicStatus) {\n      menu.push({ text: intl.formatMessage(messages.copy), action: this.handleCopy });\n      menu.push({ text: intl.formatMessage(messages.embed), action: this.handleEmbed });\n    }\n\n    menu.push(null);\n\n    menu.push({ text: intl.formatMessage(status.get('bookmarked') ? messages.removeBookmark : messages.bookmark), action: this.handleBookmarkClick });\n\n    if (writtenByMe && publicStatus) {\n      menu.push({ text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin), action: this.handlePinClick });\n    }\n\n    menu.push(null);\n\n    if (writtenByMe || withDismiss) {\n      menu.push({ text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMuteClick });\n      menu.push(null);\n    }\n\n    if (writtenByMe) {\n      menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDeleteClick });\n      menu.push({ text: intl.formatMessage(messages.redraft), action: this.handleRedraftClick });\n    } else {\n      menu.push({ text: intl.formatMessage(messages.mention, { name: account.get('username') }), action: this.handleMentionClick });\n      menu.push({ text: intl.formatMessage(messages.direct, { name: account.get('username') }), action: this.handleDirectClick });\n      menu.push(null);\n\n      if (relationship && relationship.get('muting')) {\n        menu.push({ text: intl.formatMessage(messages.unmute, { name: account.get('username') }), action: this.handleMuteClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.mute, { name: account.get('username') }), action: this.handleMuteClick });\n      }\n\n      if (relationship && relationship.get('blocking')) {\n        menu.push({ text: intl.formatMessage(messages.unblock, { name: account.get('username') }), action: this.handleBlockClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.block, { name: account.get('username') }), action: this.handleBlockClick });\n      }\n\n      menu.push({ text: intl.formatMessage(messages.report, { name: account.get('username') }), action: this.handleReport });\n\n      if (account.get('acct') !== account.get('username')) {\n        const domain = account.get('acct').split('@')[1];\n\n        menu.push(null);\n\n        if (relationship && relationship.get('domain_blocking')) {\n          menu.push({ text: intl.formatMessage(messages.unblockDomain, { domain }), action: this.handleUnblockDomain });\n        } else {\n          menu.push({ text: intl.formatMessage(messages.blockDomain, { domain }), action: this.handleBlockDomain });\n        }\n      }\n\n      if (isStaff) {\n        menu.push(null);\n        menu.push({ text: intl.formatMessage(messages.admin_account, { name: account.get('username') }), href: `/admin/accounts/${status.getIn(['account', 'id'])}` });\n        menu.push({ text: intl.formatMessage(messages.admin_status), href: `/admin/accounts/${status.getIn(['account', 'id'])}/statuses/${status.get('id')}` });\n      }\n    }\n\n    let replyIcon;\n    let replyTitle;\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n      replyTitle = intl.formatMessage(messages.reply);\n    } else {\n      replyIcon = 'reply-all';\n      replyTitle = intl.formatMessage(messages.replyAll);\n    }\n\n    const reblogPrivate = status.getIn(['account', 'id']) === me && status.get('visibility') === 'private';\n\n    let reblogTitle = '';\n    if (status.get('reblogged')) {\n      reblogTitle = intl.formatMessage(messages.cancel_reblog_private);\n    } else if (publicStatus) {\n      reblogTitle = intl.formatMessage(messages.reblog);\n    } else if (reblogPrivate) {\n      reblogTitle = intl.formatMessage(messages.reblog_private);\n    } else {\n      reblogTitle = intl.formatMessage(messages.cannot_reblog);\n    }\n\n    const shareButton = ('share' in navigator) && publicStatus && (\n      <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.share)} icon='share-alt' onClick={this.handleShareClick} />\n    );\n\n    return (\n      <div className='status__action-bar'>\n        <IconButton className='status__action-bar-button' title={replyTitle} icon={status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon} onClick={this.handleReplyClick} counter={status.get('replies_count')} obfuscateCount />\n        <IconButton className={classNames('status__action-bar-button', { reblogPrivate })} disabled={!publicStatus && !reblogPrivate}  active={status.get('reblogged')} pressed={status.get('reblogged')} title={reblogTitle} icon='retweet' onClick={this.handleReblogClick} />\n        <IconButton className='status__action-bar-button star-icon' animate active={status.get('favourited')} pressed={status.get('favourited')} title={intl.formatMessage(messages.favourite)} icon='star' onClick={this.handleFavouriteClick} />\n\n        {shareButton}\n\n        <div className='status__action-bar-dropdown'>\n          <DropdownMenuContainer\n            scrollKey={scrollKey}\n            disabled={anonymousAccess}\n            status={status}\n            items={menu}\n            icon='ellipsis-h'\n            size={18}\n            direction='right'\n            title={intl.formatMessage(messages.more)}\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"status.delete","defaultMessage":"Delete"},{"id":"status.redraft","defaultMessage":"Delete & re-draft"},{"id":"status.direct","defaultMessage":"Direct message @{name}"},{"id":"status.mention","defaultMessage":"Mention @{name}"},{"id":"account.mute","defaultMessage":"Mute @{name}"},{"id":"account.block","defaultMessage":"Block @{name}"},{"id":"status.reply","defaultMessage":"Reply"},{"id":"status.share","defaultMessage":"Share"},{"id":"status.more","defaultMessage":"More"},{"id":"status.replyAll","defaultMessage":"Reply to thread"},{"id":"status.reblog","defaultMessage":"Boost"},{"id":"status.reblog_private","defaultMessage":"Boost with original visibility"},{"id":"status.cancel_reblog_private","defaultMessage":"Unboost"},{"id":"status.cannot_reblog","defaultMessage":"This post cannot be boosted"},{"id":"status.favourite","defaultMessage":"Favourite"},{"id":"status.bookmark","defaultMessage":"Bookmark"},{"id":"status.remove_bookmark","defaultMessage":"Remove bookmark"},{"id":"status.open","defaultMessage":"Expand this status"},{"id":"status.report","defaultMessage":"Report @{name}"},{"id":"status.mute_conversation","defaultMessage":"Mute conversation"},{"id":"status.unmute_conversation","defaultMessage":"Unmute conversation"},{"id":"status.pin","defaultMessage":"Pin on profile"},{"id":"status.unpin","defaultMessage":"Unpin from profile"},{"id":"status.embed","defaultMessage":"Embed"},{"id":"status.admin_account","defaultMessage":"Open moderation interface for @{name}"},{"id":"status.admin_status","defaultMessage":"Open this status in the moderation interface"},{"id":"status.copy","defaultMessage":"Copy link to status"},{"id":"account.block_domain","defaultMessage":"Block domain {domain}"},{"id":"account.unblock_domain","defaultMessage":"Unblock domain {domain}"},{"id":"account.unmute","defaultMessage":"Unmute @{name}"},{"id":"account.unblock","defaultMessage":"Unblock @{name}"}]}},"sourceType":"module"}