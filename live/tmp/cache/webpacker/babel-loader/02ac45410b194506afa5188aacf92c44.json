{"ast":null,"code":"import { ACCOUNT_FOLLOW_SUCCESS, ACCOUNT_FOLLOW_REQUEST, ACCOUNT_FOLLOW_FAIL, ACCOUNT_UNFOLLOW_SUCCESS, ACCOUNT_UNFOLLOW_REQUEST, ACCOUNT_UNFOLLOW_FAIL, ACCOUNT_BLOCK_SUCCESS, ACCOUNT_UNBLOCK_SUCCESS, ACCOUNT_MUTE_SUCCESS, ACCOUNT_UNMUTE_SUCCESS, ACCOUNT_PIN_SUCCESS, ACCOUNT_UNPIN_SUCCESS, RELATIONSHIPS_FETCH_SUCCESS } from '../actions/accounts';\nimport { DOMAIN_BLOCK_SUCCESS, DOMAIN_UNBLOCK_SUCCESS } from '../actions/domain_blocks';\nimport { ACCOUNT_NOTE_SUBMIT_SUCCESS } from '../actions/account_notes';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nvar normalizeRelationship = function normalizeRelationship(state, relationship) {\n  return state.set(relationship.id, fromJS(relationship));\n};\n\nvar normalizeRelationships = function normalizeRelationships(state, relationships) {\n  relationships.forEach(function (relationship) {\n    state = normalizeRelationship(state, relationship);\n  });\n  return state;\n};\n\nvar setDomainBlocking = function setDomainBlocking(state, accounts, blocking) {\n  return state.withMutations(function (map) {\n    accounts.forEach(function (id) {\n      map.setIn([id, 'domain_blocking'], blocking);\n    });\n  });\n};\n\nvar initialState = ImmutableMap();\nexport default function relationships(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case ACCOUNT_FOLLOW_REQUEST:\n      return state.getIn([action.id, 'following']) ? state : state.setIn([action.id, action.locked ? 'requested' : 'following'], true);\n\n    case ACCOUNT_FOLLOW_FAIL:\n      return state.setIn([action.id, action.locked ? 'requested' : 'following'], false);\n\n    case ACCOUNT_UNFOLLOW_REQUEST:\n      return state.setIn([action.id, 'following'], false);\n\n    case ACCOUNT_UNFOLLOW_FAIL:\n      return state.setIn([action.id, 'following'], true);\n\n    case ACCOUNT_FOLLOW_SUCCESS:\n    case ACCOUNT_UNFOLLOW_SUCCESS:\n    case ACCOUNT_BLOCK_SUCCESS:\n    case ACCOUNT_UNBLOCK_SUCCESS:\n    case ACCOUNT_MUTE_SUCCESS:\n    case ACCOUNT_UNMUTE_SUCCESS:\n    case ACCOUNT_PIN_SUCCESS:\n    case ACCOUNT_UNPIN_SUCCESS:\n    case ACCOUNT_NOTE_SUBMIT_SUCCESS:\n      return normalizeRelationship(state, action.relationship);\n\n    case RELATIONSHIPS_FETCH_SUCCESS:\n      return normalizeRelationships(state, action.relationships);\n\n    case DOMAIN_BLOCK_SUCCESS:\n      return setDomainBlocking(state, action.accounts, true);\n\n    case DOMAIN_UNBLOCK_SUCCESS:\n      return setDomainBlocking(state, action.accounts, false);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/relationships.js"],"names":["ACCOUNT_FOLLOW_SUCCESS","ACCOUNT_FOLLOW_REQUEST","ACCOUNT_FOLLOW_FAIL","ACCOUNT_UNFOLLOW_SUCCESS","ACCOUNT_UNFOLLOW_REQUEST","ACCOUNT_UNFOLLOW_FAIL","ACCOUNT_BLOCK_SUCCESS","ACCOUNT_UNBLOCK_SUCCESS","ACCOUNT_MUTE_SUCCESS","ACCOUNT_UNMUTE_SUCCESS","ACCOUNT_PIN_SUCCESS","ACCOUNT_UNPIN_SUCCESS","RELATIONSHIPS_FETCH_SUCCESS","DOMAIN_BLOCK_SUCCESS","DOMAIN_UNBLOCK_SUCCESS","ACCOUNT_NOTE_SUBMIT_SUCCESS","Map","ImmutableMap","fromJS","normalizeRelationship","state","relationship","set","id","normalizeRelationships","relationships","forEach","setDomainBlocking","accounts","blocking","withMutations","map","setIn","initialState","action","type","getIn","locked"],"mappings":"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","sourcesContent":["import {\n  ACCOUNT_FOLLOW_SUCCESS,\n  ACCOUNT_FOLLOW_REQUEST,\n  ACCOUNT_FOLLOW_FAIL,\n  ACCOUNT_UNFOLLOW_SUCCESS,\n  ACCOUNT_UNFOLLOW_REQUEST,\n  ACCOUNT_UNFOLLOW_FAIL,\n  ACCOUNT_BLOCK_SUCCESS,\n  ACCOUNT_UNBLOCK_SUCCESS,\n  ACCOUNT_MUTE_SUCCESS,\n  ACCOUNT_UNMUTE_SUCCESS,\n  ACCOUNT_PIN_SUCCESS,\n  ACCOUNT_UNPIN_SUCCESS,\n  RELATIONSHIPS_FETCH_SUCCESS,\n} from '../actions/accounts';\nimport {\n  DOMAIN_BLOCK_SUCCESS,\n  DOMAIN_UNBLOCK_SUCCESS,\n} from '../actions/domain_blocks';\nimport {\n  ACCOUNT_NOTE_SUBMIT_SUCCESS,\n} from '../actions/account_notes';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nconst normalizeRelationship = (state, relationship) => state.set(relationship.id, fromJS(relationship));\n\nconst normalizeRelationships = (state, relationships) => {\n  relationships.forEach(relationship => {\n    state = normalizeRelationship(state, relationship);\n  });\n\n  return state;\n};\n\nconst setDomainBlocking = (state, accounts, blocking) => {\n  return state.withMutations(map => {\n    accounts.forEach(id => {\n      map.setIn([id, 'domain_blocking'], blocking);\n    });\n  });\n};\n\nconst initialState = ImmutableMap();\n\nexport default function relationships(state = initialState, action) {\n  switch(action.type) {\n  case ACCOUNT_FOLLOW_REQUEST:\n    return state.getIn([action.id, 'following']) ? state : state.setIn([action.id, action.locked ? 'requested' : 'following'], true);\n  case ACCOUNT_FOLLOW_FAIL:\n    return state.setIn([action.id, action.locked ? 'requested' : 'following'], false);\n  case ACCOUNT_UNFOLLOW_REQUEST:\n    return state.setIn([action.id, 'following'], false);\n  case ACCOUNT_UNFOLLOW_FAIL:\n    return state.setIn([action.id, 'following'], true);\n  case ACCOUNT_FOLLOW_SUCCESS:\n  case ACCOUNT_UNFOLLOW_SUCCESS:\n  case ACCOUNT_BLOCK_SUCCESS:\n  case ACCOUNT_UNBLOCK_SUCCESS:\n  case ACCOUNT_MUTE_SUCCESS:\n  case ACCOUNT_UNMUTE_SUCCESS:\n  case ACCOUNT_PIN_SUCCESS:\n  case ACCOUNT_UNPIN_SUCCESS:\n  case ACCOUNT_NOTE_SUBMIT_SUCCESS:\n    return normalizeRelationship(state, action.relationship);\n  case RELATIONSHIPS_FETCH_SUCCESS:\n    return normalizeRelationships(state, action.relationships);\n  case DOMAIN_BLOCK_SUCCESS:\n    return setDomainBlocking(state, action.accounts, true);\n  case DOMAIN_UNBLOCK_SUCCESS:\n    return setDomainBlocking(state, action.accounts, false);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}