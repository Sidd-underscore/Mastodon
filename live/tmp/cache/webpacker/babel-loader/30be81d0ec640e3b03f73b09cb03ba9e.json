{"ast":null,"code":"import api from '../api';\nimport { fetchRelationships } from './accounts';\nimport { importFetchedAccounts, importFetchedStatuses } from './importer';\nexport var SEARCH_CHANGE = 'SEARCH_CHANGE';\nexport var SEARCH_CLEAR = 'SEARCH_CLEAR';\nexport var SEARCH_SHOW = 'SEARCH_SHOW';\nexport var SEARCH_FETCH_REQUEST = 'SEARCH_FETCH_REQUEST';\nexport var SEARCH_FETCH_SUCCESS = 'SEARCH_FETCH_SUCCESS';\nexport var SEARCH_FETCH_FAIL = 'SEARCH_FETCH_FAIL';\nexport var SEARCH_EXPAND_REQUEST = 'SEARCH_EXPAND_REQUEST';\nexport var SEARCH_EXPAND_SUCCESS = 'SEARCH_EXPAND_SUCCESS';\nexport var SEARCH_EXPAND_FAIL = 'SEARCH_EXPAND_FAIL';\nexport function changeSearch(value) {\n  return {\n    type: SEARCH_CHANGE,\n    value\n  };\n}\n;\nexport function clearSearch() {\n  return {\n    type: SEARCH_CLEAR\n  };\n}\n;\nexport function submitSearch() {\n  return function (dispatch, getState) {\n    var value = getState().getIn(['search', 'value']);\n\n    if (value.length === 0) {\n      dispatch(fetchSearchSuccess({\n        accounts: [],\n        statuses: [],\n        hashtags: []\n      }, ''));\n      return;\n    }\n\n    dispatch(fetchSearchRequest());\n    api(getState).get('/api/v2/search', {\n      params: {\n        q: value,\n        resolve: true,\n        limit: 5\n      }\n    }).then(function (response) {\n      if (response.data.accounts) {\n        dispatch(importFetchedAccounts(response.data.accounts));\n      }\n\n      if (response.data.statuses) {\n        dispatch(importFetchedStatuses(response.data.statuses));\n      }\n\n      dispatch(fetchSearchSuccess(response.data, value));\n      dispatch(fetchRelationships(response.data.accounts.map(function (item) {\n        return item.id;\n      })));\n    }).catch(function (error) {\n      dispatch(fetchSearchFail(error));\n    });\n  };\n}\n;\nexport function fetchSearchRequest() {\n  return {\n    type: SEARCH_FETCH_REQUEST\n  };\n}\n;\nexport function fetchSearchSuccess(results, searchTerm) {\n  return {\n    type: SEARCH_FETCH_SUCCESS,\n    results,\n    searchTerm\n  };\n}\n;\nexport function fetchSearchFail(error) {\n  return {\n    type: SEARCH_FETCH_FAIL,\n    error\n  };\n}\n;\nexport var expandSearch = function expandSearch(type) {\n  return function (dispatch, getState) {\n    var value = getState().getIn(['search', 'value']);\n    var offset = getState().getIn(['search', 'results', type]).size;\n    dispatch(expandSearchRequest());\n    api(getState).get('/api/v2/search', {\n      params: {\n        q: value,\n        type,\n        offset\n      }\n    }).then(function (_ref) {\n      var data = _ref.data;\n\n      if (data.accounts) {\n        dispatch(importFetchedAccounts(data.accounts));\n      }\n\n      if (data.statuses) {\n        dispatch(importFetchedStatuses(data.statuses));\n      }\n\n      dispatch(expandSearchSuccess(data, value, type));\n      dispatch(fetchRelationships(data.accounts.map(function (item) {\n        return item.id;\n      })));\n    }).catch(function (error) {\n      dispatch(expandSearchFail(error));\n    });\n  };\n};\nexport var expandSearchRequest = function expandSearchRequest() {\n  return {\n    type: SEARCH_EXPAND_REQUEST\n  };\n};\nexport var expandSearchSuccess = function expandSearchSuccess(results, searchTerm, searchType) {\n  return {\n    type: SEARCH_EXPAND_SUCCESS,\n    results,\n    searchTerm,\n    searchType\n  };\n};\nexport var expandSearchFail = function expandSearchFail(error) {\n  return {\n    type: SEARCH_EXPAND_FAIL,\n    error\n  };\n};\nexport var showSearch = function showSearch() {\n  return {\n    type: SEARCH_SHOW\n  };\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/search.js"],"names":["api","fetchRelationships","importFetchedAccounts","importFetchedStatuses","SEARCH_CHANGE","SEARCH_CLEAR","SEARCH_SHOW","SEARCH_FETCH_REQUEST","SEARCH_FETCH_SUCCESS","SEARCH_FETCH_FAIL","SEARCH_EXPAND_REQUEST","SEARCH_EXPAND_SUCCESS","SEARCH_EXPAND_FAIL","changeSearch","value","type","clearSearch","submitSearch","dispatch","getState","getIn","length","fetchSearchSuccess","accounts","statuses","hashtags","fetchSearchRequest","get","params","q","resolve","limit","then","response","data","map","item","id","catch","error","fetchSearchFail","results","searchTerm","expandSearch","offset","size","expandSearchRequest","expandSearchSuccess","expandSearchFail","searchType","showSearch"],"mappings":"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","sourcesContent":["import api from '../api';\nimport { fetchRelationships } from './accounts';\nimport { importFetchedAccounts, importFetchedStatuses } from './importer';\n\nexport const SEARCH_CHANGE = 'SEARCH_CHANGE';\nexport const SEARCH_CLEAR  = 'SEARCH_CLEAR';\nexport const SEARCH_SHOW   = 'SEARCH_SHOW';\n\nexport const SEARCH_FETCH_REQUEST = 'SEARCH_FETCH_REQUEST';\nexport const SEARCH_FETCH_SUCCESS = 'SEARCH_FETCH_SUCCESS';\nexport const SEARCH_FETCH_FAIL    = 'SEARCH_FETCH_FAIL';\n\nexport const SEARCH_EXPAND_REQUEST = 'SEARCH_EXPAND_REQUEST';\nexport const SEARCH_EXPAND_SUCCESS = 'SEARCH_EXPAND_SUCCESS';\nexport const SEARCH_EXPAND_FAIL    = 'SEARCH_EXPAND_FAIL';\n\nexport function changeSearch(value) {\n  return {\n    type: SEARCH_CHANGE,\n    value,\n  };\n};\n\nexport function clearSearch() {\n  return {\n    type: SEARCH_CLEAR,\n  };\n};\n\nexport function submitSearch() {\n  return (dispatch, getState) => {\n    const value = getState().getIn(['search', 'value']);\n\n    if (value.length === 0) {\n      dispatch(fetchSearchSuccess({ accounts: [], statuses: [], hashtags: [] }, ''));\n      return;\n    }\n\n    dispatch(fetchSearchRequest());\n\n    api(getState).get('/api/v2/search', {\n      params: {\n        q: value,\n        resolve: true,\n        limit: 5,\n      },\n    }).then(response => {\n      if (response.data.accounts) {\n        dispatch(importFetchedAccounts(response.data.accounts));\n      }\n\n      if (response.data.statuses) {\n        dispatch(importFetchedStatuses(response.data.statuses));\n      }\n\n      dispatch(fetchSearchSuccess(response.data, value));\n      dispatch(fetchRelationships(response.data.accounts.map(item => item.id)));\n    }).catch(error => {\n      dispatch(fetchSearchFail(error));\n    });\n  };\n};\n\nexport function fetchSearchRequest() {\n  return {\n    type: SEARCH_FETCH_REQUEST,\n  };\n};\n\nexport function fetchSearchSuccess(results, searchTerm) {\n  return {\n    type: SEARCH_FETCH_SUCCESS,\n    results,\n    searchTerm,\n  };\n};\n\nexport function fetchSearchFail(error) {\n  return {\n    type: SEARCH_FETCH_FAIL,\n    error,\n  };\n};\n\nexport const expandSearch = type => (dispatch, getState) => {\n  const value  = getState().getIn(['search', 'value']);\n  const offset = getState().getIn(['search', 'results', type]).size;\n\n  dispatch(expandSearchRequest());\n\n  api(getState).get('/api/v2/search', {\n    params: {\n      q: value,\n      type,\n      offset,\n    },\n  }).then(({ data }) => {\n    if (data.accounts) {\n      dispatch(importFetchedAccounts(data.accounts));\n    }\n\n    if (data.statuses) {\n      dispatch(importFetchedStatuses(data.statuses));\n    }\n\n    dispatch(expandSearchSuccess(data, value, type));\n    dispatch(fetchRelationships(data.accounts.map(item => item.id)));\n  }).catch(error => {\n    dispatch(expandSearchFail(error));\n  });\n};\n\nexport const expandSearchRequest = () => ({\n  type: SEARCH_EXPAND_REQUEST,\n});\n\nexport const expandSearchSuccess = (results, searchTerm, searchType) => ({\n  type: SEARCH_EXPAND_SUCCESS,\n  results,\n  searchTerm,\n  searchType,\n});\n\nexport const expandSearchFail = error => ({\n  type: SEARCH_EXPAND_FAIL,\n  error,\n});\n\nexport const showSearch = () => ({\n  type: SEARCH_SHOW,\n});\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}