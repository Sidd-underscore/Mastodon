{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport escapeTextContentForBrowser from 'escape-html';\nimport emojify from '../../features/emoji/emoji';\nimport { unescapeHTML } from '../../utils/html';\nimport { expandSpoilers } from '../../initial_state';\nvar domParser = new DOMParser();\n\nvar makeEmojiMap = function makeEmojiMap(record) {\n  return record.emojis.reduce(function (obj, emoji) {\n    obj[\":\" + emoji.shortcode + \":\"] = emoji;\n    return obj;\n  }, {});\n};\n\nexport function searchTextFromRawStatus(status) {\n  var spoilerText = status.spoiler_text || '';\n  var searchContent = [spoilerText, status.content].concat(status.poll && status.poll.options ? status.poll.options.map(function (option) {\n    return option.title;\n  }) : []).concat(status.media_attachments.map(function (att) {\n    return att.description;\n  })).join('\\n\\n').replace(/<br\\s*\\/?>/g, '\\n').replace(/<\\/p><p>/g, '\\n\\n');\n  return domParser.parseFromString(searchContent, 'text/html').documentElement.textContent;\n}\nexport function normalizeAccount(account) {\n  account = _extends({}, account);\n  var emojiMap = makeEmojiMap(account);\n  var displayName = account.display_name.trim().length === 0 ? account.username : account.display_name;\n  account.display_name_html = emojify(escapeTextContentForBrowser(displayName), emojiMap);\n  account.note_emojified = emojify(account.note, emojiMap);\n  account.note_plain = unescapeHTML(account.note);\n\n  if (account.fields) {\n    account.fields = account.fields.map(function (pair) {\n      return _extends({}, pair, {\n        name_emojified: emojify(escapeTextContentForBrowser(pair.name), emojiMap),\n        value_emojified: emojify(pair.value, emojiMap),\n        value_plain: unescapeHTML(pair.value)\n      });\n    });\n  }\n\n  if (account.moved) {\n    account.moved = account.moved.id;\n  }\n\n  return account;\n}\nexport function normalizeStatus(status, normalOldStatus) {\n  var normalStatus = _extends({}, status);\n\n  normalStatus.account = status.account.id;\n\n  if (status.reblog && status.reblog.id) {\n    normalStatus.reblog = status.reblog.id;\n  }\n\n  if (status.poll && status.poll.id) {\n    normalStatus.poll = status.poll.id;\n  } // Only calculate these values when status first encountered\n  // Otherwise keep the ones already in the reducer\n\n\n  if (normalOldStatus) {\n    normalStatus.search_index = normalOldStatus.get('search_index');\n    normalStatus.contentHtml = normalOldStatus.get('contentHtml');\n    normalStatus.spoilerHtml = normalOldStatus.get('spoilerHtml');\n    normalStatus.spoiler_text = normalOldStatus.get('spoiler_text');\n    normalStatus.hidden = normalOldStatus.get('hidden');\n  } else {\n    // If the status has a CW but no contents, treat the CW as if it were the\n    // status' contents, to avoid having a CW toggle with seemingly no effect.\n    if (normalStatus.spoiler_text && !normalStatus.content) {\n      normalStatus.content = normalStatus.spoiler_text;\n      normalStatus.spoiler_text = '';\n    }\n\n    var spoilerText = normalStatus.spoiler_text || '';\n    var searchContent = [spoilerText, status.content].concat(status.poll && status.poll.options ? status.poll.options.map(function (option) {\n      return option.title;\n    }) : []).join('\\n\\n').replace(/<br\\s*\\/?>/g, '\\n').replace(/<\\/p><p>/g, '\\n\\n');\n    var emojiMap = makeEmojiMap(normalStatus);\n    normalStatus.search_index = domParser.parseFromString(searchContent, 'text/html').documentElement.textContent;\n    normalStatus.contentHtml = emojify(normalStatus.content, emojiMap);\n    normalStatus.spoilerHtml = emojify(escapeTextContentForBrowser(spoilerText), emojiMap);\n    normalStatus.hidden = expandSpoilers ? false : spoilerText.length > 0 || normalStatus.sensitive;\n  }\n\n  return normalStatus;\n}\nexport function normalizePoll(poll) {\n  var normalPoll = _extends({}, poll);\n\n  var emojiMap = makeEmojiMap(normalPoll);\n  normalPoll.options = poll.options.map(function (option, index) {\n    return _extends({}, option, {\n      voted: poll.own_votes && poll.own_votes.includes(index),\n      title_emojified: emojify(escapeTextContentForBrowser(option.title), emojiMap)\n    });\n  });\n  return normalPoll;\n}\nexport function normalizeAnnouncement(announcement) {\n  var normalAnnouncement = _extends({}, announcement);\n\n  var emojiMap = makeEmojiMap(normalAnnouncement);\n  normalAnnouncement.contentHtml = emojify(normalAnnouncement.content, emojiMap);\n  return normalAnnouncement;\n}","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/importer/normalizer.js"],"names":["escapeTextContentForBrowser","emojify","unescapeHTML","expandSpoilers","domParser","DOMParser","makeEmojiMap","record","emojis","reduce","obj","emoji","shortcode","searchTextFromRawStatus","status","spoilerText","spoiler_text","searchContent","content","concat","poll","options","map","option","title","media_attachments","att","description","join","replace","parseFromString","documentElement","textContent","normalizeAccount","account","emojiMap","displayName","display_name","trim","length","username","display_name_html","note_emojified","note","note_plain","fields","pair","name_emojified","name","value_emojified","value","value_plain","moved","id","normalizeStatus","normalOldStatus","normalStatus","reblog","search_index","get","contentHtml","spoilerHtml","hidden","sensitive","normalizePoll","normalPoll","index","voted","own_votes","includes","title_emojified","normalizeAnnouncement","announcement","normalAnnouncement"],"mappings":"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","sourcesContent":["import escapeTextContentForBrowser from 'escape-html';\nimport emojify from '../../features/emoji/emoji';\nimport { unescapeHTML } from '../../utils/html';\nimport { expandSpoilers } from '../../initial_state';\n\nconst domParser = new DOMParser();\n\nconst makeEmojiMap = record => record.emojis.reduce((obj, emoji) => {\n  obj[`:${emoji.shortcode}:`] = emoji;\n  return obj;\n}, {});\n\nexport function searchTextFromRawStatus (status) {\n  const spoilerText   = status.spoiler_text || '';\n  const searchContent = ([spoilerText, status.content].concat((status.poll && status.poll.options) ? status.poll.options.map(option => option.title) : [])).concat(status.media_attachments.map(att => att.description)).join('\\n\\n').replace(/<br\\s*\\/?>/g, '\\n').replace(/<\\/p><p>/g, '\\n\\n');\n  return domParser.parseFromString(searchContent, 'text/html').documentElement.textContent;\n}\n\nexport function normalizeAccount(account) {\n  account = { ...account };\n\n  const emojiMap = makeEmojiMap(account);\n  const displayName = account.display_name.trim().length === 0 ? account.username : account.display_name;\n\n  account.display_name_html = emojify(escapeTextContentForBrowser(displayName), emojiMap);\n  account.note_emojified = emojify(account.note, emojiMap);\n  account.note_plain = unescapeHTML(account.note);\n\n  if (account.fields) {\n    account.fields = account.fields.map(pair => ({\n      ...pair,\n      name_emojified: emojify(escapeTextContentForBrowser(pair.name), emojiMap),\n      value_emojified: emojify(pair.value, emojiMap),\n      value_plain: unescapeHTML(pair.value),\n    }));\n  }\n\n  if (account.moved) {\n    account.moved = account.moved.id;\n  }\n\n  return account;\n}\n\nexport function normalizeStatus(status, normalOldStatus) {\n  const normalStatus   = { ...status };\n  normalStatus.account = status.account.id;\n\n  if (status.reblog && status.reblog.id) {\n    normalStatus.reblog = status.reblog.id;\n  }\n\n  if (status.poll && status.poll.id) {\n    normalStatus.poll = status.poll.id;\n  }\n\n  // Only calculate these values when status first encountered\n  // Otherwise keep the ones already in the reducer\n  if (normalOldStatus) {\n    normalStatus.search_index = normalOldStatus.get('search_index');\n    normalStatus.contentHtml = normalOldStatus.get('contentHtml');\n    normalStatus.spoilerHtml = normalOldStatus.get('spoilerHtml');\n    normalStatus.spoiler_text = normalOldStatus.get('spoiler_text');\n    normalStatus.hidden = normalOldStatus.get('hidden');\n  } else {\n    // If the status has a CW but no contents, treat the CW as if it were the\n    // status' contents, to avoid having a CW toggle with seemingly no effect.\n    if (normalStatus.spoiler_text && !normalStatus.content) {\n      normalStatus.content = normalStatus.spoiler_text;\n      normalStatus.spoiler_text = '';\n    }\n\n    const spoilerText   = normalStatus.spoiler_text || '';\n    const searchContent = ([spoilerText, status.content].concat((status.poll && status.poll.options) ? status.poll.options.map(option => option.title) : [])).join('\\n\\n').replace(/<br\\s*\\/?>/g, '\\n').replace(/<\\/p><p>/g, '\\n\\n');\n    const emojiMap      = makeEmojiMap(normalStatus);\n\n    normalStatus.search_index = domParser.parseFromString(searchContent, 'text/html').documentElement.textContent;\n    normalStatus.contentHtml  = emojify(normalStatus.content, emojiMap);\n    normalStatus.spoilerHtml  = emojify(escapeTextContentForBrowser(spoilerText), emojiMap);\n    normalStatus.hidden       = expandSpoilers ? false : spoilerText.length > 0 || normalStatus.sensitive;\n  }\n\n  return normalStatus;\n}\n\nexport function normalizePoll(poll) {\n  const normalPoll = { ...poll };\n  const emojiMap = makeEmojiMap(normalPoll);\n\n  normalPoll.options = poll.options.map((option, index) => ({\n    ...option,\n    voted: poll.own_votes && poll.own_votes.includes(index),\n    title_emojified: emojify(escapeTextContentForBrowser(option.title), emojiMap),\n  }));\n\n  return normalPoll;\n}\n\nexport function normalizeAnnouncement(announcement) {\n  const normalAnnouncement = { ...announcement };\n  const emojiMap = makeEmojiMap(normalAnnouncement);\n\n  normalAnnouncement.contentHtml = emojify(normalAnnouncement.content, emojiMap);\n\n  return normalAnnouncement;\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}