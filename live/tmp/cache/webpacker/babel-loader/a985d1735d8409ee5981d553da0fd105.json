{"ast":null,"code":"import { SETTING_CHANGE, SETTING_SAVE } from '../actions/settings';\nimport { NOTIFICATIONS_FILTER_SET } from '../actions/notifications';\nimport { COLUMN_ADD, COLUMN_REMOVE, COLUMN_MOVE, COLUMN_PARAMS_CHANGE } from '../actions/columns';\nimport { STORE_HYDRATE } from '../actions/store';\nimport { EMOJI_USE } from '../actions/emojis';\nimport { LIST_DELETE_SUCCESS, LIST_FETCH_FAIL } from '../actions/lists';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\nimport uuid from '../uuid';\nvar initialState = ImmutableMap({\n  saved: true,\n  skinTone: 1,\n  trends: ImmutableMap({\n    show: true\n  }),\n  home: ImmutableMap({\n    shows: ImmutableMap({\n      reblog: true,\n      reply: true\n    }),\n    regex: ImmutableMap({\n      body: ''\n    })\n  }),\n  notifications: ImmutableMap({\n    alerts: ImmutableMap({\n      follow: false,\n      follow_request: false,\n      favourite: false,\n      reblog: false,\n      mention: false,\n      poll: false,\n      status: false\n    }),\n    quickFilter: ImmutableMap({\n      active: 'all',\n      show: true,\n      advanced: false\n    }),\n    dismissPermissionBanner: false,\n    showUnread: true,\n    shows: ImmutableMap({\n      follow: true,\n      follow_request: false,\n      favourite: true,\n      reblog: true,\n      mention: true,\n      poll: true,\n      status: true\n    }),\n    sounds: ImmutableMap({\n      follow: true,\n      follow_request: false,\n      favourite: true,\n      reblog: true,\n      mention: true,\n      poll: true,\n      status: true\n    })\n  }),\n  community: ImmutableMap({\n    regex: ImmutableMap({\n      body: ''\n    })\n  }),\n  public: ImmutableMap({\n    regex: ImmutableMap({\n      body: ''\n    })\n  }),\n  direct: ImmutableMap({\n    regex: ImmutableMap({\n      body: ''\n    })\n  })\n});\nvar defaultColumns = fromJS([{\n  id: 'COMPOSE',\n  uuid: uuid(),\n  params: {}\n}, {\n  id: 'HOME',\n  uuid: uuid(),\n  params: {}\n}, {\n  id: 'NOTIFICATIONS',\n  uuid: uuid(),\n  params: {}\n}]);\n\nvar hydrate = function hydrate(state, settings) {\n  return state.mergeDeep(settings).update('columns', function (val) {\n    if (val === void 0) {\n      val = defaultColumns;\n    }\n\n    return val;\n  });\n};\n\nvar moveColumn = function moveColumn(state, uuid, direction) {\n  var columns = state.get('columns');\n  var index = columns.findIndex(function (item) {\n    return item.get('uuid') === uuid;\n  });\n  var newIndex = index + direction;\n  var newColumns;\n  newColumns = columns.splice(index, 1);\n  newColumns = newColumns.splice(newIndex, 0, columns.get(index));\n  return state.set('columns', newColumns).set('saved', false);\n};\n\nvar changeColumnParams = function changeColumnParams(state, uuid, path, value) {\n  var columns = state.get('columns');\n  var index = columns.findIndex(function (item) {\n    return item.get('uuid') === uuid;\n  });\n  var newColumns = columns.update(index, function (column) {\n    return column.updateIn(['params'].concat(path), function () {\n      return value;\n    });\n  });\n  return state.set('columns', newColumns).set('saved', false);\n};\n\nvar updateFrequentEmojis = function updateFrequentEmojis(state, emoji) {\n  return state.update('frequentlyUsedEmojis', ImmutableMap(), function (map) {\n    return map.update(emoji.id, 0, function (count) {\n      return count + 1;\n    });\n  }).set('saved', false);\n};\n\nvar filterDeadListColumns = function filterDeadListColumns(state, listId) {\n  return state.update('columns', function (columns) {\n    return columns.filterNot(function (column) {\n      return column.get('id') === 'LIST' && column.get('params').get('id') === listId;\n    });\n  });\n};\n\nexport default function settings(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case STORE_HYDRATE:\n      return hydrate(state, action.state.get('settings'));\n\n    case NOTIFICATIONS_FILTER_SET:\n    case SETTING_CHANGE:\n      return state.setIn(action.path, action.value).set('saved', false);\n\n    case COLUMN_ADD:\n      return state.update('columns', function (list) {\n        return list.push(fromJS({\n          id: action.id,\n          uuid: uuid(),\n          params: action.params\n        }));\n      }).set('saved', false);\n\n    case COLUMN_REMOVE:\n      return state.update('columns', function (list) {\n        return list.filterNot(function (item) {\n          return item.get('uuid') === action.uuid;\n        });\n      }).set('saved', false);\n\n    case COLUMN_MOVE:\n      return moveColumn(state, action.uuid, action.direction);\n\n    case COLUMN_PARAMS_CHANGE:\n      return changeColumnParams(state, action.uuid, action.path, action.value);\n\n    case EMOJI_USE:\n      return updateFrequentEmojis(state, action.emoji);\n\n    case SETTING_SAVE:\n      return state.set('saved', true);\n\n    case LIST_FETCH_FAIL:\n      return action.error.response.status === 404 ? filterDeadListColumns(state, action.id) : state;\n\n    case LIST_DELETE_SUCCESS:\n      return filterDeadListColumns(state, action.id);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/settings.js"],"names":["SETTING_CHANGE","SETTING_SAVE","NOTIFICATIONS_FILTER_SET","COLUMN_ADD","COLUMN_REMOVE","COLUMN_MOVE","COLUMN_PARAMS_CHANGE","STORE_HYDRATE","EMOJI_USE","LIST_DELETE_SUCCESS","LIST_FETCH_FAIL","Map","ImmutableMap","fromJS","uuid","initialState","saved","skinTone","trends","show","home","shows","reblog","reply","regex","body","notifications","alerts","follow","follow_request","favourite","mention","poll","status","quickFilter","active","advanced","dismissPermissionBanner","showUnread","sounds","community","public","direct","defaultColumns","id","params","hydrate","state","settings","mergeDeep","update","val","moveColumn","direction","columns","get","index","findIndex","item","newIndex","newColumns","splice","set","changeColumnParams","path","value","column","updateIn","updateFrequentEmojis","emoji","map","count","filterDeadListColumns","listId","filterNot","action","type","setIn","list","push","error","response"],"mappings":"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","sourcesContent":["import { SETTING_CHANGE, SETTING_SAVE } from '../actions/settings';\nimport { NOTIFICATIONS_FILTER_SET } from '../actions/notifications';\nimport { COLUMN_ADD, COLUMN_REMOVE, COLUMN_MOVE, COLUMN_PARAMS_CHANGE } from '../actions/columns';\nimport { STORE_HYDRATE } from '../actions/store';\nimport { EMOJI_USE } from '../actions/emojis';\nimport { LIST_DELETE_SUCCESS, LIST_FETCH_FAIL } from '../actions/lists';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\nimport uuid from '../uuid';\n\nconst initialState = ImmutableMap({\n  saved: true,\n\n  skinTone: 1,\n\n  trends: ImmutableMap({\n    show: true,\n  }),\n\n  home: ImmutableMap({\n    shows: ImmutableMap({\n      reblog: true,\n      reply: true,\n    }),\n\n    regex: ImmutableMap({\n      body: '',\n    }),\n  }),\n\n  notifications: ImmutableMap({\n    alerts: ImmutableMap({\n      follow: false,\n      follow_request: false,\n      favourite: false,\n      reblog: false,\n      mention: false,\n      poll: false,\n      status: false,\n    }),\n\n    quickFilter: ImmutableMap({\n      active: 'all',\n      show: true,\n      advanced: false,\n    }),\n\n    dismissPermissionBanner: false,\n    showUnread: true,\n\n    shows: ImmutableMap({\n      follow: true,\n      follow_request: false,\n      favourite: true,\n      reblog: true,\n      mention: true,\n      poll: true,\n      status: true,\n    }),\n\n    sounds: ImmutableMap({\n      follow: true,\n      follow_request: false,\n      favourite: true,\n      reblog: true,\n      mention: true,\n      poll: true,\n      status: true,\n    }),\n  }),\n\n  community: ImmutableMap({\n    regex: ImmutableMap({\n      body: '',\n    }),\n  }),\n\n  public: ImmutableMap({\n    regex: ImmutableMap({\n      body: '',\n    }),\n  }),\n\n  direct: ImmutableMap({\n    regex: ImmutableMap({\n      body: '',\n    }),\n  }),\n});\n\nconst defaultColumns = fromJS([\n  { id: 'COMPOSE', uuid: uuid(), params: {} },\n  { id: 'HOME', uuid: uuid(), params: {} },\n  { id: 'NOTIFICATIONS', uuid: uuid(), params: {} },\n]);\n\nconst hydrate = (state, settings) => state.mergeDeep(settings).update('columns', (val = defaultColumns) => val);\n\nconst moveColumn = (state, uuid, direction) => {\n  const columns  = state.get('columns');\n  const index    = columns.findIndex(item => item.get('uuid') === uuid);\n  const newIndex = index + direction;\n\n  let newColumns;\n\n  newColumns = columns.splice(index, 1);\n  newColumns = newColumns.splice(newIndex, 0, columns.get(index));\n\n  return state\n    .set('columns', newColumns)\n    .set('saved', false);\n};\n\nconst changeColumnParams = (state, uuid, path, value) => {\n  const columns = state.get('columns');\n  const index   = columns.findIndex(item => item.get('uuid') === uuid);\n\n  const newColumns = columns.update(index, column => column.updateIn(['params', ...path], () => value));\n\n  return state\n    .set('columns', newColumns)\n    .set('saved', false);\n};\n\nconst updateFrequentEmojis = (state, emoji) => state.update('frequentlyUsedEmojis', ImmutableMap(), map => map.update(emoji.id, 0, count => count + 1)).set('saved', false);\n\nconst filterDeadListColumns = (state, listId) => state.update('columns', columns => columns.filterNot(column => column.get('id') === 'LIST' && column.get('params').get('id') === listId));\n\nexport default function settings(state = initialState, action) {\n  switch(action.type) {\n  case STORE_HYDRATE:\n    return hydrate(state, action.state.get('settings'));\n  case NOTIFICATIONS_FILTER_SET:\n  case SETTING_CHANGE:\n    return state\n      .setIn(action.path, action.value)\n      .set('saved', false);\n  case COLUMN_ADD:\n    return state\n      .update('columns', list => list.push(fromJS({ id: action.id, uuid: uuid(), params: action.params })))\n      .set('saved', false);\n  case COLUMN_REMOVE:\n    return state\n      .update('columns', list => list.filterNot(item => item.get('uuid') === action.uuid))\n      .set('saved', false);\n  case COLUMN_MOVE:\n    return moveColumn(state, action.uuid, action.direction);\n  case COLUMN_PARAMS_CHANGE:\n    return changeColumnParams(state, action.uuid, action.path, action.value);\n  case EMOJI_USE:\n    return updateFrequentEmojis(state, action.emoji);\n  case SETTING_SAVE:\n    return state.set('saved', true);\n  case LIST_FETCH_FAIL:\n    return action.error.response.status === 404 ? filterDeadListColumns(state, action.id) : state;\n  case LIST_DELETE_SUCCESS:\n    return filterDeadListColumns(state, action.id);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}