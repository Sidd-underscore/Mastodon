{"ast":null,"code":"import { normalizeAccount, normalizeStatus, normalizePoll } from './normalizer';\nexport var ACCOUNT_IMPORT = 'ACCOUNT_IMPORT';\nexport var ACCOUNTS_IMPORT = 'ACCOUNTS_IMPORT';\nexport var STATUS_IMPORT = 'STATUS_IMPORT';\nexport var STATUSES_IMPORT = 'STATUSES_IMPORT';\nexport var POLLS_IMPORT = 'POLLS_IMPORT';\n\nfunction pushUnique(array, object) {\n  if (array.every(function (element) {\n    return element.id !== object.id;\n  })) {\n    array.push(object);\n  }\n}\n\nexport function importAccount(account) {\n  return {\n    type: ACCOUNT_IMPORT,\n    account\n  };\n}\nexport function importAccounts(accounts) {\n  return {\n    type: ACCOUNTS_IMPORT,\n    accounts\n  };\n}\nexport function importStatus(status) {\n  return {\n    type: STATUS_IMPORT,\n    status\n  };\n}\nexport function importStatuses(statuses) {\n  return {\n    type: STATUSES_IMPORT,\n    statuses\n  };\n}\nexport function importPolls(polls) {\n  return {\n    type: POLLS_IMPORT,\n    polls\n  };\n}\nexport function importFetchedAccount(account) {\n  return importFetchedAccounts([account]);\n}\nexport function importFetchedAccounts(accounts) {\n  var normalAccounts = [];\n\n  function processAccount(account) {\n    pushUnique(normalAccounts, normalizeAccount(account));\n\n    if (account.moved) {\n      processAccount(account.moved);\n    }\n  }\n\n  accounts.forEach(processAccount);\n  return importAccounts(normalAccounts);\n}\nexport function importFetchedStatus(status) {\n  return importFetchedStatuses([status]);\n}\nexport function importFetchedStatuses(statuses) {\n  return function (dispatch, getState) {\n    var accounts = [];\n    var normalStatuses = [];\n    var polls = [];\n\n    function processStatus(status) {\n      pushUnique(normalStatuses, normalizeStatus(status, getState().getIn(['statuses', status.id])));\n      pushUnique(accounts, status.account);\n\n      if (status.reblog && status.reblog.id) {\n        processStatus(status.reblog);\n      }\n\n      if (status.poll && status.poll.id) {\n        pushUnique(polls, normalizePoll(status.poll));\n      }\n    }\n\n    statuses.forEach(processStatus);\n    dispatch(importPolls(polls));\n    dispatch(importFetchedAccounts(accounts));\n    dispatch(importStatuses(normalStatuses));\n  };\n}\nexport function importFetchedPoll(poll) {\n  return function (dispatch) {\n    dispatch(importPolls([normalizePoll(poll)]));\n  };\n}","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/importer/index.js"],"names":["normalizeAccount","normalizeStatus","normalizePoll","ACCOUNT_IMPORT","ACCOUNTS_IMPORT","STATUS_IMPORT","STATUSES_IMPORT","POLLS_IMPORT","pushUnique","array","object","every","element","id","push","importAccount","account","type","importAccounts","accounts","importStatus","status","importStatuses","statuses","importPolls","polls","importFetchedAccount","importFetchedAccounts","normalAccounts","processAccount","moved","forEach","importFetchedStatus","importFetchedStatuses","dispatch","getState","normalStatuses","processStatus","getIn","reblog","poll","importFetchedPoll"],"mappings":"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","sourcesContent":["import { normalizeAccount, normalizeStatus, normalizePoll } from './normalizer';\n\nexport const ACCOUNT_IMPORT  = 'ACCOUNT_IMPORT';\nexport const ACCOUNTS_IMPORT = 'ACCOUNTS_IMPORT';\nexport const STATUS_IMPORT   = 'STATUS_IMPORT';\nexport const STATUSES_IMPORT = 'STATUSES_IMPORT';\nexport const POLLS_IMPORT    = 'POLLS_IMPORT';\n\nfunction pushUnique(array, object) {\n  if (array.every(element => element.id !== object.id)) {\n    array.push(object);\n  }\n}\n\nexport function importAccount(account) {\n  return { type: ACCOUNT_IMPORT, account };\n}\n\nexport function importAccounts(accounts) {\n  return { type: ACCOUNTS_IMPORT, accounts };\n}\n\nexport function importStatus(status) {\n  return { type: STATUS_IMPORT, status };\n}\n\nexport function importStatuses(statuses) {\n  return { type: STATUSES_IMPORT, statuses };\n}\n\nexport function importPolls(polls) {\n  return { type: POLLS_IMPORT, polls };\n}\n\nexport function importFetchedAccount(account) {\n  return importFetchedAccounts([account]);\n}\n\nexport function importFetchedAccounts(accounts) {\n  const normalAccounts = [];\n\n  function processAccount(account) {\n    pushUnique(normalAccounts, normalizeAccount(account));\n\n    if (account.moved) {\n      processAccount(account.moved);\n    }\n  }\n\n  accounts.forEach(processAccount);\n\n  return importAccounts(normalAccounts);\n}\n\nexport function importFetchedStatus(status) {\n  return importFetchedStatuses([status]);\n}\n\nexport function importFetchedStatuses(statuses) {\n  return (dispatch, getState) => {\n    const accounts = [];\n    const normalStatuses = [];\n    const polls = [];\n\n    function processStatus(status) {\n      pushUnique(normalStatuses, normalizeStatus(status, getState().getIn(['statuses', status.id])));\n      pushUnique(accounts, status.account);\n\n      if (status.reblog && status.reblog.id) {\n        processStatus(status.reblog);\n      }\n\n      if (status.poll && status.poll.id) {\n        pushUnique(polls, normalizePoll(status.poll));\n      }\n    }\n\n    statuses.forEach(processStatus);\n\n    dispatch(importPolls(polls));\n    dispatch(importFetchedAccounts(accounts));\n    dispatch(importStatuses(normalStatuses));\n  };\n}\n\nexport function importFetchedPoll(poll) {\n  return dispatch => {\n    dispatch(importPolls([normalizePoll(poll)]));\n  };\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}