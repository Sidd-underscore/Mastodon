{"ast":null,"code":"import 'intl';\nimport 'intl/locale-data/jsonp/en';\nimport 'es6-symbol/implement';\nimport includes from 'array-includes';\nimport assign from 'object-assign';\nimport values from 'object.values';\nimport isNaN from 'is-nan';\nimport { decode as decodeBase64 } from './utils/base64';\nimport promiseFinally from 'promise.prototype.finally';\n\nif (!Array.prototype.includes) {\n  includes.shim();\n}\n\nif (!Object.assign) {\n  Object.assign = assign;\n}\n\nif (!Object.values) {\n  values.shim();\n}\n\nif (!Number.isNaN) {\n  Number.isNaN = isNaN;\n}\n\npromiseFinally.shim();\n\nif (!HTMLCanvasElement.prototype.toBlob) {\n  var BASE64_MARKER = ';base64,';\n  Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n    value(callback, type, quality) {\n      if (type === void 0) {\n        type = 'image/png';\n      }\n\n      var dataURL = this.toDataURL(type, quality);\n      var data;\n\n      if (dataURL.indexOf(BASE64_MARKER) >= 0) {\n        var _dataURL$split = dataURL.split(BASE64_MARKER),\n            base64 = _dataURL$split[1];\n\n        data = decodeBase64(base64);\n      } else {\n        var _dataURL$split2 = dataURL.split(',');\n\n        data = _dataURL$split2[1];\n      }\n\n      callback(new Blob([data], {\n        type\n      }));\n    }\n\n  });\n}","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/base_polyfills.js"],"names":["includes","assign","values","isNaN","decode","decodeBase64","promiseFinally","Array","prototype","shim","Object","Number","HTMLCanvasElement","toBlob","BASE64_MARKER","defineProperty","value","callback","type","quality","dataURL","toDataURL","data","indexOf","split","base64","Blob"],"mappings":"AAAA,OAAO,MAAP;AACA,OAAO,2BAAP;AACA,OAAO,sBAAP;AACA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,QAAlB;AACA,SAASC,MAAM,IAAIC,YAAnB,QAAuC,gBAAvC;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAEA,IAAI,CAACC,KAAK,CAACC,SAAN,CAAgBR,QAArB,EAA+B;AAC7BA,EAAAA,QAAQ,CAACS,IAAT;AACD;;AAED,IAAI,CAACC,MAAM,CAACT,MAAZ,EAAoB;AAClBS,EAAAA,MAAM,CAACT,MAAP,GAAgBA,MAAhB;AACD;;AAED,IAAI,CAACS,MAAM,CAACR,MAAZ,EAAoB;AAClBA,EAAAA,MAAM,CAACO,IAAP;AACD;;AAED,IAAI,CAACE,MAAM,CAACR,KAAZ,EAAmB;AACjBQ,EAAAA,MAAM,CAACR,KAAP,GAAeA,KAAf;AACD;;AAEDG,cAAc,CAACG,IAAf;;AAEA,IAAI,CAACG,iBAAiB,CAACJ,SAAlB,CAA4BK,MAAjC,EAAyC;AACvC,MAAMC,aAAa,GAAG,UAAtB;AAEAJ,EAAAA,MAAM,CAACK,cAAP,CAAsBH,iBAAiB,CAACJ,SAAxC,EAAmD,QAAnD,EAA6D;AAC3DQ,IAAAA,KAAK,CAACC,QAAD,EAAWC,IAAX,EAA+BC,OAA/B,EAAwC;AAAA,UAA7BD,IAA6B;AAA7BA,QAAAA,IAA6B,GAAtB,WAAsB;AAAA;;AAC3C,UAAME,OAAO,GAAG,KAAKC,SAAL,CAAeH,IAAf,EAAqBC,OAArB,CAAhB;AACA,UAAIG,IAAJ;;AAEA,UAAIF,OAAO,CAACG,OAAR,CAAgBT,aAAhB,KAAkC,CAAtC,EAAyC;AACvC,6BAAmBM,OAAO,CAACI,KAAR,CAAcV,aAAd,CAAnB;AAAA,YAASW,MAAT;;AACAH,QAAAA,IAAI,GAAGjB,YAAY,CAACoB,MAAD,CAAnB;AACD,OAHD,MAGO;AAAA,8BACML,OAAO,CAACI,KAAR,CAAc,GAAd,CADN;;AACFF,QAAAA,IADE;AAEN;;AAEDL,MAAAA,QAAQ,CAAC,IAAIS,IAAJ,CAAS,CAACJ,IAAD,CAAT,EAAiB;AAAEJ,QAAAA;AAAF,OAAjB,CAAD,CAAR;AACD;;AAb0D,GAA7D;AAeD","sourcesContent":["import 'intl';\nimport 'intl/locale-data/jsonp/en';\nimport 'es6-symbol/implement';\nimport includes from 'array-includes';\nimport assign from 'object-assign';\nimport values from 'object.values';\nimport isNaN from 'is-nan';\nimport { decode as decodeBase64 } from './utils/base64';\nimport promiseFinally from 'promise.prototype.finally';\n\nif (!Array.prototype.includes) {\n  includes.shim();\n}\n\nif (!Object.assign) {\n  Object.assign = assign;\n}\n\nif (!Object.values) {\n  values.shim();\n}\n\nif (!Number.isNaN) {\n  Number.isNaN = isNaN;\n}\n\npromiseFinally.shim();\n\nif (!HTMLCanvasElement.prototype.toBlob) {\n  const BASE64_MARKER = ';base64,';\n\n  Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n    value(callback, type = 'image/png', quality) {\n      const dataURL = this.toDataURL(type, quality);\n      let data;\n\n      if (dataURL.indexOf(BASE64_MARKER) >= 0) {\n        const [, base64] = dataURL.split(BASE64_MARKER);\n        data = decodeBase64(base64);\n      } else {\n        [, data] = dataURL.split(',');\n      }\n\n      callback(new Blob([data], { type }));\n    },\n  });\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}