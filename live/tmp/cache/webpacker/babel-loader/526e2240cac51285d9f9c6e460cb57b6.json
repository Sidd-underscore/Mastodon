{"ast":null,"code":"import { REBLOG_REQUEST, REBLOG_FAIL, FAVOURITE_REQUEST, FAVOURITE_FAIL, UNFAVOURITE_SUCCESS, BOOKMARK_REQUEST, BOOKMARK_FAIL } from '../actions/interactions';\nimport { STATUS_MUTE_SUCCESS, STATUS_UNMUTE_SUCCESS, STATUS_REVEAL, STATUS_HIDE, STATUS_COLLAPSE } from '../actions/statuses';\nimport { TIMELINE_DELETE } from '../actions/timelines';\nimport { STATUS_IMPORT, STATUSES_IMPORT } from '../actions/importer';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nvar importStatus = function importStatus(state, status) {\n  return state.set(status.id, fromJS(status));\n};\n\nvar importStatuses = function importStatuses(state, statuses) {\n  return state.withMutations(function (mutable) {\n    return statuses.forEach(function (status) {\n      return importStatus(mutable, status);\n    });\n  });\n};\n\nvar deleteStatus = function deleteStatus(state, id, references) {\n  references.forEach(function (ref) {\n    state = deleteStatus(state, ref, []);\n  });\n  return state.delete(id);\n};\n\nvar initialState = ImmutableMap();\nexport default function statuses(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case STATUS_IMPORT:\n      return importStatus(state, action.status);\n\n    case STATUSES_IMPORT:\n      return importStatuses(state, action.statuses);\n\n    case FAVOURITE_REQUEST:\n      return state.setIn([action.status.get('id'), 'favourited'], true);\n\n    case UNFAVOURITE_SUCCESS:\n      return state.updateIn([action.status.get('id'), 'favourites_count'], function (x) {\n        return Math.max(0, x - 1);\n      });\n\n    case FAVOURITE_FAIL:\n      return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'favourited'], false);\n\n    case BOOKMARK_REQUEST:\n      return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'bookmarked'], true);\n\n    case BOOKMARK_FAIL:\n      return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'bookmarked'], false);\n\n    case REBLOG_REQUEST:\n      return state.setIn([action.status.get('id'), 'reblogged'], true);\n\n    case REBLOG_FAIL:\n      return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'reblogged'], false);\n\n    case STATUS_MUTE_SUCCESS:\n      return state.setIn([action.id, 'muted'], true);\n\n    case STATUS_UNMUTE_SUCCESS:\n      return state.setIn([action.id, 'muted'], false);\n\n    case STATUS_REVEAL:\n      return state.withMutations(function (map) {\n        action.ids.forEach(function (id) {\n          if (!(state.get(id) === undefined)) {\n            map.setIn([id, 'hidden'], false);\n          }\n        });\n      });\n\n    case STATUS_HIDE:\n      return state.withMutations(function (map) {\n        action.ids.forEach(function (id) {\n          if (!(state.get(id) === undefined)) {\n            map.setIn([id, 'hidden'], true);\n          }\n        });\n      });\n\n    case STATUS_COLLAPSE:\n      return state.setIn([action.id, 'collapsed'], action.isCollapsed);\n\n    case TIMELINE_DELETE:\n      return deleteStatus(state, action.id, action.references);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/statuses.js"],"names":["REBLOG_REQUEST","REBLOG_FAIL","FAVOURITE_REQUEST","FAVOURITE_FAIL","UNFAVOURITE_SUCCESS","BOOKMARK_REQUEST","BOOKMARK_FAIL","STATUS_MUTE_SUCCESS","STATUS_UNMUTE_SUCCESS","STATUS_REVEAL","STATUS_HIDE","STATUS_COLLAPSE","TIMELINE_DELETE","STATUS_IMPORT","STATUSES_IMPORT","Map","ImmutableMap","fromJS","importStatus","state","status","set","id","importStatuses","statuses","withMutations","mutable","forEach","deleteStatus","references","ref","delete","initialState","action","type","setIn","get","updateIn","x","Math","max","undefined","map","ids","isCollapsed"],"mappings":"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","sourcesContent":["import {\n  REBLOG_REQUEST,\n  REBLOG_FAIL,\n  FAVOURITE_REQUEST,\n  FAVOURITE_FAIL,\n  UNFAVOURITE_SUCCESS,\n  BOOKMARK_REQUEST,\n  BOOKMARK_FAIL,\n} from '../actions/interactions';\nimport {\n  STATUS_MUTE_SUCCESS,\n  STATUS_UNMUTE_SUCCESS,\n  STATUS_REVEAL,\n  STATUS_HIDE,\n  STATUS_COLLAPSE,\n} from '../actions/statuses';\nimport { TIMELINE_DELETE } from '../actions/timelines';\nimport { STATUS_IMPORT, STATUSES_IMPORT } from '../actions/importer';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nconst importStatus = (state, status) => state.set(status.id, fromJS(status));\n\nconst importStatuses = (state, statuses) =>\n  state.withMutations(mutable => statuses.forEach(status => importStatus(mutable, status)));\n\nconst deleteStatus = (state, id, references) => {\n  references.forEach(ref => {\n    state = deleteStatus(state, ref, []);\n  });\n\n  return state.delete(id);\n};\n\nconst initialState = ImmutableMap();\n\nexport default function statuses(state = initialState, action) {\n  switch(action.type) {\n  case STATUS_IMPORT:\n    return importStatus(state, action.status);\n  case STATUSES_IMPORT:\n    return importStatuses(state, action.statuses);\n  case FAVOURITE_REQUEST:\n    return state.setIn([action.status.get('id'), 'favourited'], true);\n  case UNFAVOURITE_SUCCESS:\n    return state.updateIn([action.status.get('id'), 'favourites_count'], x => Math.max(0, x - 1));\n  case FAVOURITE_FAIL:\n    return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'favourited'], false);\n  case BOOKMARK_REQUEST:\n    return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'bookmarked'], true);\n  case BOOKMARK_FAIL:\n    return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'bookmarked'], false);\n  case REBLOG_REQUEST:\n    return state.setIn([action.status.get('id'), 'reblogged'], true);\n  case REBLOG_FAIL:\n    return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'reblogged'], false);\n  case STATUS_MUTE_SUCCESS:\n    return state.setIn([action.id, 'muted'], true);\n  case STATUS_UNMUTE_SUCCESS:\n    return state.setIn([action.id, 'muted'], false);\n  case STATUS_REVEAL:\n    return state.withMutations(map => {\n      action.ids.forEach(id => {\n        if (!(state.get(id) === undefined)) {\n          map.setIn([id, 'hidden'], false);\n        }\n      });\n    });\n  case STATUS_HIDE:\n    return state.withMutations(map => {\n      action.ids.forEach(id => {\n        if (!(state.get(id) === undefined)) {\n          map.setIn([id, 'hidden'], true);\n        }\n      });\n    });\n  case STATUS_COLLAPSE:\n    return state.setIn([action.id, 'collapsed'], action.isCollapsed);\n  case TIMELINE_DELETE:\n    return deleteStatus(state, action.id, action.references);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}