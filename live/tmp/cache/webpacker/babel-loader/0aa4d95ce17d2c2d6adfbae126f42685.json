{"ast":null,"code":"import api from '../api';\nimport { importFetchedPoll } from './importer';\nexport var POLL_VOTE_REQUEST = 'POLL_VOTE_REQUEST';\nexport var POLL_VOTE_SUCCESS = 'POLL_VOTE_SUCCESS';\nexport var POLL_VOTE_FAIL = 'POLL_VOTE_FAIL';\nexport var POLL_FETCH_REQUEST = 'POLL_FETCH_REQUEST';\nexport var POLL_FETCH_SUCCESS = 'POLL_FETCH_SUCCESS';\nexport var POLL_FETCH_FAIL = 'POLL_FETCH_FAIL';\nexport var vote = function vote(pollId, choices) {\n  return function (dispatch, getState) {\n    dispatch(voteRequest());\n    api(getState).post(\"/api/v1/polls/\" + pollId + \"/votes\", {\n      choices\n    }).then(function (_ref) {\n      var data = _ref.data;\n      dispatch(importFetchedPoll(data));\n      dispatch(voteSuccess(data));\n    }).catch(function (err) {\n      return dispatch(voteFail(err));\n    });\n  };\n};\nexport var fetchPoll = function fetchPoll(pollId) {\n  return function (dispatch, getState) {\n    dispatch(fetchPollRequest());\n    api(getState).get(\"/api/v1/polls/\" + pollId).then(function (_ref2) {\n      var data = _ref2.data;\n      dispatch(importFetchedPoll(data));\n      dispatch(fetchPollSuccess(data));\n    }).catch(function (err) {\n      return dispatch(fetchPollFail(err));\n    });\n  };\n};\nexport var voteRequest = function voteRequest() {\n  return {\n    type: POLL_VOTE_REQUEST\n  };\n};\nexport var voteSuccess = function voteSuccess(poll) {\n  return {\n    type: POLL_VOTE_SUCCESS,\n    poll\n  };\n};\nexport var voteFail = function voteFail(error) {\n  return {\n    type: POLL_VOTE_FAIL,\n    error\n  };\n};\nexport var fetchPollRequest = function fetchPollRequest() {\n  return {\n    type: POLL_FETCH_REQUEST\n  };\n};\nexport var fetchPollSuccess = function fetchPollSuccess(poll) {\n  return {\n    type: POLL_FETCH_SUCCESS,\n    poll\n  };\n};\nexport var fetchPollFail = function fetchPollFail(error) {\n  return {\n    type: POLL_FETCH_FAIL,\n    error\n  };\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/polls.js"],"names":["api","importFetchedPoll","POLL_VOTE_REQUEST","POLL_VOTE_SUCCESS","POLL_VOTE_FAIL","POLL_FETCH_REQUEST","POLL_FETCH_SUCCESS","POLL_FETCH_FAIL","vote","pollId","choices","dispatch","getState","voteRequest","post","then","data","voteSuccess","catch","err","voteFail","fetchPoll","fetchPollRequest","get","fetchPollSuccess","fetchPollFail","type","poll","error"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,SAASC,iBAAT,QAAkC,YAAlC;AAEA,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,cAAc,GAAM,gBAA1B;AAEP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,eAAe,GAAM,iBAA3B;AAEP,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,MAAD,EAASC,OAAT;AAAA,SAAqB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC/DD,IAAAA,QAAQ,CAACE,WAAW,EAAZ,CAAR;AAEAb,IAAAA,GAAG,CAACY,QAAD,CAAH,CAAcE,IAAd,oBAAoCL,MAApC,aAAoD;AAAEC,MAAAA;AAAF,KAApD,EACGK,IADH,CACQ,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AAClBL,MAAAA,QAAQ,CAACV,iBAAiB,CAACe,IAAD,CAAlB,CAAR;AACAL,MAAAA,QAAQ,CAACM,WAAW,CAACD,IAAD,CAAZ,CAAR;AACD,KAJH,EAKGE,KALH,CAKS,UAAAC,GAAG;AAAA,aAAIR,QAAQ,CAACS,QAAQ,CAACD,GAAD,CAAT,CAAZ;AAAA,KALZ;AAMD,GATmB;AAAA,CAAb;AAWP,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAAAZ,MAAM;AAAA,SAAI,UAACE,QAAD,EAAWC,QAAX,EAAwB;AACzDD,IAAAA,QAAQ,CAACW,gBAAgB,EAAjB,CAAR;AAEAtB,IAAAA,GAAG,CAACY,QAAD,CAAH,CAAcW,GAAd,oBAAmCd,MAAnC,EACGM,IADH,CACQ,iBAAc;AAAA,UAAXC,IAAW,SAAXA,IAAW;AAClBL,MAAAA,QAAQ,CAACV,iBAAiB,CAACe,IAAD,CAAlB,CAAR;AACAL,MAAAA,QAAQ,CAACa,gBAAgB,CAACR,IAAD,CAAjB,CAAR;AACD,KAJH,EAKGE,KALH,CAKS,UAAAC,GAAG;AAAA,aAAIR,QAAQ,CAACc,aAAa,CAACN,GAAD,CAAd,CAAZ;AAAA,KALZ;AAMD,GAT8B;AAAA,CAAxB;AAWP,OAAO,IAAMN,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAO;AAChCa,IAAAA,IAAI,EAAExB;AAD0B,GAAP;AAAA,CAApB;AAIP,OAAO,IAAMe,WAAW,GAAG,SAAdA,WAAc,CAAAU,IAAI;AAAA,SAAK;AAClCD,IAAAA,IAAI,EAAEvB,iBAD4B;AAElCwB,IAAAA;AAFkC,GAAL;AAAA,CAAxB;AAKP,OAAO,IAAMP,QAAQ,GAAG,SAAXA,QAAW,CAAAQ,KAAK;AAAA,SAAK;AAChCF,IAAAA,IAAI,EAAEtB,cAD0B;AAEhCwB,IAAAA;AAFgC,GAAL;AAAA,CAAtB;AAKP,OAAO,IAAMN,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAO;AACrCI,IAAAA,IAAI,EAAErB;AAD+B,GAAP;AAAA,CAAzB;AAIP,OAAO,IAAMmB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAG,IAAI;AAAA,SAAK;AACvCD,IAAAA,IAAI,EAAEpB,kBADiC;AAEvCqB,IAAAA;AAFuC,GAAL;AAAA,CAA7B;AAKP,OAAO,IAAMF,aAAa,GAAG,SAAhBA,aAAgB,CAAAG,KAAK;AAAA,SAAK;AACrCF,IAAAA,IAAI,EAAEnB,eAD+B;AAErCqB,IAAAA;AAFqC,GAAL;AAAA,CAA3B","sourcesContent":["import api from '../api';\nimport { importFetchedPoll } from './importer';\n\nexport const POLL_VOTE_REQUEST = 'POLL_VOTE_REQUEST';\nexport const POLL_VOTE_SUCCESS = 'POLL_VOTE_SUCCESS';\nexport const POLL_VOTE_FAIL    = 'POLL_VOTE_FAIL';\n\nexport const POLL_FETCH_REQUEST = 'POLL_FETCH_REQUEST';\nexport const POLL_FETCH_SUCCESS = 'POLL_FETCH_SUCCESS';\nexport const POLL_FETCH_FAIL    = 'POLL_FETCH_FAIL';\n\nexport const vote = (pollId, choices) => (dispatch, getState) => {\n  dispatch(voteRequest());\n\n  api(getState).post(`/api/v1/polls/${pollId}/votes`, { choices })\n    .then(({ data }) => {\n      dispatch(importFetchedPoll(data));\n      dispatch(voteSuccess(data));\n    })\n    .catch(err => dispatch(voteFail(err)));\n};\n\nexport const fetchPoll = pollId => (dispatch, getState) => {\n  dispatch(fetchPollRequest());\n\n  api(getState).get(`/api/v1/polls/${pollId}`)\n    .then(({ data }) => {\n      dispatch(importFetchedPoll(data));\n      dispatch(fetchPollSuccess(data));\n    })\n    .catch(err => dispatch(fetchPollFail(err)));\n};\n\nexport const voteRequest = () => ({\n  type: POLL_VOTE_REQUEST,\n});\n\nexport const voteSuccess = poll => ({\n  type: POLL_VOTE_SUCCESS,\n  poll,\n});\n\nexport const voteFail = error => ({\n  type: POLL_VOTE_FAIL,\n  error,\n});\n\nexport const fetchPollRequest = () => ({\n  type: POLL_FETCH_REQUEST,\n});\n\nexport const fetchPollSuccess = poll => ({\n  type: POLL_FETCH_SUCCESS,\n  poll,\n});\n\nexport const fetchPollFail = error => ({\n  type: POLL_FETCH_FAIL,\n  error,\n});\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}