{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/follow_recommendations/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\nimport { changeSetting, saveSettings } from 'mastodon/actions/settings';\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { markAsPartial } from 'mastodon/actions/timelines';\nimport Column from 'mastodon/features/ui/components/column';\nimport Account from './components/account';\nimport Logo from 'mastodon/components/logo';\nimport imageGreeting from 'mastodon/../images/elephant_ui_greeting.svg';\nimport Button from 'mastodon/components/button';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    suggestions: state.getIn(['suggestions', 'items']),\n    isLoading: state.getIn(['suggestions', 'isLoading'])\n  };\n};\n\nvar FollowRecommendations = (_dec = connect(mapStateToProps), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(FollowRecommendations, _ImmutablePureCompone);\n\n  function FollowRecommendations() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n\n    _this.handleDone = function () {\n      var dispatch = _this.props.dispatch;\n      var router = _this.context.router;\n      dispatch(requestBrowserPermission(function (permission) {\n        if (permission === 'granted') {\n          dispatch(changeSetting(['notifications', 'alerts', 'follow'], true));\n          dispatch(changeSetting(['notifications', 'alerts', 'favourite'], true));\n          dispatch(changeSetting(['notifications', 'alerts', 'reblog'], true));\n          dispatch(changeSetting(['notifications', 'alerts', 'mention'], true));\n          dispatch(changeSetting(['notifications', 'alerts', 'poll'], true));\n          dispatch(changeSetting(['notifications', 'alerts', 'status'], true));\n          dispatch(saveSettings());\n        }\n      }));\n      router.history.push('/timelines/home');\n    };\n\n    return _this;\n  }\n\n  var _proto = FollowRecommendations.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props = this.props,\n        dispatch = _this$props.dispatch,\n        suggestions = _this$props.suggestions; // Don't re-fetch if we're e.g. navigating backwards to this page,\n    // since we don't want followed accounts to disappear from the list\n\n    if (suggestions.size === 0) {\n      dispatch(fetchSuggestions(true));\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var dispatch = this.props.dispatch; // Force the home timeline to be reloaded when the user navigates\n    // to it; if the user is new, it would've been empty before\n\n    dispatch(markAsPartial('home'));\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        suggestions = _this$props2.suggestions,\n        isLoading = _this$props2.isLoading;\n    return /*#__PURE__*/React.createElement(Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scrollable follow-recommendations-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Logo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"follow_recommendations.heading\",\n      defaultMessage: \"Follow people you'd like to see posts from! Here are some suggestions.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"follow_recommendations.lead\",\n      defaultMessage: \"Posts from people you follow will show up in chronological order on your home feed. Don't be afraid to make mistakes, you can unfollow people just as easily any time!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 16\n      }\n    }))), !isLoading && /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, suggestions.size > 0 ? suggestions.map(function (suggestion) {\n      return /*#__PURE__*/React.createElement(Account, {\n        key: suggestion.get('account'),\n        id: suggestion.get('account'),\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 19\n        }\n      });\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-list__empty-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"empty_column.follow_recommendations\",\n      defaultMessage: \"Looks like no suggestions could be generated for you. You can try using search to look for people you might know or explore trending hashtags.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column-actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: imageGreeting,\n      alt: \"\",\n      className: \"column-actions__background\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleDone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"follow_recommendations.done\",\n      defaultMessage: \"Done\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 51\n      }\n    }))))));\n  };\n\n  return FollowRecommendations;\n}(ImmutablePureComponent), _class2.contextTypes = {\n  router: PropTypes.object.isRequired\n}, _class2.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  suggestions: ImmutablePropTypes.list,\n  isLoading: PropTypes.bool\n}, _temp)) || _class);\nexport { FollowRecommendations as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/follow_recommendations/index.js"],"names":["React","PropTypes","ImmutablePureComponent","ImmutablePropTypes","connect","FormattedMessage","fetchSuggestions","changeSetting","saveSettings","requestBrowserPermission","markAsPartial","Column","Account","Logo","imageGreeting","Button","mapStateToProps","state","suggestions","getIn","isLoading","FollowRecommendations","handleDone","dispatch","props","router","context","permission","history","push","componentDidMount","size","componentWillUnmount","render","map","suggestion","get","contextTypes","object","isRequired","propTypes","func","list","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\nimport { changeSetting, saveSettings } from 'mastodon/actions/settings';\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { markAsPartial } from 'mastodon/actions/timelines';\nimport Column from 'mastodon/features/ui/components/column';\nimport Account from './components/account';\nimport Logo from 'mastodon/components/logo';\nimport imageGreeting from 'mastodon/../images/elephant_ui_greeting.svg';\nimport Button from 'mastodon/components/button';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass FollowRecommendations extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    suggestions: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n  };\n\n  componentDidMount () {\n    const { dispatch, suggestions } = this.props;\n\n    // Don't re-fetch if we're e.g. navigating backwards to this page,\n    // since we don't want followed accounts to disappear from the list\n\n    if (suggestions.size === 0) {\n      dispatch(fetchSuggestions(true));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch } = this.props;\n\n    // Force the home timeline to be reloaded when the user navigates\n    // to it; if the user is new, it would've been empty before\n\n    dispatch(markAsPartial('home'));\n  }\n\n  handleDone = () => {\n    const { dispatch } = this.props;\n    const { router } = this.context;\n\n    dispatch(requestBrowserPermission((permission) => {\n      if (permission === 'granted') {\n        dispatch(changeSetting(['notifications', 'alerts', 'follow'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'favourite'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'reblog'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'mention'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'poll'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'status'], true));\n        dispatch(saveSettings());\n      }\n    }));\n\n    router.history.push('/timelines/home');\n  }\n\n  render () {\n    const { suggestions, isLoading } = this.props;\n\n    return (\n      <Column>\n        <div className='scrollable follow-recommendations-container'>\n          <div className='column-title'>\n            <Logo />\n            <h3><FormattedMessage id='follow_recommendations.heading' defaultMessage=\"Follow people you'd like to see posts from! Here are some suggestions.\" /></h3>\n            <p><FormattedMessage id='follow_recommendations.lead' defaultMessage=\"Posts from people you follow will show up in chronological order on your home feed. Don't be afraid to make mistakes, you can unfollow people just as easily any time!\" /></p>\n          </div>\n\n          {!isLoading && (\n            <React.Fragment>\n              <div className='column-list'>\n                {suggestions.size > 0 ? suggestions.map(suggestion => (\n                  <Account key={suggestion.get('account')} id={suggestion.get('account')} />\n                )) : (\n                  <div className='column-list__empty-message'>\n                    <FormattedMessage id='empty_column.follow_recommendations' defaultMessage='Looks like no suggestions could be generated for you. You can try using search to look for people you might know or explore trending hashtags.' />\n                  </div>\n                )}\n              </div>\n\n              <div className='column-actions'>\n                <img src={imageGreeting} alt='' className='column-actions__background' />\n                <Button onClick={this.handleDone}><FormattedMessage id='follow_recommendations.done' defaultMessage='Done' /></Button>\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"follow_recommendations.heading","defaultMessage":"Follow people you'd like to see posts from! Here are some suggestions."},{"id":"follow_recommendations.lead","defaultMessage":"Posts from people you follow will show up in chronological order on your home feed. Don't be afraid to make mistakes, you can unfollow people just as easily any time!"},{"id":"empty_column.follow_recommendations","defaultMessage":"Looks like no suggestions could be generated for you. You can try using search to look for people you might know or explore trending hashtags."},{"id":"follow_recommendations.done","defaultMessage":"Done"}]}},"sourceType":"module"}