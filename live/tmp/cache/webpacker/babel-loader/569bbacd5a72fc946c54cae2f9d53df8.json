{"ast":null,"code":"import { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport { LIST_ADDER_RESET, LIST_ADDER_SETUP, LIST_ADDER_LISTS_FETCH_REQUEST, LIST_ADDER_LISTS_FETCH_SUCCESS, LIST_ADDER_LISTS_FETCH_FAIL, LIST_EDITOR_ADD_SUCCESS, LIST_EDITOR_REMOVE_SUCCESS } from '../actions/lists';\nvar initialState = ImmutableMap({\n  accountId: null,\n  lists: ImmutableMap({\n    items: ImmutableList(),\n    loaded: false,\n    isLoading: false\n  })\n});\nexport default function listAdderReducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case LIST_ADDER_RESET:\n      return initialState;\n\n    case LIST_ADDER_SETUP:\n      return state.withMutations(function (map) {\n        map.set('accountId', action.account.get('id'));\n      });\n\n    case LIST_ADDER_LISTS_FETCH_REQUEST:\n      return state.setIn(['lists', 'isLoading'], true);\n\n    case LIST_ADDER_LISTS_FETCH_FAIL:\n      return state.setIn(['lists', 'isLoading'], false);\n\n    case LIST_ADDER_LISTS_FETCH_SUCCESS:\n      return state.update('lists', function (lists) {\n        return lists.withMutations(function (map) {\n          map.set('isLoading', false);\n          map.set('loaded', true);\n          map.set('items', ImmutableList(action.lists.map(function (item) {\n            return item.id;\n          })));\n        });\n      });\n\n    case LIST_EDITOR_ADD_SUCCESS:\n      return state.updateIn(['lists', 'items'], function (list) {\n        return list.unshift(action.listId);\n      });\n\n    case LIST_EDITOR_REMOVE_SUCCESS:\n      return state.updateIn(['lists', 'items'], function (list) {\n        return list.filterNot(function (item) {\n          return item === action.listId;\n        });\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/list_adder.js"],"names":["Map","ImmutableMap","List","ImmutableList","LIST_ADDER_RESET","LIST_ADDER_SETUP","LIST_ADDER_LISTS_FETCH_REQUEST","LIST_ADDER_LISTS_FETCH_SUCCESS","LIST_ADDER_LISTS_FETCH_FAIL","LIST_EDITOR_ADD_SUCCESS","LIST_EDITOR_REMOVE_SUCCESS","initialState","accountId","lists","items","loaded","isLoading","listAdderReducer","state","action","type","withMutations","map","set","account","get","setIn","update","item","id","updateIn","list","unshift","listId","filterNot"],"mappings":"AAAA,SAASA,GAAG,IAAIC,YAAhB,EAA8BC,IAAI,IAAIC,aAAtC,QAA2D,WAA3D;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,8BAHF,EAIEC,8BAJF,EAKEC,2BALF,EAMEC,uBANF,EAOEC,0BAPF,QAQO,kBARP;AAUA,IAAMC,YAAY,GAAGV,YAAY,CAAC;AAChCW,EAAAA,SAAS,EAAE,IADqB;AAGhCC,EAAAA,KAAK,EAAEZ,YAAY,CAAC;AAClBa,IAAAA,KAAK,EAAEX,aAAa,EADF;AAElBY,IAAAA,MAAM,EAAE,KAFU;AAGlBC,IAAAA,SAAS,EAAE;AAHO,GAAD;AAHa,CAAD,CAAjC;AAUA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAgDC,MAAhD,EAAwD;AAAA,MAA9BD,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBP,YAAsB;AAAA;;AACrE,UAAOQ,MAAM,CAACC,IAAd;AACA,SAAKhB,gBAAL;AACE,aAAOO,YAAP;;AACF,SAAKN,gBAAL;AACE,aAAOa,KAAK,CAACG,aAAN,CAAoB,UAAAC,GAAG,EAAI;AAChCA,QAAAA,GAAG,CAACC,GAAJ,CAAQ,WAAR,EAAqBJ,MAAM,CAACK,OAAP,CAAeC,GAAf,CAAmB,IAAnB,CAArB;AACD,OAFM,CAAP;;AAGF,SAAKnB,8BAAL;AACE,aAAOY,KAAK,CAACQ,KAAN,CAAY,CAAC,OAAD,EAAU,WAAV,CAAZ,EAAoC,IAApC,CAAP;;AACF,SAAKlB,2BAAL;AACE,aAAOU,KAAK,CAACQ,KAAN,CAAY,CAAC,OAAD,EAAU,WAAV,CAAZ,EAAoC,KAApC,CAAP;;AACF,SAAKnB,8BAAL;AACE,aAAOW,KAAK,CAACS,MAAN,CAAa,OAAb,EAAsB,UAAAd,KAAK;AAAA,eAAIA,KAAK,CAACQ,aAAN,CAAoB,UAAAC,GAAG,EAAI;AAC/DA,UAAAA,GAAG,CAACC,GAAJ,CAAQ,WAAR,EAAqB,KAArB;AACAD,UAAAA,GAAG,CAACC,GAAJ,CAAQ,QAAR,EAAkB,IAAlB;AACAD,UAAAA,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBpB,aAAa,CAACgB,MAAM,CAACN,KAAP,CAAaS,GAAb,CAAiB,UAAAM,IAAI;AAAA,mBAAIA,IAAI,CAACC,EAAT;AAAA,WAArB,CAAD,CAA9B;AACD,SAJqC,CAAJ;AAAA,OAA3B,CAAP;;AAKF,SAAKpB,uBAAL;AACE,aAAOS,KAAK,CAACY,QAAN,CAAe,CAAC,OAAD,EAAU,OAAV,CAAf,EAAmC,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,OAAL,CAAab,MAAM,CAACc,MAApB,CAAJ;AAAA,OAAvC,CAAP;;AACF,SAAKvB,0BAAL;AACE,aAAOQ,KAAK,CAACY,QAAN,CAAe,CAAC,OAAD,EAAU,OAAV,CAAf,EAAmC,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACG,SAAL,CAAe,UAAAN,IAAI;AAAA,iBAAIA,IAAI,KAAKT,MAAM,CAACc,MAApB;AAAA,SAAnB,CAAJ;AAAA,OAAvC,CAAP;;AACF;AACE,aAAOf,KAAP;AAtBF;AAwBD;AAAA","sourcesContent":["import { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport {\n  LIST_ADDER_RESET,\n  LIST_ADDER_SETUP,\n  LIST_ADDER_LISTS_FETCH_REQUEST,\n  LIST_ADDER_LISTS_FETCH_SUCCESS,\n  LIST_ADDER_LISTS_FETCH_FAIL,\n  LIST_EDITOR_ADD_SUCCESS,\n  LIST_EDITOR_REMOVE_SUCCESS,\n} from '../actions/lists';\n\nconst initialState = ImmutableMap({\n  accountId: null,\n\n  lists: ImmutableMap({\n    items: ImmutableList(),\n    loaded: false,\n    isLoading: false,\n  }),\n});\n\nexport default function listAdderReducer(state = initialState, action) {\n  switch(action.type) {\n  case LIST_ADDER_RESET:\n    return initialState;\n  case LIST_ADDER_SETUP:\n    return state.withMutations(map => {\n      map.set('accountId', action.account.get('id'));\n    });\n  case LIST_ADDER_LISTS_FETCH_REQUEST:\n    return state.setIn(['lists', 'isLoading'], true);\n  case LIST_ADDER_LISTS_FETCH_FAIL:\n    return state.setIn(['lists', 'isLoading'], false);\n  case LIST_ADDER_LISTS_FETCH_SUCCESS:\n    return state.update('lists', lists => lists.withMutations(map => {\n      map.set('isLoading', false);\n      map.set('loaded', true);\n      map.set('items', ImmutableList(action.lists.map(item => item.id)));\n    }));\n  case LIST_EDITOR_ADD_SUCCESS:\n    return state.updateIn(['lists', 'items'], list => list.unshift(action.listId));\n  case LIST_EDITOR_REMOVE_SUCCESS:\n    return state.updateIn(['lists', 'items'], list => list.filterNot(item => item === action.listId));\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}