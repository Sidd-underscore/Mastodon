{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/status/components/action_bar.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport IconButton from '../../../components/icon_button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport DropdownMenuContainer from '../../../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { me, isStaff } from '../../../initial_state';\nimport classNames from 'classnames';\nvar messages = defineMessages({\n  delete: {\n    \"id\": \"status.delete\",\n    \"defaultMessage\": \"Delete\"\n  },\n  redraft: {\n    \"id\": \"status.redraft\",\n    \"defaultMessage\": \"Delete & re-draft\"\n  },\n  direct: {\n    \"id\": \"status.direct\",\n    \"defaultMessage\": \"Direct message @{name}\"\n  },\n  mention: {\n    \"id\": \"status.mention\",\n    \"defaultMessage\": \"Mention @{name}\"\n  },\n  reply: {\n    \"id\": \"status.reply\",\n    \"defaultMessage\": \"Reply\"\n  },\n  reblog: {\n    \"id\": \"status.reblog\",\n    \"defaultMessage\": \"Boost\"\n  },\n  reblog_private: {\n    \"id\": \"status.reblog_private\",\n    \"defaultMessage\": \"Boost with original visibility\"\n  },\n  cancel_reblog_private: {\n    \"id\": \"status.cancel_reblog_private\",\n    \"defaultMessage\": \"Unboost\"\n  },\n  cannot_reblog: {\n    \"id\": \"status.cannot_reblog\",\n    \"defaultMessage\": \"This post cannot be boosted\"\n  },\n  favourite: {\n    \"id\": \"status.favourite\",\n    \"defaultMessage\": \"Favourite\"\n  },\n  bookmark: {\n    \"id\": \"status.bookmark\",\n    \"defaultMessage\": \"Bookmark\"\n  },\n  more: {\n    \"id\": \"status.more\",\n    \"defaultMessage\": \"More\"\n  },\n  mute: {\n    \"id\": \"status.mute\",\n    \"defaultMessage\": \"Mute @{name}\"\n  },\n  muteConversation: {\n    \"id\": \"status.mute_conversation\",\n    \"defaultMessage\": \"Mute conversation\"\n  },\n  unmuteConversation: {\n    \"id\": \"status.unmute_conversation\",\n    \"defaultMessage\": \"Unmute conversation\"\n  },\n  block: {\n    \"id\": \"status.block\",\n    \"defaultMessage\": \"Block @{name}\"\n  },\n  report: {\n    \"id\": \"status.report\",\n    \"defaultMessage\": \"Report @{name}\"\n  },\n  share: {\n    \"id\": \"status.share\",\n    \"defaultMessage\": \"Share\"\n  },\n  pin: {\n    \"id\": \"status.pin\",\n    \"defaultMessage\": \"Pin on profile\"\n  },\n  unpin: {\n    \"id\": \"status.unpin\",\n    \"defaultMessage\": \"Unpin from profile\"\n  },\n  embed: {\n    \"id\": \"status.embed\",\n    \"defaultMessage\": \"Embed\"\n  },\n  admin_account: {\n    \"id\": \"status.admin_account\",\n    \"defaultMessage\": \"Open moderation interface for @{name}\"\n  },\n  admin_status: {\n    \"id\": \"status.admin_status\",\n    \"defaultMessage\": \"Open this status in the moderation interface\"\n  },\n  copy: {\n    \"id\": \"status.copy\",\n    \"defaultMessage\": \"Copy link to status\"\n  },\n  blockDomain: {\n    \"id\": \"account.block_domain\",\n    \"defaultMessage\": \"Block domain {domain}\"\n  },\n  unblockDomain: {\n    \"id\": \"account.unblock_domain\",\n    \"defaultMessage\": \"Unblock domain {domain}\"\n  },\n  unmute: {\n    \"id\": \"account.unmute\",\n    \"defaultMessage\": \"Unmute @{name}\"\n  },\n  unblock: {\n    \"id\": \"account.unblock\",\n    \"defaultMessage\": \"Unblock @{name}\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var status = _ref.status;\n  return {\n    relationship: state.getIn(['relationships', status.getIn(['account', 'id'])])\n  };\n};\n\nvar ActionBar = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(ActionBar, _React$PureComponent);\n\n  function ActionBar() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handleReplyClick = function () {\n      _this.props.onReply(_this.props.status);\n    };\n\n    _this.handleReblogClick = function (e) {\n      _this.props.onReblog(_this.props.status, e);\n    };\n\n    _this.handleFavouriteClick = function () {\n      _this.props.onFavourite(_this.props.status);\n    };\n\n    _this.handleBookmarkClick = function (e) {\n      _this.props.onBookmark(_this.props.status, e);\n    };\n\n    _this.handleDeleteClick = function () {\n      _this.props.onDelete(_this.props.status, _this.context.router.history);\n    };\n\n    _this.handleRedraftClick = function () {\n      _this.props.onDelete(_this.props.status, _this.context.router.history, true);\n    };\n\n    _this.handleDirectClick = function () {\n      _this.props.onDirect(_this.props.status.get('account'), _this.context.router.history);\n    };\n\n    _this.handleMentionClick = function () {\n      _this.props.onMention(_this.props.status.get('account'), _this.context.router.history);\n    };\n\n    _this.handleMuteClick = function () {\n      var _this$props = _this.props,\n          status = _this$props.status,\n          relationship = _this$props.relationship,\n          onMute = _this$props.onMute,\n          onUnmute = _this$props.onUnmute;\n      var account = status.get('account');\n\n      if (relationship && relationship.get('muting')) {\n        onUnmute(account);\n      } else {\n        onMute(account);\n      }\n    };\n\n    _this.handleBlockClick = function () {\n      var _this$props2 = _this.props,\n          status = _this$props2.status,\n          relationship = _this$props2.relationship,\n          onBlock = _this$props2.onBlock,\n          onUnblock = _this$props2.onUnblock;\n      var account = status.get('account');\n\n      if (relationship && relationship.get('blocking')) {\n        onUnblock(account);\n      } else {\n        onBlock(status);\n      }\n    };\n\n    _this.handleBlockDomain = function () {\n      var _this$props3 = _this.props,\n          status = _this$props3.status,\n          onBlockDomain = _this$props3.onBlockDomain;\n      var account = status.get('account');\n      onBlockDomain(account.get('acct').split('@')[1]);\n    };\n\n    _this.handleUnblockDomain = function () {\n      var _this$props4 = _this.props,\n          status = _this$props4.status,\n          onUnblockDomain = _this$props4.onUnblockDomain;\n      var account = status.get('account');\n      onUnblockDomain(account.get('acct').split('@')[1]);\n    };\n\n    _this.handleConversationMuteClick = function () {\n      _this.props.onMuteConversation(_this.props.status);\n    };\n\n    _this.handleReport = function () {\n      _this.props.onReport(_this.props.status);\n    };\n\n    _this.handlePinClick = function () {\n      _this.props.onPin(_this.props.status);\n    };\n\n    _this.handleShare = function () {\n      navigator.share({\n        text: _this.props.status.get('search_index'),\n        url: _this.props.status.get('url')\n      });\n    };\n\n    _this.handleEmbed = function () {\n      _this.props.onEmbed(_this.props.status);\n    };\n\n    _this.handleCopy = function () {\n      var url = _this.props.status.get('url');\n\n      var textarea = document.createElement('textarea');\n      textarea.textContent = url;\n      textarea.style.position = 'fixed';\n      document.body.appendChild(textarea);\n\n      try {\n        textarea.select();\n        document.execCommand('copy');\n      } catch (e) {} finally {\n        document.body.removeChild(textarea);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = ActionBar.prototype;\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        status = _this$props5.status,\n        relationship = _this$props5.relationship,\n        intl = _this$props5.intl;\n    var publicStatus = ['public', 'unlisted'].includes(status.get('visibility'));\n    var mutingConversation = status.get('muted');\n    var account = status.get('account');\n    var writtenByMe = status.getIn(['account', 'id']) === me;\n    var menu = [];\n\n    if (publicStatus) {\n      menu.push({\n        text: intl.formatMessage(messages.copy),\n        action: this.handleCopy\n      });\n      menu.push({\n        text: intl.formatMessage(messages.embed),\n        action: this.handleEmbed\n      });\n      menu.push(null);\n    }\n\n    if (writtenByMe) {\n      if (publicStatus) {\n        menu.push({\n          text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin),\n          action: this.handlePinClick\n        });\n        menu.push(null);\n      }\n\n      menu.push({\n        text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation),\n        action: this.handleConversationMuteClick\n      });\n      menu.push(null);\n      menu.push({\n        text: intl.formatMessage(messages.delete),\n        action: this.handleDeleteClick\n      });\n      menu.push({\n        text: intl.formatMessage(messages.redraft),\n        action: this.handleRedraftClick\n      });\n    } else {\n      menu.push({\n        text: intl.formatMessage(messages.mention, {\n          name: status.getIn(['account', 'username'])\n        }),\n        action: this.handleMentionClick\n      });\n      menu.push({\n        text: intl.formatMessage(messages.direct, {\n          name: status.getIn(['account', 'username'])\n        }),\n        action: this.handleDirectClick\n      });\n      menu.push(null);\n\n      if (relationship && relationship.get('muting')) {\n        menu.push({\n          text: intl.formatMessage(messages.unmute, {\n            name: account.get('username')\n          }),\n          action: this.handleMuteClick\n        });\n      } else {\n        menu.push({\n          text: intl.formatMessage(messages.mute, {\n            name: account.get('username')\n          }),\n          action: this.handleMuteClick\n        });\n      }\n\n      if (relationship && relationship.get('blocking')) {\n        menu.push({\n          text: intl.formatMessage(messages.unblock, {\n            name: account.get('username')\n          }),\n          action: this.handleBlockClick\n        });\n      } else {\n        menu.push({\n          text: intl.formatMessage(messages.block, {\n            name: account.get('username')\n          }),\n          action: this.handleBlockClick\n        });\n      }\n\n      menu.push({\n        text: intl.formatMessage(messages.report, {\n          name: status.getIn(['account', 'username'])\n        }),\n        action: this.handleReport\n      });\n\n      if (account.get('acct') !== account.get('username')) {\n        var domain = account.get('acct').split('@')[1];\n        menu.push(null);\n\n        if (relationship && relationship.get('domain_blocking')) {\n          menu.push({\n            text: intl.formatMessage(messages.unblockDomain, {\n              domain\n            }),\n            action: this.handleUnblockDomain\n          });\n        } else {\n          menu.push({\n            text: intl.formatMessage(messages.blockDomain, {\n              domain\n            }),\n            action: this.handleBlockDomain\n          });\n        }\n      }\n\n      if (isStaff) {\n        menu.push(null);\n        menu.push({\n          text: intl.formatMessage(messages.admin_account, {\n            name: status.getIn(['account', 'username'])\n          }),\n          href: \"/admin/accounts/\" + status.getIn(['account', 'id'])\n        });\n        menu.push({\n          text: intl.formatMessage(messages.admin_status),\n          href: \"/admin/accounts/\" + status.getIn(['account', 'id']) + \"/statuses/\" + status.get('id')\n        });\n      }\n    }\n\n    var shareButton = 'share' in navigator && publicStatus && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"detailed-status__button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      title: intl.formatMessage(messages.share),\n      icon: \"share-alt\",\n      onClick: this.handleShare,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 48\n      }\n    }));\n    var replyIcon;\n\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n    } else {\n      replyIcon = 'reply-all';\n    }\n\n    var reblogPrivate = status.getIn(['account', 'id']) === me && status.get('visibility') === 'private';\n    var reblogTitle;\n\n    if (status.get('reblogged')) {\n      reblogTitle = intl.formatMessage(messages.cancel_reblog_private);\n    } else if (publicStatus) {\n      reblogTitle = intl.formatMessage(messages.reblog);\n    } else if (reblogPrivate) {\n      reblogTitle = intl.formatMessage(messages.reblog_private);\n    } else {\n      reblogTitle = intl.formatMessage(messages.cannot_reblog);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"detailed-status__action-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"detailed-status__button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      title: intl.formatMessage(messages.reply),\n      icon: status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon,\n      onClick: this.handleReplyClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 50\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"detailed-status__button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      className: classNames({\n        reblogPrivate\n      }),\n      disabled: !publicStatus && !reblogPrivate,\n      active: status.get('reblogged'),\n      title: reblogTitle,\n      icon: \"retweet\",\n      onClick: this.handleReblogClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 51\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"detailed-status__button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      className: \"star-icon\",\n      animate: true,\n      active: status.get('favourited'),\n      title: intl.formatMessage(messages.favourite),\n      icon: \"star\",\n      onClick: this.handleFavouriteClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 50\n      }\n    })), shareButton, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"detailed-status__button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      className: \"bookmark-icon\",\n      active: status.get('bookmarked'),\n      title: intl.formatMessage(messages.bookmark),\n      icon: \"bookmark\",\n      onClick: this.handleBookmarkClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 50\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"detailed-status__action-bar-dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DropdownMenuContainer, {\n      size: 18,\n      icon: \"ellipsis-h\",\n      status: status,\n      items: menu,\n      direction: \"left\",\n      title: intl.formatMessage(messages.more),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return ActionBar;\n}(React.PureComponent), _class2.contextTypes = {\n  router: PropTypes.object\n}, _class2.propTypes = {\n  status: ImmutablePropTypes.map.isRequired,\n  relationship: ImmutablePropTypes.map,\n  onReply: PropTypes.func.isRequired,\n  onReblog: PropTypes.func.isRequired,\n  onFavourite: PropTypes.func.isRequired,\n  onBookmark: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onDirect: PropTypes.func.isRequired,\n  onMention: PropTypes.func.isRequired,\n  onMute: PropTypes.func,\n  onUnmute: PropTypes.func,\n  onBlock: PropTypes.func,\n  onUnblock: PropTypes.func,\n  onBlockDomain: PropTypes.func,\n  onUnblockDomain: PropTypes.func,\n  onMuteConversation: PropTypes.func,\n  onReport: PropTypes.func,\n  onPin: PropTypes.func,\n  onEmbed: PropTypes.func,\n  intl: PropTypes.object.isRequired\n}, _temp)) || _class) || _class);\nexport { ActionBar as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/status/components/action_bar.js"],"names":["React","PropTypes","connect","IconButton","ImmutablePropTypes","DropdownMenuContainer","defineMessages","injectIntl","me","isStaff","classNames","messages","delete","redraft","direct","mention","reply","reblog","reblog_private","cancel_reblog_private","cannot_reblog","favourite","bookmark","more","mute","muteConversation","unmuteConversation","block","report","share","pin","unpin","embed","admin_account","admin_status","copy","blockDomain","unblockDomain","unmute","unblock","mapStateToProps","state","status","relationship","getIn","ActionBar","handleReplyClick","props","onReply","handleReblogClick","e","onReblog","handleFavouriteClick","onFavourite","handleBookmarkClick","onBookmark","handleDeleteClick","onDelete","context","router","history","handleRedraftClick","handleDirectClick","onDirect","get","handleMentionClick","onMention","handleMuteClick","onMute","onUnmute","account","handleBlockClick","onBlock","onUnblock","handleBlockDomain","onBlockDomain","split","handleUnblockDomain","onUnblockDomain","handleConversationMuteClick","onMuteConversation","handleReport","onReport","handlePinClick","onPin","handleShare","navigator","text","url","handleEmbed","onEmbed","handleCopy","textarea","document","createElement","textContent","style","position","body","appendChild","select","execCommand","removeChild","render","intl","publicStatus","includes","mutingConversation","writtenByMe","menu","push","formatMessage","action","name","domain","href","shareButton","replyIcon","reblogPrivate","reblogTitle","PureComponent","contextTypes","object","propTypes","map","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport IconButton from '../../../components/icon_button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport DropdownMenuContainer from '../../../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { me, isStaff } from '../../../initial_state';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  delete: { id: 'status.delete', defaultMessage: 'Delete' },\n  redraft: { id: 'status.redraft', defaultMessage: 'Delete & re-draft' },\n  direct: { id: 'status.direct', defaultMessage: 'Direct message @{name}' },\n  mention: { id: 'status.mention', defaultMessage: 'Mention @{name}' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  reblog: { id: 'status.reblog', defaultMessage: 'Boost' },\n  reblog_private: { id: 'status.reblog_private', defaultMessage: 'Boost with original visibility' },\n  cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Unboost' },\n  cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be boosted' },\n  favourite: { id: 'status.favourite', defaultMessage: 'Favourite' },\n  bookmark: { id: 'status.bookmark', defaultMessage: 'Bookmark' },\n  more: { id: 'status.more', defaultMessage: 'More' },\n  mute: { id: 'status.mute', defaultMessage: 'Mute @{name}' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  block: { id: 'status.block', defaultMessage: 'Block @{name}' },\n  report: { id: 'status.report', defaultMessage: 'Report @{name}' },\n  share: { id: 'status.share', defaultMessage: 'Share' },\n  pin: { id: 'status.pin', defaultMessage: 'Pin on profile' },\n  unpin: { id: 'status.unpin', defaultMessage: 'Unpin from profile' },\n  embed: { id: 'status.embed', defaultMessage: 'Embed' },\n  admin_account: { id: 'status.admin_account', defaultMessage: 'Open moderation interface for @{name}' },\n  admin_status: { id: 'status.admin_status', defaultMessage: 'Open this status in the moderation interface' },\n  copy: { id: 'status.copy', defaultMessage: 'Copy link to status' },\n  blockDomain: { id: 'account.block_domain', defaultMessage: 'Block domain {domain}' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n});\n\nconst mapStateToProps = (state, { status }) => ({\n  relationship: state.getIn(['relationships', status.getIn(['account', 'id'])]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ActionBar extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    relationship: ImmutablePropTypes.map,\n    onReply: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onBookmark: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onDirect: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onMute: PropTypes.func,\n    onUnmute: PropTypes.func,\n    onBlock: PropTypes.func,\n    onUnblock: PropTypes.func,\n    onBlockDomain: PropTypes.func,\n    onUnblockDomain: PropTypes.func,\n    onMuteConversation: PropTypes.func,\n    onReport: PropTypes.func,\n    onPin: PropTypes.func,\n    onEmbed: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleReplyClick = () => {\n    this.props.onReply(this.props.status);\n  }\n\n  handleReblogClick = (e) => {\n    this.props.onReblog(this.props.status, e);\n  }\n\n  handleFavouriteClick = () => {\n    this.props.onFavourite(this.props.status);\n  }\n\n  handleBookmarkClick = (e) => {\n    this.props.onBookmark(this.props.status, e);\n  }\n\n  handleDeleteClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history);\n  }\n\n  handleRedraftClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history, true);\n  }\n\n  handleDirectClick = () => {\n    this.props.onDirect(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMentionClick = () => {\n    this.props.onMention(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMuteClick = () => {\n    const { status, relationship, onMute, onUnmute } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('muting')) {\n      onUnmute(account);\n    } else {\n      onMute(account);\n    }\n  }\n\n  handleBlockClick = () => {\n    const { status, relationship, onBlock, onUnblock } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('blocking')) {\n      onUnblock(account);\n    } else {\n      onBlock(status);\n    }\n  }\n\n  handleBlockDomain = () => {\n    const { status, onBlockDomain } = this.props;\n    const account = status.get('account');\n\n    onBlockDomain(account.get('acct').split('@')[1]);\n  }\n\n  handleUnblockDomain = () => {\n    const { status, onUnblockDomain } = this.props;\n    const account = status.get('account');\n\n    onUnblockDomain(account.get('acct').split('@')[1]);\n  }\n\n  handleConversationMuteClick = () => {\n    this.props.onMuteConversation(this.props.status);\n  }\n\n  handleReport = () => {\n    this.props.onReport(this.props.status);\n  }\n\n  handlePinClick = () => {\n    this.props.onPin(this.props.status);\n  }\n\n  handleShare = () => {\n    navigator.share({\n      text: this.props.status.get('search_index'),\n      url: this.props.status.get('url'),\n    });\n  }\n\n  handleEmbed = () => {\n    this.props.onEmbed(this.props.status);\n  }\n\n  handleCopy = () => {\n    const url      = this.props.status.get('url');\n    const textarea = document.createElement('textarea');\n\n    textarea.textContent    = url;\n    textarea.style.position = 'fixed';\n\n    document.body.appendChild(textarea);\n\n    try {\n      textarea.select();\n      document.execCommand('copy');\n    } catch (e) {\n\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  render () {\n    const { status, relationship, intl } = this.props;\n\n    const publicStatus       = ['public', 'unlisted'].includes(status.get('visibility'));\n    const mutingConversation = status.get('muted');\n    const account            = status.get('account');\n    const writtenByMe        = status.getIn(['account', 'id']) === me;\n\n    let menu = [];\n\n    if (publicStatus) {\n      menu.push({ text: intl.formatMessage(messages.copy), action: this.handleCopy });\n      menu.push({ text: intl.formatMessage(messages.embed), action: this.handleEmbed });\n      menu.push(null);\n    }\n\n    if (writtenByMe) {\n      if (publicStatus) {\n        menu.push({ text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin), action: this.handlePinClick });\n        menu.push(null);\n      }\n\n      menu.push({ text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMuteClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDeleteClick });\n      menu.push({ text: intl.formatMessage(messages.redraft), action: this.handleRedraftClick });\n    } else {\n      menu.push({ text: intl.formatMessage(messages.mention, { name: status.getIn(['account', 'username']) }), action: this.handleMentionClick });\n      menu.push({ text: intl.formatMessage(messages.direct, { name: status.getIn(['account', 'username']) }), action: this.handleDirectClick });\n      menu.push(null);\n\n      if (relationship && relationship.get('muting')) {\n        menu.push({ text: intl.formatMessage(messages.unmute, { name: account.get('username') }), action: this.handleMuteClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.mute, { name: account.get('username') }), action: this.handleMuteClick });\n      }\n\n      if (relationship && relationship.get('blocking')) {\n        menu.push({ text: intl.formatMessage(messages.unblock, { name: account.get('username') }), action: this.handleBlockClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.block, { name: account.get('username') }), action: this.handleBlockClick });\n      }\n\n      menu.push({ text: intl.formatMessage(messages.report, { name: status.getIn(['account', 'username']) }), action: this.handleReport });\n\n      if (account.get('acct') !== account.get('username')) {\n        const domain = account.get('acct').split('@')[1];\n\n        menu.push(null);\n\n        if (relationship && relationship.get('domain_blocking')) {\n          menu.push({ text: intl.formatMessage(messages.unblockDomain, { domain }), action: this.handleUnblockDomain });\n        } else {\n          menu.push({ text: intl.formatMessage(messages.blockDomain, { domain }), action: this.handleBlockDomain });\n        }\n      }\n\n      if (isStaff) {\n        menu.push(null);\n        menu.push({ text: intl.formatMessage(messages.admin_account, { name: status.getIn(['account', 'username']) }), href: `/admin/accounts/${status.getIn(['account', 'id'])}` });\n        menu.push({ text: intl.formatMessage(messages.admin_status), href: `/admin/accounts/${status.getIn(['account', 'id'])}/statuses/${status.get('id')}` });\n      }\n    }\n\n    const shareButton = ('share' in navigator) && publicStatus && (\n      <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.share)} icon='share-alt' onClick={this.handleShare} /></div>\n    );\n\n    let replyIcon;\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n    } else {\n      replyIcon = 'reply-all';\n    }\n\n    const reblogPrivate = status.getIn(['account', 'id']) === me && status.get('visibility') === 'private';\n\n    let reblogTitle;\n    if (status.get('reblogged')) {\n      reblogTitle = intl.formatMessage(messages.cancel_reblog_private);\n    } else if (publicStatus) {\n      reblogTitle = intl.formatMessage(messages.reblog);\n    } else if (reblogPrivate) {\n      reblogTitle = intl.formatMessage(messages.reblog_private);\n    } else {\n      reblogTitle = intl.formatMessage(messages.cannot_reblog);\n    }\n\n    return (\n      <div className='detailed-status__action-bar'>\n        <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.reply)} icon={status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon} onClick={this.handleReplyClick} /></div>\n        <div className='detailed-status__button' ><IconButton className={classNames({ reblogPrivate })} disabled={!publicStatus && !reblogPrivate} active={status.get('reblogged')} title={reblogTitle} icon='retweet' onClick={this.handleReblogClick} /></div>\n        <div className='detailed-status__button'><IconButton className='star-icon' animate active={status.get('favourited')} title={intl.formatMessage(messages.favourite)} icon='star' onClick={this.handleFavouriteClick} /></div>\n        {shareButton}\n        <div className='detailed-status__button'><IconButton className='bookmark-icon' active={status.get('bookmarked')} title={intl.formatMessage(messages.bookmark)} icon='bookmark' onClick={this.handleBookmarkClick} /></div>\n\n        <div className='detailed-status__action-bar-dropdown'>\n          <DropdownMenuContainer size={18} icon='ellipsis-h' status={status} items={menu} direction='left' title={intl.formatMessage(messages.more)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"status.delete","defaultMessage":"Delete"},{"id":"status.redraft","defaultMessage":"Delete & re-draft"},{"id":"status.direct","defaultMessage":"Direct message @{name}"},{"id":"status.mention","defaultMessage":"Mention @{name}"},{"id":"status.reply","defaultMessage":"Reply"},{"id":"status.reblog","defaultMessage":"Boost"},{"id":"status.reblog_private","defaultMessage":"Boost with original visibility"},{"id":"status.cancel_reblog_private","defaultMessage":"Unboost"},{"id":"status.cannot_reblog","defaultMessage":"This post cannot be boosted"},{"id":"status.favourite","defaultMessage":"Favourite"},{"id":"status.bookmark","defaultMessage":"Bookmark"},{"id":"status.more","defaultMessage":"More"},{"id":"status.mute","defaultMessage":"Mute @{name}"},{"id":"status.mute_conversation","defaultMessage":"Mute conversation"},{"id":"status.unmute_conversation","defaultMessage":"Unmute conversation"},{"id":"status.block","defaultMessage":"Block @{name}"},{"id":"status.report","defaultMessage":"Report @{name}"},{"id":"status.share","defaultMessage":"Share"},{"id":"status.pin","defaultMessage":"Pin on profile"},{"id":"status.unpin","defaultMessage":"Unpin from profile"},{"id":"status.embed","defaultMessage":"Embed"},{"id":"status.admin_account","defaultMessage":"Open moderation interface for @{name}"},{"id":"status.admin_status","defaultMessage":"Open this status in the moderation interface"},{"id":"status.copy","defaultMessage":"Copy link to status"},{"id":"account.block_domain","defaultMessage":"Block domain {domain}"},{"id":"account.unblock_domain","defaultMessage":"Unblock domain {domain}"},{"id":"account.unmute","defaultMessage":"Unmute @{name}"},{"id":"account.unblock","defaultMessage":"Unblock @{name}"}]}},"sourceType":"module"}