{"ast":null,"code":"import { NOTIFICATIONS_UPDATE, NOTIFICATIONS_EXPAND_SUCCESS, NOTIFICATIONS_EXPAND_REQUEST, NOTIFICATIONS_EXPAND_FAIL, NOTIFICATIONS_FILTER_SET, NOTIFICATIONS_CLEAR, NOTIFICATIONS_SCROLL_TOP, NOTIFICATIONS_LOAD_PENDING, NOTIFICATIONS_MOUNT, NOTIFICATIONS_UNMOUNT, NOTIFICATIONS_MARK_AS_READ, NOTIFICATIONS_SET_BROWSER_SUPPORT, NOTIFICATIONS_SET_BROWSER_PERMISSION } from '../actions/notifications';\nimport { ACCOUNT_BLOCK_SUCCESS, ACCOUNT_MUTE_SUCCESS, FOLLOW_REQUEST_AUTHORIZE_SUCCESS, FOLLOW_REQUEST_REJECT_SUCCESS } from '../actions/accounts';\nimport { MARKERS_FETCH_SUCCESS } from '../actions/markers';\nimport { APP_FOCUS, APP_UNFOCUS } from '../actions/app';\nimport { DOMAIN_BLOCK_SUCCESS } from 'mastodon/actions/domain_blocks';\nimport { TIMELINE_DELETE, TIMELINE_DISCONNECT } from '../actions/timelines';\nimport { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport compareId from '../compare_id';\nvar initialState = ImmutableMap({\n  pendingItems: ImmutableList(),\n  items: ImmutableList(),\n  hasMore: true,\n  top: false,\n  mounted: 0,\n  unread: 0,\n  lastReadId: '0',\n  readMarkerId: '0',\n  isTabVisible: true,\n  isLoading: false,\n  browserSupport: false,\n  browserPermission: 'default'\n});\n\nvar notificationToMap = function notificationToMap(notification) {\n  return ImmutableMap({\n    id: notification.id,\n    type: notification.type,\n    account: notification.account.id,\n    created_at: notification.created_at,\n    status: notification.status ? notification.status.id : null\n  });\n};\n\nvar normalizeNotification = function normalizeNotification(state, notification, usePendingItems) {\n  var top = state.get('top');\n\n  if (usePendingItems || !state.get('pendingItems').isEmpty()) {\n    return state.update('pendingItems', function (list) {\n      return list.unshift(notificationToMap(notification));\n    }).update('unread', function (unread) {\n      return unread + 1;\n    });\n  }\n\n  if (shouldCountUnreadNotifications(state)) {\n    state = state.update('unread', function (unread) {\n      return unread + 1;\n    });\n  } else {\n    state = state.set('lastReadId', notification.id);\n  }\n\n  return state.update('items', function (list) {\n    if (top && list.size > 40) {\n      list = list.take(20);\n    }\n\n    return list.unshift(notificationToMap(notification));\n  });\n};\n\nvar expandNormalizedNotifications = function expandNormalizedNotifications(state, notifications, next, isLoadingRecent, usePendingItems) {\n  var lastReadId = state.get('lastReadId');\n  var items = ImmutableList();\n  notifications.forEach(function (n, i) {\n    items = items.set(i, notificationToMap(n));\n  });\n  return state.withMutations(function (mutable) {\n    if (!items.isEmpty()) {\n      usePendingItems = isLoadingRecent && (usePendingItems || !mutable.get('pendingItems').isEmpty());\n      mutable.update(usePendingItems ? 'pendingItems' : 'items', function (list) {\n        var lastIndex = 1 + list.findLastIndex(function (item) {\n          return item !== null && (compareId(item.get('id'), items.last().get('id')) > 0 || item.get('id') === items.last().get('id'));\n        });\n        var firstIndex = 1 + list.take(lastIndex).findLastIndex(function (item) {\n          return item !== null && compareId(item.get('id'), items.first().get('id')) > 0;\n        });\n        return list.take(firstIndex).concat(items, list.skip(lastIndex));\n      });\n    }\n\n    if (!next) {\n      mutable.set('hasMore', false);\n    }\n\n    if (shouldCountUnreadNotifications(state)) {\n      mutable.set('unread', mutable.get('pendingItems').count(function (item) {\n        return item !== null;\n      }) + mutable.get('items').count(function (item) {\n        return item && compareId(item.get('id'), lastReadId) > 0;\n      }));\n    } else {\n      var mostRecent = items.find(function (item) {\n        return item !== null;\n      });\n\n      if (mostRecent && compareId(lastReadId, mostRecent.get('id')) < 0) {\n        mutable.set('lastReadId', mostRecent.get('id'));\n      }\n    }\n\n    mutable.set('isLoading', false);\n  });\n};\n\nvar filterNotifications = function filterNotifications(state, accountIds, type) {\n  var helper = function helper(list) {\n    return list.filterNot(function (item) {\n      return item !== null && accountIds.includes(item.get('account')) && (type === undefined || type === item.get('type'));\n    });\n  };\n\n  return state.update('items', helper).update('pendingItems', helper);\n};\n\nvar clearUnread = function clearUnread(state) {\n  state = state.set('unread', state.get('pendingItems').size);\n  var lastNotification = state.get('items').find(function (item) {\n    return item !== null;\n  });\n  return state.set('lastReadId', lastNotification ? lastNotification.get('id') : '0');\n};\n\nvar updateTop = function updateTop(state, top) {\n  state = state.set('top', top);\n\n  if (!shouldCountUnreadNotifications(state)) {\n    state = clearUnread(state);\n  }\n\n  return state;\n};\n\nvar deleteByStatus = function deleteByStatus(state, statusId) {\n  var lastReadId = state.get('lastReadId');\n\n  if (shouldCountUnreadNotifications(state)) {\n    var _deletedUnread = state.get('items').filter(function (item) {\n      return item !== null && item.get('status') === statusId && compareId(item.get('id'), lastReadId) > 0;\n    });\n\n    state = state.update('unread', function (unread) {\n      return unread - _deletedUnread.size;\n    });\n  }\n\n  var helper = function helper(list) {\n    return list.filterNot(function (item) {\n      return item !== null && item.get('status') === statusId;\n    });\n  };\n\n  var deletedUnread = state.get('pendingItems').filter(function (item) {\n    return item !== null && item.get('status') === statusId && compareId(item.get('id'), lastReadId) > 0;\n  });\n  state = state.update('unread', function (unread) {\n    return unread - deletedUnread.size;\n  });\n  return state.update('items', helper).update('pendingItems', helper);\n};\n\nvar updateMounted = function updateMounted(state) {\n  state = state.update('mounted', function (count) {\n    return count + 1;\n  });\n\n  if (!shouldCountUnreadNotifications(state, state.get('mounted') === 1)) {\n    state = state.set('readMarkerId', state.get('lastReadId'));\n    state = clearUnread(state);\n  }\n\n  return state;\n};\n\nvar updateVisibility = function updateVisibility(state, visibility) {\n  state = state.set('isTabVisible', visibility);\n\n  if (!shouldCountUnreadNotifications(state)) {\n    state = state.set('readMarkerId', state.get('lastReadId'));\n    state = clearUnread(state);\n  }\n\n  return state;\n};\n\nvar shouldCountUnreadNotifications = function shouldCountUnreadNotifications(state, ignoreScroll) {\n  if (ignoreScroll === void 0) {\n    ignoreScroll = false;\n  }\n\n  var isTabVisible = state.get('isTabVisible');\n  var isOnTop = state.get('top');\n  var isMounted = state.get('mounted') > 0;\n  var lastReadId = state.get('lastReadId');\n  var lastItem = state.get('items').findLast(function (item) {\n    return item !== null;\n  });\n  var lastItemReached = !state.get('hasMore') || lastReadId === '0' || lastItem && compareId(lastItem.get('id'), lastReadId) <= 0;\n  return !(isTabVisible && (ignoreScroll || isOnTop) && isMounted && lastItemReached);\n};\n\nvar recountUnread = function recountUnread(state, last_read_id) {\n  return state.withMutations(function (mutable) {\n    if (compareId(last_read_id, mutable.get('lastReadId')) > 0) {\n      mutable.set('lastReadId', last_read_id);\n    }\n\n    if (compareId(last_read_id, mutable.get('readMarkerId')) > 0) {\n      mutable.set('readMarkerId', last_read_id);\n    }\n\n    if (state.get('unread') > 0 || shouldCountUnreadNotifications(state)) {\n      mutable.set('unread', mutable.get('pendingItems').count(function (item) {\n        return item !== null;\n      }) + mutable.get('items').count(function (item) {\n        return item && compareId(item.get('id'), last_read_id) > 0;\n      }));\n    }\n  });\n};\n\nexport default function notifications(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case MARKERS_FETCH_SUCCESS:\n      return action.markers.notifications ? recountUnread(state, action.markers.notifications.last_read_id) : state;\n\n    case NOTIFICATIONS_MOUNT:\n      return updateMounted(state);\n\n    case NOTIFICATIONS_UNMOUNT:\n      return state.update('mounted', function (count) {\n        return count - 1;\n      });\n\n    case APP_FOCUS:\n      return updateVisibility(state, true);\n\n    case APP_UNFOCUS:\n      return updateVisibility(state, false);\n\n    case NOTIFICATIONS_LOAD_PENDING:\n      return state.update('items', function (list) {\n        return state.get('pendingItems').concat(list.take(40));\n      }).set('pendingItems', ImmutableList()).set('unread', 0);\n\n    case NOTIFICATIONS_EXPAND_REQUEST:\n      return state.set('isLoading', true);\n\n    case NOTIFICATIONS_EXPAND_FAIL:\n      return state.set('isLoading', false);\n\n    case NOTIFICATIONS_FILTER_SET:\n      return state.set('items', ImmutableList()).set('pendingItems', ImmutableList()).set('hasMore', true);\n\n    case NOTIFICATIONS_SCROLL_TOP:\n      return updateTop(state, action.top);\n\n    case NOTIFICATIONS_UPDATE:\n      return normalizeNotification(state, action.notification, action.usePendingItems);\n\n    case NOTIFICATIONS_EXPAND_SUCCESS:\n      return expandNormalizedNotifications(state, action.notifications, action.next, action.isLoadingRecent, action.usePendingItems);\n\n    case ACCOUNT_BLOCK_SUCCESS:\n      return filterNotifications(state, [action.relationship.id]);\n\n    case ACCOUNT_MUTE_SUCCESS:\n      return action.relationship.muting_notifications ? filterNotifications(state, [action.relationship.id]) : state;\n\n    case DOMAIN_BLOCK_SUCCESS:\n      return filterNotifications(state, action.accounts);\n\n    case FOLLOW_REQUEST_AUTHORIZE_SUCCESS:\n    case FOLLOW_REQUEST_REJECT_SUCCESS:\n      return filterNotifications(state, [action.id], 'follow_request');\n\n    case ACCOUNT_MUTE_SUCCESS:\n      return action.relationship.muting_notifications ? filterNotifications(state, [action.relationship.id]) : state;\n\n    case NOTIFICATIONS_CLEAR:\n      return state.set('items', ImmutableList()).set('pendingItems', ImmutableList()).set('hasMore', false);\n\n    case TIMELINE_DELETE:\n      return deleteByStatus(state, action.id);\n\n    case TIMELINE_DISCONNECT:\n      return action.timeline === 'home' ? state.update(action.usePendingItems ? 'pendingItems' : 'items', function (items) {\n        return items.first() ? items.unshift(null) : items;\n      }) : state;\n\n    case NOTIFICATIONS_MARK_AS_READ:\n      var lastNotification = state.get('items').find(function (item) {\n        return item !== null;\n      });\n      return lastNotification ? recountUnread(state, lastNotification.get('id')) : state;\n\n    case NOTIFICATIONS_SET_BROWSER_SUPPORT:\n      return state.set('browserSupport', action.value);\n\n    case NOTIFICATIONS_SET_BROWSER_PERMISSION:\n      return state.set('browserPermission', action.value);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/notifications.js"],"names":["NOTIFICATIONS_UPDATE","NOTIFICATIONS_EXPAND_SUCCESS","NOTIFICATIONS_EXPAND_REQUEST","NOTIFICATIONS_EXPAND_FAIL","NOTIFICATIONS_FILTER_SET","NOTIFICATIONS_CLEAR","NOTIFICATIONS_SCROLL_TOP","NOTIFICATIONS_LOAD_PENDING","NOTIFICATIONS_MOUNT","NOTIFICATIONS_UNMOUNT","NOTIFICATIONS_MARK_AS_READ","NOTIFICATIONS_SET_BROWSER_SUPPORT","NOTIFICATIONS_SET_BROWSER_PERMISSION","ACCOUNT_BLOCK_SUCCESS","ACCOUNT_MUTE_SUCCESS","FOLLOW_REQUEST_AUTHORIZE_SUCCESS","FOLLOW_REQUEST_REJECT_SUCCESS","MARKERS_FETCH_SUCCESS","APP_FOCUS","APP_UNFOCUS","DOMAIN_BLOCK_SUCCESS","TIMELINE_DELETE","TIMELINE_DISCONNECT","Map","ImmutableMap","List","ImmutableList","compareId","initialState","pendingItems","items","hasMore","top","mounted","unread","lastReadId","readMarkerId","isTabVisible","isLoading","browserSupport","browserPermission","notificationToMap","notification","id","type","account","created_at","status","normalizeNotification","state","usePendingItems","get","isEmpty","update","list","unshift","shouldCountUnreadNotifications","set","size","take","expandNormalizedNotifications","notifications","next","isLoadingRecent","forEach","n","i","withMutations","mutable","lastIndex","findLastIndex","item","last","firstIndex","first","concat","skip","count","mostRecent","find","filterNotifications","accountIds","helper","filterNot","includes","undefined","clearUnread","lastNotification","updateTop","deleteByStatus","statusId","deletedUnread","filter","updateMounted","updateVisibility","visibility","ignoreScroll","isOnTop","isMounted","lastItem","findLast","lastItemReached","recountUnread","last_read_id","action","markers","relationship","muting_notifications","accounts","timeline","value"],"mappings":"AAAA,SACEA,oBADF,EAEEC,4BAFF,EAGEC,4BAHF,EAIEC,yBAJF,EAKEC,wBALF,EAMEC,mBANF,EAOEC,wBAPF,EAQEC,0BARF,EASEC,mBATF,EAUEC,qBAVF,EAWEC,0BAXF,EAYEC,iCAZF,EAaEC,oCAbF,QAcO,0BAdP;AAeA,SACEC,qBADF,EAEEC,oBAFF,EAGEC,gCAHF,EAIEC,6BAJF,QAKO,qBALP;AAMA,SACEC,qBADF,QAEO,oBAFP;AAGA,SACEC,SADF,EAEEC,WAFF,QAGO,gBAHP;AAIA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,sBAArD;AACA,SAASC,GAAG,IAAIC,YAAhB,EAA8BC,IAAI,IAAIC,aAAtC,QAA2D,WAA3D;AACA,OAAOC,SAAP,MAAsB,eAAtB;AAEA,IAAMC,YAAY,GAAGJ,YAAY,CAAC;AAChCK,EAAAA,YAAY,EAAEH,aAAa,EADK;AAEhCI,EAAAA,KAAK,EAAEJ,aAAa,EAFY;AAGhCK,EAAAA,OAAO,EAAE,IAHuB;AAIhCC,EAAAA,GAAG,EAAE,KAJ2B;AAKhCC,EAAAA,OAAO,EAAE,CALuB;AAMhCC,EAAAA,MAAM,EAAE,CANwB;AAOhCC,EAAAA,UAAU,EAAE,GAPoB;AAQhCC,EAAAA,YAAY,EAAE,GARkB;AAShCC,EAAAA,YAAY,EAAE,IATkB;AAUhCC,EAAAA,SAAS,EAAE,KAVqB;AAWhCC,EAAAA,cAAc,EAAE,KAXgB;AAYhCC,EAAAA,iBAAiB,EAAE;AAZa,CAAD,CAAjC;;AAeA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,YAAY;AAAA,SAAIlB,YAAY,CAAC;AACrDmB,IAAAA,EAAE,EAAED,YAAY,CAACC,EADoC;AAErDC,IAAAA,IAAI,EAAEF,YAAY,CAACE,IAFkC;AAGrDC,IAAAA,OAAO,EAAEH,YAAY,CAACG,OAAb,CAAqBF,EAHuB;AAIrDG,IAAAA,UAAU,EAAEJ,YAAY,CAACI,UAJ4B;AAKrDC,IAAAA,MAAM,EAAEL,YAAY,CAACK,MAAb,GAAsBL,YAAY,CAACK,MAAb,CAAoBJ,EAA1C,GAA+C;AALF,GAAD,CAAhB;AAAA,CAAtC;;AAQA,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAQP,YAAR,EAAsBQ,eAAtB,EAA0C;AACtE,MAAMlB,GAAG,GAAGiB,KAAK,CAACE,GAAN,CAAU,KAAV,CAAZ;;AAEA,MAAID,eAAe,IAAI,CAACD,KAAK,CAACE,GAAN,CAAU,cAAV,EAA0BC,OAA1B,EAAxB,EAA6D;AAC3D,WAAOH,KAAK,CAACI,MAAN,CAAa,cAAb,EAA6B,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,OAAL,CAAad,iBAAiB,CAACC,YAAD,CAA9B,CAAJ;AAAA,KAAjC,EAAoFW,MAApF,CAA2F,QAA3F,EAAqG,UAAAnB,MAAM;AAAA,aAAIA,MAAM,GAAG,CAAb;AAAA,KAA3G,CAAP;AACD;;AAED,MAAIsB,8BAA8B,CAACP,KAAD,CAAlC,EAA2C;AACzCA,IAAAA,KAAK,GAAGA,KAAK,CAACI,MAAN,CAAa,QAAb,EAAuB,UAAAnB,MAAM;AAAA,aAAIA,MAAM,GAAG,CAAb;AAAA,KAA7B,CAAR;AACD,GAFD,MAEO;AACLe,IAAAA,KAAK,GAAGA,KAAK,CAACQ,GAAN,CAAU,YAAV,EAAwBf,YAAY,CAACC,EAArC,CAAR;AACD;;AAED,SAAOM,KAAK,CAACI,MAAN,CAAa,OAAb,EAAsB,UAAAC,IAAI,EAAI;AACnC,QAAItB,GAAG,IAAIsB,IAAI,CAACI,IAAL,GAAY,EAAvB,EAA2B;AACzBJ,MAAAA,IAAI,GAAGA,IAAI,CAACK,IAAL,CAAU,EAAV,CAAP;AACD;;AAED,WAAOL,IAAI,CAACC,OAAL,CAAad,iBAAiB,CAACC,YAAD,CAA9B,CAAP;AACD,GANM,CAAP;AAOD,CApBD;;AAsBA,IAAMkB,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACX,KAAD,EAAQY,aAAR,EAAuBC,IAAvB,EAA6BC,eAA7B,EAA8Cb,eAA9C,EAAkE;AACtG,MAAMf,UAAU,GAAGc,KAAK,CAACE,GAAN,CAAU,YAAV,CAAnB;AACA,MAAIrB,KAAK,GAAGJ,aAAa,EAAzB;AAEAmC,EAAAA,aAAa,CAACG,OAAd,CAAsB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC9BpC,IAAAA,KAAK,GAAGA,KAAK,CAAC2B,GAAN,CAAUS,CAAV,EAAazB,iBAAiB,CAACwB,CAAD,CAA9B,CAAR;AACD,GAFD;AAIA,SAAOhB,KAAK,CAACkB,aAAN,CAAoB,UAAAC,OAAO,EAAI;AACpC,QAAI,CAACtC,KAAK,CAACsB,OAAN,EAAL,EAAsB;AACpBF,MAAAA,eAAe,GAAGa,eAAe,KAAKb,eAAe,IAAI,CAACkB,OAAO,CAACjB,GAAR,CAAY,cAAZ,EAA4BC,OAA5B,EAAzB,CAAjC;AAEAgB,MAAAA,OAAO,CAACf,MAAR,CAAeH,eAAe,GAAG,cAAH,GAAoB,OAAlD,EAA2D,UAAAI,IAAI,EAAI;AACjE,YAAMe,SAAS,GAAG,IAAIf,IAAI,CAACgB,aAAL,CACpB,UAAAC,IAAI;AAAA,iBAAIA,IAAI,KAAK,IAAT,KAAkB5C,SAAS,CAAC4C,IAAI,CAACpB,GAAL,CAAS,IAAT,CAAD,EAAiBrB,KAAK,CAAC0C,IAAN,GAAarB,GAAb,CAAiB,IAAjB,CAAjB,CAAT,GAAoD,CAApD,IAAyDoB,IAAI,CAACpB,GAAL,CAAS,IAAT,MAAmBrB,KAAK,CAAC0C,IAAN,GAAarB,GAAb,CAAiB,IAAjB,CAA9F,CAAJ;AAAA,SADgB,CAAtB;AAIA,YAAMsB,UAAU,GAAG,IAAInB,IAAI,CAACK,IAAL,CAAUU,SAAV,EAAqBC,aAArB,CACrB,UAAAC,IAAI;AAAA,iBAAIA,IAAI,KAAK,IAAT,IAAiB5C,SAAS,CAAC4C,IAAI,CAACpB,GAAL,CAAS,IAAT,CAAD,EAAiBrB,KAAK,CAAC4C,KAAN,GAAcvB,GAAd,CAAkB,IAAlB,CAAjB,CAAT,GAAqD,CAA1E;AAAA,SADiB,CAAvB;AAIA,eAAOG,IAAI,CAACK,IAAL,CAAUc,UAAV,EAAsBE,MAAtB,CAA6B7C,KAA7B,EAAoCwB,IAAI,CAACsB,IAAL,CAAUP,SAAV,CAApC,CAAP;AACD,OAVD;AAWD;;AAED,QAAI,CAACP,IAAL,EAAW;AACTM,MAAAA,OAAO,CAACX,GAAR,CAAY,SAAZ,EAAuB,KAAvB;AACD;;AAED,QAAID,8BAA8B,CAACP,KAAD,CAAlC,EAA2C;AACzCmB,MAAAA,OAAO,CAACX,GAAR,CAAY,QAAZ,EAAsBW,OAAO,CAACjB,GAAR,CAAY,cAAZ,EAA4B0B,KAA5B,CAAkC,UAAAN,IAAI;AAAA,eAAIA,IAAI,KAAK,IAAb;AAAA,OAAtC,IAA2DH,OAAO,CAACjB,GAAR,CAAY,OAAZ,EAAqB0B,KAArB,CAA2B,UAAAN,IAAI;AAAA,eAAIA,IAAI,IAAI5C,SAAS,CAAC4C,IAAI,CAACpB,GAAL,CAAS,IAAT,CAAD,EAAiBhB,UAAjB,CAAT,GAAwC,CAApD;AAAA,OAA/B,CAAjF;AACD,KAFD,MAEO;AACL,UAAM2C,UAAU,GAAGhD,KAAK,CAACiD,IAAN,CAAW,UAAAR,IAAI;AAAA,eAAIA,IAAI,KAAK,IAAb;AAAA,OAAf,CAAnB;;AACA,UAAIO,UAAU,IAAInD,SAAS,CAACQ,UAAD,EAAa2C,UAAU,CAAC3B,GAAX,CAAe,IAAf,CAAb,CAAT,GAA8C,CAAhE,EAAmE;AACjEiB,QAAAA,OAAO,CAACX,GAAR,CAAY,YAAZ,EAA0BqB,UAAU,CAAC3B,GAAX,CAAe,IAAf,CAA1B;AACD;AACF;;AAEDiB,IAAAA,OAAO,CAACX,GAAR,CAAY,WAAZ,EAAyB,KAAzB;AACD,GA/BM,CAAP;AAgCD,CAxCD;;AA0CA,IAAMuB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAC/B,KAAD,EAAQgC,UAAR,EAAoBrC,IAApB,EAA6B;AACvD,MAAMsC,MAAM,GAAG,SAATA,MAAS,CAAA5B,IAAI;AAAA,WAAIA,IAAI,CAAC6B,SAAL,CAAe,UAAAZ,IAAI;AAAA,aAAIA,IAAI,KAAK,IAAT,IAAiBU,UAAU,CAACG,QAAX,CAAoBb,IAAI,CAACpB,GAAL,CAAS,SAAT,CAApB,CAAjB,KAA8DP,IAAI,KAAKyC,SAAT,IAAsBzC,IAAI,KAAK2B,IAAI,CAACpB,GAAL,CAAS,MAAT,CAA7F,CAAJ;AAAA,KAAnB,CAAJ;AAAA,GAAnB;;AACA,SAAOF,KAAK,CAACI,MAAN,CAAa,OAAb,EAAsB6B,MAAtB,EAA8B7B,MAA9B,CAAqC,cAArC,EAAqD6B,MAArD,CAAP;AACD,CAHD;;AAKA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACrC,KAAD,EAAW;AAC7BA,EAAAA,KAAK,GAAGA,KAAK,CAACQ,GAAN,CAAU,QAAV,EAAoBR,KAAK,CAACE,GAAN,CAAU,cAAV,EAA0BO,IAA9C,CAAR;AACA,MAAM6B,gBAAgB,GAAGtC,KAAK,CAACE,GAAN,CAAU,OAAV,EAAmB4B,IAAnB,CAAwB,UAAAR,IAAI;AAAA,WAAIA,IAAI,KAAK,IAAb;AAAA,GAA5B,CAAzB;AACA,SAAOtB,KAAK,CAACQ,GAAN,CAAU,YAAV,EAAwB8B,gBAAgB,GAAGA,gBAAgB,CAACpC,GAAjB,CAAqB,IAArB,CAAH,GAAgC,GAAxE,CAAP;AACD,CAJD;;AAMA,IAAMqC,SAAS,GAAG,SAAZA,SAAY,CAACvC,KAAD,EAAQjB,GAAR,EAAgB;AAChCiB,EAAAA,KAAK,GAAGA,KAAK,CAACQ,GAAN,CAAU,KAAV,EAAiBzB,GAAjB,CAAR;;AAEA,MAAI,CAACwB,8BAA8B,CAACP,KAAD,CAAnC,EAA4C;AAC1CA,IAAAA,KAAK,GAAGqC,WAAW,CAACrC,KAAD,CAAnB;AACD;;AAED,SAAOA,KAAP;AACD,CARD;;AAUA,IAAMwC,cAAc,GAAG,SAAjBA,cAAiB,CAACxC,KAAD,EAAQyC,QAAR,EAAqB;AAC1C,MAAMvD,UAAU,GAAGc,KAAK,CAACE,GAAN,CAAU,YAAV,CAAnB;;AAEA,MAAIK,8BAA8B,CAACP,KAAD,CAAlC,EAA2C;AACzC,QAAM0C,cAAa,GAAG1C,KAAK,CAACE,GAAN,CAAU,OAAV,EAAmByC,MAAnB,CAA0B,UAAArB,IAAI;AAAA,aAAIA,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACpB,GAAL,CAAS,QAAT,MAAuBuC,QAAxC,IAAoD/D,SAAS,CAAC4C,IAAI,CAACpB,GAAL,CAAS,IAAT,CAAD,EAAiBhB,UAAjB,CAAT,GAAwC,CAAhG;AAAA,KAA9B,CAAtB;;AACAc,IAAAA,KAAK,GAAGA,KAAK,CAACI,MAAN,CAAa,QAAb,EAAuB,UAAAnB,MAAM;AAAA,aAAIA,MAAM,GAAGyD,cAAa,CAACjC,IAA3B;AAAA,KAA7B,CAAR;AACD;;AAED,MAAMwB,MAAM,GAAG,SAATA,MAAS,CAAA5B,IAAI;AAAA,WAAIA,IAAI,CAAC6B,SAAL,CAAe,UAAAZ,IAAI;AAAA,aAAIA,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACpB,GAAL,CAAS,QAAT,MAAuBuC,QAA5C;AAAA,KAAnB,CAAJ;AAAA,GAAnB;;AACA,MAAMC,aAAa,GAAG1C,KAAK,CAACE,GAAN,CAAU,cAAV,EAA0ByC,MAA1B,CAAiC,UAAArB,IAAI;AAAA,WAAIA,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACpB,GAAL,CAAS,QAAT,MAAuBuC,QAAxC,IAAoD/D,SAAS,CAAC4C,IAAI,CAACpB,GAAL,CAAS,IAAT,CAAD,EAAiBhB,UAAjB,CAAT,GAAwC,CAAhG;AAAA,GAArC,CAAtB;AACAc,EAAAA,KAAK,GAAGA,KAAK,CAACI,MAAN,CAAa,QAAb,EAAuB,UAAAnB,MAAM;AAAA,WAAIA,MAAM,GAAGyD,aAAa,CAACjC,IAA3B;AAAA,GAA7B,CAAR;AACA,SAAOT,KAAK,CAACI,MAAN,CAAa,OAAb,EAAsB6B,MAAtB,EAA8B7B,MAA9B,CAAqC,cAArC,EAAqD6B,MAArD,CAAP;AACD,CAZD;;AAcA,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,CAAC5C,KAAD,EAAW;AAC/BA,EAAAA,KAAK,GAAGA,KAAK,CAACI,MAAN,CAAa,SAAb,EAAwB,UAAAwB,KAAK;AAAA,WAAIA,KAAK,GAAG,CAAZ;AAAA,GAA7B,CAAR;;AACA,MAAI,CAACrB,8BAA8B,CAACP,KAAD,EAAQA,KAAK,CAACE,GAAN,CAAU,SAAV,MAAyB,CAAjC,CAAnC,EAAwE;AACtEF,IAAAA,KAAK,GAAGA,KAAK,CAACQ,GAAN,CAAU,cAAV,EAA0BR,KAAK,CAACE,GAAN,CAAU,YAAV,CAA1B,CAAR;AACAF,IAAAA,KAAK,GAAGqC,WAAW,CAACrC,KAAD,CAAnB;AACD;;AACD,SAAOA,KAAP;AACD,CAPD;;AASA,IAAM6C,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC7C,KAAD,EAAQ8C,UAAR,EAAuB;AAC9C9C,EAAAA,KAAK,GAAGA,KAAK,CAACQ,GAAN,CAAU,cAAV,EAA0BsC,UAA1B,CAAR;;AACA,MAAI,CAACvC,8BAA8B,CAACP,KAAD,CAAnC,EAA4C;AAC1CA,IAAAA,KAAK,GAAGA,KAAK,CAACQ,GAAN,CAAU,cAAV,EAA0BR,KAAK,CAACE,GAAN,CAAU,YAAV,CAA1B,CAAR;AACAF,IAAAA,KAAK,GAAGqC,WAAW,CAACrC,KAAD,CAAnB;AACD;;AACD,SAAOA,KAAP;AACD,CAPD;;AASA,IAAMO,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACP,KAAD,EAAQ+C,YAAR,EAAiC;AAAA,MAAzBA,YAAyB;AAAzBA,IAAAA,YAAyB,GAAV,KAAU;AAAA;;AACtE,MAAM3D,YAAY,GAAKY,KAAK,CAACE,GAAN,CAAU,cAAV,CAAvB;AACA,MAAM8C,OAAO,GAAUhD,KAAK,CAACE,GAAN,CAAU,KAAV,CAAvB;AACA,MAAM+C,SAAS,GAAQjD,KAAK,CAACE,GAAN,CAAU,SAAV,IAAuB,CAA9C;AACA,MAAMhB,UAAU,GAAOc,KAAK,CAACE,GAAN,CAAU,YAAV,CAAvB;AACA,MAAMgD,QAAQ,GAASlD,KAAK,CAACE,GAAN,CAAU,OAAV,EAAmBiD,QAAnB,CAA4B,UAAA7B,IAAI;AAAA,WAAIA,IAAI,KAAK,IAAb;AAAA,GAAhC,CAAvB;AACA,MAAM8B,eAAe,GAAG,CAACpD,KAAK,CAACE,GAAN,CAAU,SAAV,CAAD,IAAyBhB,UAAU,KAAK,GAAxC,IAAgDgE,QAAQ,IAAIxE,SAAS,CAACwE,QAAQ,CAAChD,GAAT,CAAa,IAAb,CAAD,EAAqBhB,UAArB,CAAT,IAA6C,CAAjI;AAEA,SAAO,EAAEE,YAAY,KAAK2D,YAAY,IAAIC,OAArB,CAAZ,IAA6CC,SAA7C,IAA0DG,eAA5D,CAAP;AACD,CATD;;AAWA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACrD,KAAD,EAAQsD,YAAR,EAAyB;AAC7C,SAAOtD,KAAK,CAACkB,aAAN,CAAoB,UAAAC,OAAO,EAAI;AACpC,QAAIzC,SAAS,CAAC4E,YAAD,EAAenC,OAAO,CAACjB,GAAR,CAAY,YAAZ,CAAf,CAAT,GAAqD,CAAzD,EAA4D;AAC1DiB,MAAAA,OAAO,CAACX,GAAR,CAAY,YAAZ,EAA0B8C,YAA1B;AACD;;AAED,QAAI5E,SAAS,CAAC4E,YAAD,EAAenC,OAAO,CAACjB,GAAR,CAAY,cAAZ,CAAf,CAAT,GAAuD,CAA3D,EAA8D;AAC5DiB,MAAAA,OAAO,CAACX,GAAR,CAAY,cAAZ,EAA4B8C,YAA5B;AACD;;AAED,QAAItD,KAAK,CAACE,GAAN,CAAU,QAAV,IAAsB,CAAtB,IAA2BK,8BAA8B,CAACP,KAAD,CAA7D,EAAsE;AACpEmB,MAAAA,OAAO,CAACX,GAAR,CAAY,QAAZ,EAAsBW,OAAO,CAACjB,GAAR,CAAY,cAAZ,EAA4B0B,KAA5B,CAAkC,UAAAN,IAAI;AAAA,eAAIA,IAAI,KAAK,IAAb;AAAA,OAAtC,IAA2DH,OAAO,CAACjB,GAAR,CAAY,OAAZ,EAAqB0B,KAArB,CAA2B,UAAAN,IAAI;AAAA,eAAIA,IAAI,IAAI5C,SAAS,CAAC4C,IAAI,CAACpB,GAAL,CAAS,IAAT,CAAD,EAAiBoD,YAAjB,CAAT,GAA0C,CAAtD;AAAA,OAA/B,CAAjF;AACD;AACF,GAZM,CAAP;AAaD,CAdD;;AAgBA,eAAe,SAAS1C,aAAT,CAAuBZ,KAAvB,EAA6CuD,MAA7C,EAAqD;AAAA,MAA9BvD,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBrB,YAAsB;AAAA;;AAClE,UAAO4E,MAAM,CAAC5D,IAAd;AACA,SAAK3B,qBAAL;AACE,aAAOuF,MAAM,CAACC,OAAP,CAAe5C,aAAf,GAA+ByC,aAAa,CAACrD,KAAD,EAAQuD,MAAM,CAACC,OAAP,CAAe5C,aAAf,CAA6B0C,YAArC,CAA5C,GAAiGtD,KAAxG;;AACF,SAAKzC,mBAAL;AACE,aAAOqF,aAAa,CAAC5C,KAAD,CAApB;;AACF,SAAKxC,qBAAL;AACE,aAAOwC,KAAK,CAACI,MAAN,CAAa,SAAb,EAAwB,UAAAwB,KAAK;AAAA,eAAIA,KAAK,GAAG,CAAZ;AAAA,OAA7B,CAAP;;AACF,SAAK3D,SAAL;AACE,aAAO4E,gBAAgB,CAAC7C,KAAD,EAAQ,IAAR,CAAvB;;AACF,SAAK9B,WAAL;AACE,aAAO2E,gBAAgB,CAAC7C,KAAD,EAAQ,KAAR,CAAvB;;AACF,SAAK1C,0BAAL;AACE,aAAO0C,KAAK,CAACI,MAAN,CAAa,OAAb,EAAsB,UAAAC,IAAI;AAAA,eAAIL,KAAK,CAACE,GAAN,CAAU,cAAV,EAA0BwB,MAA1B,CAAiCrB,IAAI,CAACK,IAAL,CAAU,EAAV,CAAjC,CAAJ;AAAA,OAA1B,EAA+EF,GAA/E,CAAmF,cAAnF,EAAmG/B,aAAa,EAAhH,EAAoH+B,GAApH,CAAwH,QAAxH,EAAkI,CAAlI,CAAP;;AACF,SAAKvD,4BAAL;AACE,aAAO+C,KAAK,CAACQ,GAAN,CAAU,WAAV,EAAuB,IAAvB,CAAP;;AACF,SAAKtD,yBAAL;AACE,aAAO8C,KAAK,CAACQ,GAAN,CAAU,WAAV,EAAuB,KAAvB,CAAP;;AACF,SAAKrD,wBAAL;AACE,aAAO6C,KAAK,CAACQ,GAAN,CAAU,OAAV,EAAmB/B,aAAa,EAAhC,EAAoC+B,GAApC,CAAwC,cAAxC,EAAwD/B,aAAa,EAArE,EAAyE+B,GAAzE,CAA6E,SAA7E,EAAwF,IAAxF,CAAP;;AACF,SAAKnD,wBAAL;AACE,aAAOkF,SAAS,CAACvC,KAAD,EAAQuD,MAAM,CAACxE,GAAf,CAAhB;;AACF,SAAKhC,oBAAL;AACE,aAAOgD,qBAAqB,CAACC,KAAD,EAAQuD,MAAM,CAAC9D,YAAf,EAA6B8D,MAAM,CAACtD,eAApC,CAA5B;;AACF,SAAKjD,4BAAL;AACE,aAAO2D,6BAA6B,CAACX,KAAD,EAAQuD,MAAM,CAAC3C,aAAf,EAA8B2C,MAAM,CAAC1C,IAArC,EAA2C0C,MAAM,CAACzC,eAAlD,EAAmEyC,MAAM,CAACtD,eAA1E,CAApC;;AACF,SAAKrC,qBAAL;AACE,aAAOmE,mBAAmB,CAAC/B,KAAD,EAAQ,CAACuD,MAAM,CAACE,YAAP,CAAoB/D,EAArB,CAAR,CAA1B;;AACF,SAAK7B,oBAAL;AACE,aAAO0F,MAAM,CAACE,YAAP,CAAoBC,oBAApB,GAA2C3B,mBAAmB,CAAC/B,KAAD,EAAQ,CAACuD,MAAM,CAACE,YAAP,CAAoB/D,EAArB,CAAR,CAA9D,GAAkGM,KAAzG;;AACF,SAAK7B,oBAAL;AACE,aAAO4D,mBAAmB,CAAC/B,KAAD,EAAQuD,MAAM,CAACI,QAAf,CAA1B;;AACF,SAAK7F,gCAAL;AACA,SAAKC,6BAAL;AACE,aAAOgE,mBAAmB,CAAC/B,KAAD,EAAQ,CAACuD,MAAM,CAAC7D,EAAR,CAAR,EAAqB,gBAArB,CAA1B;;AACF,SAAK7B,oBAAL;AACE,aAAO0F,MAAM,CAACE,YAAP,CAAoBC,oBAApB,GAA2C3B,mBAAmB,CAAC/B,KAAD,EAAQ,CAACuD,MAAM,CAACE,YAAP,CAAoB/D,EAArB,CAAR,CAA9D,GAAkGM,KAAzG;;AACF,SAAK5C,mBAAL;AACE,aAAO4C,KAAK,CAACQ,GAAN,CAAU,OAAV,EAAmB/B,aAAa,EAAhC,EAAoC+B,GAApC,CAAwC,cAAxC,EAAwD/B,aAAa,EAArE,EAAyE+B,GAAzE,CAA6E,SAA7E,EAAwF,KAAxF,CAAP;;AACF,SAAKpC,eAAL;AACE,aAAOoE,cAAc,CAACxC,KAAD,EAAQuD,MAAM,CAAC7D,EAAf,CAArB;;AACF,SAAKrB,mBAAL;AACE,aAAOkF,MAAM,CAACK,QAAP,KAAoB,MAApB,GACL5D,KAAK,CAACI,MAAN,CAAamD,MAAM,CAACtD,eAAP,GAAyB,cAAzB,GAA0C,OAAvD,EAAgE,UAAApB,KAAK;AAAA,eAAIA,KAAK,CAAC4C,KAAN,KAAgB5C,KAAK,CAACyB,OAAN,CAAc,IAAd,CAAhB,GAAsCzB,KAA1C;AAAA,OAArE,CADK,GAELmB,KAFF;;AAGF,SAAKvC,0BAAL;AACE,UAAM6E,gBAAgB,GAAGtC,KAAK,CAACE,GAAN,CAAU,OAAV,EAAmB4B,IAAnB,CAAwB,UAAAR,IAAI;AAAA,eAAIA,IAAI,KAAK,IAAb;AAAA,OAA5B,CAAzB;AACA,aAAOgB,gBAAgB,GAAGe,aAAa,CAACrD,KAAD,EAAQsC,gBAAgB,CAACpC,GAAjB,CAAqB,IAArB,CAAR,CAAhB,GAAsDF,KAA7E;;AACF,SAAKtC,iCAAL;AACE,aAAOsC,KAAK,CAACQ,GAAN,CAAU,gBAAV,EAA4B+C,MAAM,CAACM,KAAnC,CAAP;;AACF,SAAKlG,oCAAL;AACE,aAAOqC,KAAK,CAACQ,GAAN,CAAU,mBAAV,EAA+B+C,MAAM,CAACM,KAAtC,CAAP;;AACF;AACE,aAAO7D,KAAP;AApDF;AAsDD;AAAA","sourcesContent":["import {\n  NOTIFICATIONS_UPDATE,\n  NOTIFICATIONS_EXPAND_SUCCESS,\n  NOTIFICATIONS_EXPAND_REQUEST,\n  NOTIFICATIONS_EXPAND_FAIL,\n  NOTIFICATIONS_FILTER_SET,\n  NOTIFICATIONS_CLEAR,\n  NOTIFICATIONS_SCROLL_TOP,\n  NOTIFICATIONS_LOAD_PENDING,\n  NOTIFICATIONS_MOUNT,\n  NOTIFICATIONS_UNMOUNT,\n  NOTIFICATIONS_MARK_AS_READ,\n  NOTIFICATIONS_SET_BROWSER_SUPPORT,\n  NOTIFICATIONS_SET_BROWSER_PERMISSION,\n} from '../actions/notifications';\nimport {\n  ACCOUNT_BLOCK_SUCCESS,\n  ACCOUNT_MUTE_SUCCESS,\n  FOLLOW_REQUEST_AUTHORIZE_SUCCESS,\n  FOLLOW_REQUEST_REJECT_SUCCESS,\n} from '../actions/accounts';\nimport {\n  MARKERS_FETCH_SUCCESS,\n} from '../actions/markers';\nimport {\n  APP_FOCUS,\n  APP_UNFOCUS,\n} from '../actions/app';\nimport { DOMAIN_BLOCK_SUCCESS } from 'mastodon/actions/domain_blocks';\nimport { TIMELINE_DELETE, TIMELINE_DISCONNECT } from '../actions/timelines';\nimport { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport compareId from '../compare_id';\n\nconst initialState = ImmutableMap({\n  pendingItems: ImmutableList(),\n  items: ImmutableList(),\n  hasMore: true,\n  top: false,\n  mounted: 0,\n  unread: 0,\n  lastReadId: '0',\n  readMarkerId: '0',\n  isTabVisible: true,\n  isLoading: false,\n  browserSupport: false,\n  browserPermission: 'default',\n});\n\nconst notificationToMap = notification => ImmutableMap({\n  id: notification.id,\n  type: notification.type,\n  account: notification.account.id,\n  created_at: notification.created_at,\n  status: notification.status ? notification.status.id : null,\n});\n\nconst normalizeNotification = (state, notification, usePendingItems) => {\n  const top = state.get('top');\n\n  if (usePendingItems || !state.get('pendingItems').isEmpty()) {\n    return state.update('pendingItems', list => list.unshift(notificationToMap(notification))).update('unread', unread => unread + 1);\n  }\n\n  if (shouldCountUnreadNotifications(state)) {\n    state = state.update('unread', unread => unread + 1);\n  } else {\n    state = state.set('lastReadId', notification.id);\n  }\n\n  return state.update('items', list => {\n    if (top && list.size > 40) {\n      list = list.take(20);\n    }\n\n    return list.unshift(notificationToMap(notification));\n  });\n};\n\nconst expandNormalizedNotifications = (state, notifications, next, isLoadingRecent, usePendingItems) => {\n  const lastReadId = state.get('lastReadId');\n  let items = ImmutableList();\n\n  notifications.forEach((n, i) => {\n    items = items.set(i, notificationToMap(n));\n  });\n\n  return state.withMutations(mutable => {\n    if (!items.isEmpty()) {\n      usePendingItems = isLoadingRecent && (usePendingItems || !mutable.get('pendingItems').isEmpty());\n\n      mutable.update(usePendingItems ? 'pendingItems' : 'items', list => {\n        const lastIndex = 1 + list.findLastIndex(\n          item => item !== null && (compareId(item.get('id'), items.last().get('id')) > 0 || item.get('id') === items.last().get('id')),\n        );\n\n        const firstIndex = 1 + list.take(lastIndex).findLastIndex(\n          item => item !== null && compareId(item.get('id'), items.first().get('id')) > 0,\n        );\n\n        return list.take(firstIndex).concat(items, list.skip(lastIndex));\n      });\n    }\n\n    if (!next) {\n      mutable.set('hasMore', false);\n    }\n\n    if (shouldCountUnreadNotifications(state)) {\n      mutable.set('unread', mutable.get('pendingItems').count(item => item !== null) + mutable.get('items').count(item => item && compareId(item.get('id'), lastReadId) > 0));\n    } else {\n      const mostRecent = items.find(item => item !== null);\n      if (mostRecent && compareId(lastReadId, mostRecent.get('id')) < 0) {\n        mutable.set('lastReadId', mostRecent.get('id'));\n      }\n    }\n\n    mutable.set('isLoading', false);\n  });\n};\n\nconst filterNotifications = (state, accountIds, type) => {\n  const helper = list => list.filterNot(item => item !== null && accountIds.includes(item.get('account')) && (type === undefined || type === item.get('type')));\n  return state.update('items', helper).update('pendingItems', helper);\n};\n\nconst clearUnread = (state) => {\n  state = state.set('unread', state.get('pendingItems').size);\n  const lastNotification = state.get('items').find(item => item !== null);\n  return state.set('lastReadId', lastNotification ? lastNotification.get('id') : '0');\n};\n\nconst updateTop = (state, top) => {\n  state = state.set('top', top);\n\n  if (!shouldCountUnreadNotifications(state)) {\n    state = clearUnread(state);\n  }\n\n  return state;\n};\n\nconst deleteByStatus = (state, statusId) => {\n  const lastReadId = state.get('lastReadId');\n\n  if (shouldCountUnreadNotifications(state)) {\n    const deletedUnread = state.get('items').filter(item => item !== null && item.get('status') === statusId && compareId(item.get('id'), lastReadId) > 0);\n    state = state.update('unread', unread => unread - deletedUnread.size);\n  }\n\n  const helper = list => list.filterNot(item => item !== null && item.get('status') === statusId);\n  const deletedUnread = state.get('pendingItems').filter(item => item !== null && item.get('status') === statusId && compareId(item.get('id'), lastReadId) > 0);\n  state = state.update('unread', unread => unread - deletedUnread.size);\n  return state.update('items', helper).update('pendingItems', helper);\n};\n\nconst updateMounted = (state) => {\n  state = state.update('mounted', count => count + 1);\n  if (!shouldCountUnreadNotifications(state, state.get('mounted') === 1)) {\n    state = state.set('readMarkerId', state.get('lastReadId'));\n    state = clearUnread(state);\n  }\n  return state;\n};\n\nconst updateVisibility = (state, visibility) => {\n  state = state.set('isTabVisible', visibility);\n  if (!shouldCountUnreadNotifications(state)) {\n    state = state.set('readMarkerId', state.get('lastReadId'));\n    state = clearUnread(state);\n  }\n  return state;\n};\n\nconst shouldCountUnreadNotifications = (state, ignoreScroll = false) => {\n  const isTabVisible   = state.get('isTabVisible');\n  const isOnTop        = state.get('top');\n  const isMounted      = state.get('mounted') > 0;\n  const lastReadId     = state.get('lastReadId');\n  const lastItem       = state.get('items').findLast(item => item !== null);\n  const lastItemReached = !state.get('hasMore') || lastReadId === '0' || (lastItem && compareId(lastItem.get('id'), lastReadId) <= 0);\n\n  return !(isTabVisible && (ignoreScroll || isOnTop) && isMounted && lastItemReached);\n};\n\nconst recountUnread = (state, last_read_id) => {\n  return state.withMutations(mutable => {\n    if (compareId(last_read_id, mutable.get('lastReadId')) > 0) {\n      mutable.set('lastReadId', last_read_id);\n    }\n\n    if (compareId(last_read_id, mutable.get('readMarkerId')) > 0) {\n      mutable.set('readMarkerId', last_read_id);\n    }\n\n    if (state.get('unread') > 0 || shouldCountUnreadNotifications(state)) {\n      mutable.set('unread', mutable.get('pendingItems').count(item => item !== null) + mutable.get('items').count(item => item && compareId(item.get('id'), last_read_id) > 0));\n    }\n  });\n};\n\nexport default function notifications(state = initialState, action) {\n  switch(action.type) {\n  case MARKERS_FETCH_SUCCESS:\n    return action.markers.notifications ? recountUnread(state, action.markers.notifications.last_read_id) : state;\n  case NOTIFICATIONS_MOUNT:\n    return updateMounted(state);\n  case NOTIFICATIONS_UNMOUNT:\n    return state.update('mounted', count => count - 1);\n  case APP_FOCUS:\n    return updateVisibility(state, true);\n  case APP_UNFOCUS:\n    return updateVisibility(state, false);\n  case NOTIFICATIONS_LOAD_PENDING:\n    return state.update('items', list => state.get('pendingItems').concat(list.take(40))).set('pendingItems', ImmutableList()).set('unread', 0);\n  case NOTIFICATIONS_EXPAND_REQUEST:\n    return state.set('isLoading', true);\n  case NOTIFICATIONS_EXPAND_FAIL:\n    return state.set('isLoading', false);\n  case NOTIFICATIONS_FILTER_SET:\n    return state.set('items', ImmutableList()).set('pendingItems', ImmutableList()).set('hasMore', true);\n  case NOTIFICATIONS_SCROLL_TOP:\n    return updateTop(state, action.top);\n  case NOTIFICATIONS_UPDATE:\n    return normalizeNotification(state, action.notification, action.usePendingItems);\n  case NOTIFICATIONS_EXPAND_SUCCESS:\n    return expandNormalizedNotifications(state, action.notifications, action.next, action.isLoadingRecent, action.usePendingItems);\n  case ACCOUNT_BLOCK_SUCCESS:\n    return filterNotifications(state, [action.relationship.id]);\n  case ACCOUNT_MUTE_SUCCESS:\n    return action.relationship.muting_notifications ? filterNotifications(state, [action.relationship.id]) : state;\n  case DOMAIN_BLOCK_SUCCESS:\n    return filterNotifications(state, action.accounts);\n  case FOLLOW_REQUEST_AUTHORIZE_SUCCESS:\n  case FOLLOW_REQUEST_REJECT_SUCCESS:\n    return filterNotifications(state, [action.id], 'follow_request');\n  case ACCOUNT_MUTE_SUCCESS:\n    return action.relationship.muting_notifications ? filterNotifications(state, [action.relationship.id]) : state;\n  case NOTIFICATIONS_CLEAR:\n    return state.set('items', ImmutableList()).set('pendingItems', ImmutableList()).set('hasMore', false);\n  case TIMELINE_DELETE:\n    return deleteByStatus(state, action.id);\n  case TIMELINE_DISCONNECT:\n    return action.timeline === 'home' ?\n      state.update(action.usePendingItems ? 'pendingItems' : 'items', items => items.first() ? items.unshift(null) : items) :\n      state;\n  case NOTIFICATIONS_MARK_AS_READ:\n    const lastNotification = state.get('items').find(item => item !== null);\n    return lastNotification ? recountUnread(state, lastNotification.get('id')) : state;\n  case NOTIFICATIONS_SET_BROWSER_SUPPORT:\n    return state.set('browserSupport', action.value);\n  case NOTIFICATIONS_SET_BROWSER_PERMISSION:\n    return state.set('browserPermission', action.value);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}