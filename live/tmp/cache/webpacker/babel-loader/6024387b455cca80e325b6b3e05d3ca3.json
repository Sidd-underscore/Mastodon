{"ast":null,"code":"import { connect } from 'react-redux';\nimport Conversation from '../components/conversation';\nimport { markConversationRead, deleteConversation } from 'mastodon/actions/conversations';\nimport { makeGetStatus } from 'mastodon/selectors';\nimport { replyCompose } from 'mastodon/actions/compose';\nimport { openModal } from 'mastodon/actions/modal';\nimport { muteStatus, unmuteStatus, hideStatus, revealStatus } from 'mastodon/actions/statuses';\nimport { defineMessages, injectIntl } from 'react-intl';\nvar messages = defineMessages({\n  replyConfirm: {\n    \"id\": \"confirmations.reply.confirm\",\n    \"defaultMessage\": \"Reply\"\n  },\n  replyMessage: {\n    \"id\": \"confirmations.reply.message\",\n    \"defaultMessage\": \"Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps() {\n  var getStatus = makeGetStatus();\n  return function (state, _ref) {\n    var conversationId = _ref.conversationId;\n    var conversation = state.getIn(['conversations', 'items']).find(function (x) {\n      return x.get('id') === conversationId;\n    });\n    var lastStatusId = conversation.get('last_status', null);\n    return {\n      accounts: conversation.get('accounts').map(function (accountId) {\n        return state.getIn(['accounts', accountId], null);\n      }),\n      unread: conversation.get('unread'),\n      lastStatus: lastStatusId && getStatus(state, {\n        id: lastStatusId\n      })\n    };\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref2) {\n  var intl = _ref2.intl,\n      conversationId = _ref2.conversationId;\n  return {\n    markRead() {\n      dispatch(markConversationRead(conversationId));\n    },\n\n    reply(status, router) {\n      dispatch(function (_, getState) {\n        var state = getState();\n\n        if (state.getIn(['compose', 'text']).trim().length !== 0) {\n          dispatch(openModal('CONFIRM', {\n            message: intl.formatMessage(messages.replyMessage),\n            confirm: intl.formatMessage(messages.replyConfirm),\n            onConfirm: function onConfirm() {\n              return dispatch(replyCompose(status, router));\n            }\n          }));\n        } else {\n          dispatch(replyCompose(status, router));\n        }\n      });\n    },\n\n    delete() {\n      dispatch(deleteConversation(conversationId));\n    },\n\n    onMute(status) {\n      if (status.get('muted')) {\n        dispatch(unmuteStatus(status.get('id')));\n      } else {\n        dispatch(muteStatus(status.get('id')));\n      }\n    },\n\n    onToggleHidden(status) {\n      if (status.get('hidden')) {\n        dispatch(revealStatus(status.get('id')));\n      } else {\n        dispatch(hideStatus(status.get('id')));\n      }\n    }\n\n  };\n};\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Conversation));","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/direct_timeline/containers/conversation_container.js"],"names":["connect","Conversation","markConversationRead","deleteConversation","makeGetStatus","replyCompose","openModal","muteStatus","unmuteStatus","hideStatus","revealStatus","defineMessages","injectIntl","messages","replyConfirm","replyMessage","mapStateToProps","getStatus","state","conversationId","conversation","getIn","find","x","get","lastStatusId","accounts","map","accountId","unread","lastStatus","id","mapDispatchToProps","dispatch","intl","markRead","reply","status","router","_","getState","trim","length","message","formatMessage","confirm","onConfirm","delete","onMute","onToggleHidden"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,gCAAzD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,UAAnC,EAA+CC,YAA/C,QAAmE,2BAAnE;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,YAA3C;AAEA,IAAMC,QAAQ,GAAGF,cAAc,CAAC;AAC9BG,EAAAA,YAAY;AAAA;AAAA;AAAA,GADkB;AAE9BC,EAAAA,YAAY;AAAA;AAAA;AAAA;AAFkB,CAAD,CAA/B;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAMC,SAAS,GAAGb,aAAa,EAA/B;AAEA,SAAO,UAACc,KAAD,QAA+B;AAAA,QAArBC,cAAqB,QAArBA,cAAqB;AACpC,QAAMC,YAAY,GAAGF,KAAK,CAACG,KAAN,CAAY,CAAC,eAAD,EAAkB,OAAlB,CAAZ,EAAwCC,IAAxC,CAA6C,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,GAAF,CAAM,IAAN,MAAgBL,cAApB;AAAA,KAA9C,CAArB;AACA,QAAMM,YAAY,GAAGL,YAAY,CAACI,GAAb,CAAiB,aAAjB,EAAgC,IAAhC,CAArB;AAEA,WAAO;AACLE,MAAAA,QAAQ,EAAEN,YAAY,CAACI,GAAb,CAAiB,UAAjB,EAA6BG,GAA7B,CAAiC,UAAAC,SAAS;AAAA,eAAIV,KAAK,CAACG,KAAN,CAAY,CAAC,UAAD,EAAaO,SAAb,CAAZ,EAAqC,IAArC,CAAJ;AAAA,OAA1C,CADL;AAELC,MAAAA,MAAM,EAAET,YAAY,CAACI,GAAb,CAAiB,QAAjB,CAFH;AAGLM,MAAAA,UAAU,EAAEL,YAAY,IAAIR,SAAS,CAACC,KAAD,EAAQ;AAAEa,QAAAA,EAAE,EAAEN;AAAN,OAAR;AAHhC,KAAP;AAKD,GATD;AAUD,CAbD;;AAeA,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,MAAaC,IAAb,SAAaA,IAAb;AAAA,MAAmBf,cAAnB,SAAmBA,cAAnB;AAAA,SAAyC;AAElEgB,IAAAA,QAAQ,GAAI;AACVF,MAAAA,QAAQ,CAAC/B,oBAAoB,CAACiB,cAAD,CAArB,CAAR;AACD,KAJiE;;AAMlEiB,IAAAA,KAAK,CAAEC,MAAF,EAAUC,MAAV,EAAkB;AACrBL,MAAAA,QAAQ,CAAC,UAACM,CAAD,EAAIC,QAAJ,EAAiB;AACxB,YAAItB,KAAK,GAAGsB,QAAQ,EAApB;;AAEA,YAAItB,KAAK,CAACG,KAAN,CAAY,CAAC,SAAD,EAAY,MAAZ,CAAZ,EAAiCoB,IAAjC,GAAwCC,MAAxC,KAAmD,CAAvD,EAA0D;AACxDT,UAAAA,QAAQ,CAAC3B,SAAS,CAAC,SAAD,EAAY;AAC5BqC,YAAAA,OAAO,EAAET,IAAI,CAACU,aAAL,CAAmB/B,QAAQ,CAACE,YAA5B,CADmB;AAE5B8B,YAAAA,OAAO,EAAEX,IAAI,CAACU,aAAL,CAAmB/B,QAAQ,CAACC,YAA5B,CAFmB;AAG5BgC,YAAAA,SAAS,EAAE;AAAA,qBAAMb,QAAQ,CAAC5B,YAAY,CAACgC,MAAD,EAASC,MAAT,CAAb,CAAd;AAAA;AAHiB,WAAZ,CAAV,CAAR;AAKD,SAND,MAMO;AACLL,UAAAA,QAAQ,CAAC5B,YAAY,CAACgC,MAAD,EAASC,MAAT,CAAb,CAAR;AACD;AACF,OAZO,CAAR;AAaD,KApBiE;;AAsBlES,IAAAA,MAAM,GAAI;AACRd,MAAAA,QAAQ,CAAC9B,kBAAkB,CAACgB,cAAD,CAAnB,CAAR;AACD,KAxBiE;;AA0BlE6B,IAAAA,MAAM,CAAEX,MAAF,EAAU;AACd,UAAIA,MAAM,CAACb,GAAP,CAAW,OAAX,CAAJ,EAAyB;AACvBS,QAAAA,QAAQ,CAACzB,YAAY,CAAC6B,MAAM,CAACb,GAAP,CAAW,IAAX,CAAD,CAAb,CAAR;AACD,OAFD,MAEO;AACLS,QAAAA,QAAQ,CAAC1B,UAAU,CAAC8B,MAAM,CAACb,GAAP,CAAW,IAAX,CAAD,CAAX,CAAR;AACD;AACF,KAhCiE;;AAkClEyB,IAAAA,cAAc,CAAEZ,MAAF,EAAU;AACtB,UAAIA,MAAM,CAACb,GAAP,CAAW,QAAX,CAAJ,EAA0B;AACxBS,QAAAA,QAAQ,CAACvB,YAAY,CAAC2B,MAAM,CAACb,GAAP,CAAW,IAAX,CAAD,CAAb,CAAR;AACD,OAFD,MAEO;AACLS,QAAAA,QAAQ,CAACxB,UAAU,CAAC4B,MAAM,CAACb,GAAP,CAAW,IAAX,CAAD,CAAX,CAAR;AACD;AACF;;AAxCiE,GAAzC;AAAA,CAA3B;;AA4CA,eAAeZ,UAAU,CAACZ,OAAO,CAACgB,eAAD,EAAkBgB,kBAAlB,CAAP,CAA6C/B,YAA7C,CAAD,CAAzB","sourcesContent":["import { connect } from 'react-redux';\nimport Conversation from '../components/conversation';\nimport { markConversationRead, deleteConversation } from 'mastodon/actions/conversations';\nimport { makeGetStatus } from 'mastodon/selectors';\nimport { replyCompose } from 'mastodon/actions/compose';\nimport { openModal } from 'mastodon/actions/modal';\nimport { muteStatus, unmuteStatus, hideStatus, revealStatus } from 'mastodon/actions/statuses';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst mapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  return (state, { conversationId }) => {\n    const conversation = state.getIn(['conversations', 'items']).find(x => x.get('id') === conversationId);\n    const lastStatusId = conversation.get('last_status', null);\n\n    return {\n      accounts: conversation.get('accounts').map(accountId => state.getIn(['accounts', accountId], null)),\n      unread: conversation.get('unread'),\n      lastStatus: lastStatusId && getStatus(state, { id: lastStatusId }),\n    };\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl, conversationId }) => ({\n\n  markRead () {\n    dispatch(markConversationRead(conversationId));\n  },\n\n  reply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: () => dispatch(replyCompose(status, router)),\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  delete () {\n    dispatch(deleteConversation(conversationId));\n  },\n\n  onMute (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Conversation));\n"]},"metadata":{"react-intl":{"messages":[{"id":"confirmations.reply.confirm","defaultMessage":"Reply"},{"id":"confirmations.reply.message","defaultMessage":"Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?"}]}},"sourceType":"module"}