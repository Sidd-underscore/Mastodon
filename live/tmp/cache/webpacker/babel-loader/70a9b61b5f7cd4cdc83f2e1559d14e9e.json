{"ast":null,"code":"import api from '../api';\nexport var IDENTITY_PROOFS_ACCOUNT_FETCH_REQUEST = 'IDENTITY_PROOFS_ACCOUNT_FETCH_REQUEST';\nexport var IDENTITY_PROOFS_ACCOUNT_FETCH_SUCCESS = 'IDENTITY_PROOFS_ACCOUNT_FETCH_SUCCESS';\nexport var IDENTITY_PROOFS_ACCOUNT_FETCH_FAIL = 'IDENTITY_PROOFS_ACCOUNT_FETCH_FAIL';\nexport var fetchAccountIdentityProofs = function fetchAccountIdentityProofs(accountId) {\n  return function (dispatch, getState) {\n    dispatch(fetchAccountIdentityProofsRequest(accountId));\n    api(getState).get(\"/api/v1/accounts/\" + accountId + \"/identity_proofs\").then(function (_ref) {\n      var data = _ref.data;\n      return dispatch(fetchAccountIdentityProofsSuccess(accountId, data));\n    }).catch(function (err) {\n      return dispatch(fetchAccountIdentityProofsFail(accountId, err));\n    });\n  };\n};\nexport var fetchAccountIdentityProofsRequest = function fetchAccountIdentityProofsRequest(id) {\n  return {\n    type: IDENTITY_PROOFS_ACCOUNT_FETCH_REQUEST,\n    id\n  };\n};\nexport var fetchAccountIdentityProofsSuccess = function fetchAccountIdentityProofsSuccess(accountId, identity_proofs) {\n  return {\n    type: IDENTITY_PROOFS_ACCOUNT_FETCH_SUCCESS,\n    accountId,\n    identity_proofs\n  };\n};\nexport var fetchAccountIdentityProofsFail = function fetchAccountIdentityProofsFail(accountId, err) {\n  return {\n    type: IDENTITY_PROOFS_ACCOUNT_FETCH_FAIL,\n    accountId,\n    err,\n    skipNotFound: true\n  };\n};","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/actions/identity_proofs.js"],"names":["api","IDENTITY_PROOFS_ACCOUNT_FETCH_REQUEST","IDENTITY_PROOFS_ACCOUNT_FETCH_SUCCESS","IDENTITY_PROOFS_ACCOUNT_FETCH_FAIL","fetchAccountIdentityProofs","accountId","dispatch","getState","fetchAccountIdentityProofsRequest","get","then","data","fetchAccountIdentityProofsSuccess","catch","err","fetchAccountIdentityProofsFail","id","type","identity_proofs","skipNotFound"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA,OAAO,IAAMC,qCAAqC,GAAG,uCAA9C;AACP,OAAO,IAAMC,qCAAqC,GAAG,uCAA9C;AACP,OAAO,IAAMC,kCAAkC,GAAM,oCAA9C;AAEP,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAC,SAAS;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7ED,IAAAA,QAAQ,CAACE,iCAAiC,CAACH,SAAD,CAAlC,CAAR;AAEAL,IAAAA,GAAG,CAACO,QAAD,CAAH,CAAcE,GAAd,uBAAsCJ,SAAtC,uBACGK,IADH,CACQ;AAAA,UAAGC,IAAH,QAAGA,IAAH;AAAA,aAAcL,QAAQ,CAACM,iCAAiC,CAACP,SAAD,EAAYM,IAAZ,CAAlC,CAAtB;AAAA,KADR,EAEGE,KAFH,CAES,UAAAC,GAAG;AAAA,aAAIR,QAAQ,CAACS,8BAA8B,CAACV,SAAD,EAAYS,GAAZ,CAA/B,CAAZ;AAAA,KAFZ;AAGD,GANkD;AAAA,CAA5C;AAQP,OAAO,IAAMN,iCAAiC,GAAG,SAApCA,iCAAoC,CAAAQ,EAAE;AAAA,SAAK;AACtDC,IAAAA,IAAI,EAAEhB,qCADgD;AAEtDe,IAAAA;AAFsD,GAAL;AAAA,CAA5C;AAKP,OAAO,IAAMJ,iCAAiC,GAAG,SAApCA,iCAAoC,CAACP,SAAD,EAAYa,eAAZ;AAAA,SAAiC;AAChFD,IAAAA,IAAI,EAAEf,qCAD0E;AAEhFG,IAAAA,SAFgF;AAGhFa,IAAAA;AAHgF,GAAjC;AAAA,CAA1C;AAMP,OAAO,IAAMH,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACV,SAAD,EAAYS,GAAZ;AAAA,SAAqB;AACjEG,IAAAA,IAAI,EAAEd,kCAD2D;AAEjEE,IAAAA,SAFiE;AAGjES,IAAAA,GAHiE;AAIjEK,IAAAA,YAAY,EAAE;AAJmD,GAArB;AAAA,CAAvC","sourcesContent":["import api from '../api';\n\nexport const IDENTITY_PROOFS_ACCOUNT_FETCH_REQUEST = 'IDENTITY_PROOFS_ACCOUNT_FETCH_REQUEST';\nexport const IDENTITY_PROOFS_ACCOUNT_FETCH_SUCCESS = 'IDENTITY_PROOFS_ACCOUNT_FETCH_SUCCESS';\nexport const IDENTITY_PROOFS_ACCOUNT_FETCH_FAIL    = 'IDENTITY_PROOFS_ACCOUNT_FETCH_FAIL';\n\nexport const fetchAccountIdentityProofs = accountId => (dispatch, getState) => {\n  dispatch(fetchAccountIdentityProofsRequest(accountId));\n\n  api(getState).get(`/api/v1/accounts/${accountId}/identity_proofs`)\n    .then(({ data }) => dispatch(fetchAccountIdentityProofsSuccess(accountId, data)))\n    .catch(err => dispatch(fetchAccountIdentityProofsFail(accountId, err)));\n};\n\nexport const fetchAccountIdentityProofsRequest = id => ({\n  type: IDENTITY_PROOFS_ACCOUNT_FETCH_REQUEST,\n  id,\n});\n\nexport const fetchAccountIdentityProofsSuccess = (accountId, identity_proofs) => ({\n  type: IDENTITY_PROOFS_ACCOUNT_FETCH_SUCCESS,\n  accountId,\n  identity_proofs,\n});\n\nexport const fetchAccountIdentityProofsFail = (accountId, err) => ({\n  type: IDENTITY_PROOFS_ACCOUNT_FETCH_FAIL,\n  accountId,\n  err,\n  skipNotFound: true,\n});\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}