{"ast":null,"code":"import { FAVOURITED_STATUSES_FETCH_REQUEST, FAVOURITED_STATUSES_FETCH_SUCCESS, FAVOURITED_STATUSES_FETCH_FAIL, FAVOURITED_STATUSES_EXPAND_REQUEST, FAVOURITED_STATUSES_EXPAND_SUCCESS, FAVOURITED_STATUSES_EXPAND_FAIL } from '../actions/favourites';\nimport { BOOKMARKED_STATUSES_FETCH_REQUEST, BOOKMARKED_STATUSES_FETCH_SUCCESS, BOOKMARKED_STATUSES_FETCH_FAIL, BOOKMARKED_STATUSES_EXPAND_REQUEST, BOOKMARKED_STATUSES_EXPAND_SUCCESS, BOOKMARKED_STATUSES_EXPAND_FAIL } from '../actions/bookmarks';\nimport { PINNED_STATUSES_FETCH_SUCCESS } from '../actions/pin_statuses';\nimport { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport { FAVOURITE_SUCCESS, UNFAVOURITE_SUCCESS, BOOKMARK_SUCCESS, UNBOOKMARK_SUCCESS, PIN_SUCCESS, UNPIN_SUCCESS } from '../actions/interactions';\nvar initialState = ImmutableMap({\n  favourites: ImmutableMap({\n    next: null,\n    loaded: false,\n    items: ImmutableList()\n  }),\n  bookmarks: ImmutableMap({\n    next: null,\n    loaded: false,\n    items: ImmutableList()\n  }),\n  pins: ImmutableMap({\n    next: null,\n    loaded: false,\n    items: ImmutableList()\n  })\n});\n\nvar normalizeList = function normalizeList(state, listType, statuses, next) {\n  return state.update(listType, function (listMap) {\n    return listMap.withMutations(function (map) {\n      map.set('next', next);\n      map.set('loaded', true);\n      map.set('isLoading', false);\n      map.set('items', ImmutableList(statuses.map(function (item) {\n        return item.id;\n      })));\n    });\n  });\n};\n\nvar appendToList = function appendToList(state, listType, statuses, next) {\n  return state.update(listType, function (listMap) {\n    return listMap.withMutations(function (map) {\n      map.set('next', next);\n      map.set('isLoading', false);\n      map.set('items', map.get('items').concat(statuses.map(function (item) {\n        return item.id;\n      })));\n    });\n  });\n};\n\nvar prependOneToList = function prependOneToList(state, listType, status) {\n  return state.update(listType, function (listMap) {\n    return listMap.withMutations(function (map) {\n      map.set('items', map.get('items').unshift(status.get('id')));\n    });\n  });\n};\n\nvar removeOneFromList = function removeOneFromList(state, listType, status) {\n  return state.update(listType, function (listMap) {\n    return listMap.withMutations(function (map) {\n      map.set('items', map.get('items').filter(function (item) {\n        return item !== status.get('id');\n      }));\n    });\n  });\n};\n\nexport default function statusLists(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case FAVOURITED_STATUSES_FETCH_REQUEST:\n    case FAVOURITED_STATUSES_EXPAND_REQUEST:\n      return state.setIn(['favourites', 'isLoading'], true);\n\n    case FAVOURITED_STATUSES_FETCH_FAIL:\n    case FAVOURITED_STATUSES_EXPAND_FAIL:\n      return state.setIn(['favourites', 'isLoading'], false);\n\n    case FAVOURITED_STATUSES_FETCH_SUCCESS:\n      return normalizeList(state, 'favourites', action.statuses, action.next);\n\n    case FAVOURITED_STATUSES_EXPAND_SUCCESS:\n      return appendToList(state, 'favourites', action.statuses, action.next);\n\n    case BOOKMARKED_STATUSES_FETCH_REQUEST:\n    case BOOKMARKED_STATUSES_EXPAND_REQUEST:\n      return state.setIn(['bookmarks', 'isLoading'], true);\n\n    case BOOKMARKED_STATUSES_FETCH_FAIL:\n    case BOOKMARKED_STATUSES_EXPAND_FAIL:\n      return state.setIn(['bookmarks', 'isLoading'], false);\n\n    case BOOKMARKED_STATUSES_FETCH_SUCCESS:\n      return normalizeList(state, 'bookmarks', action.statuses, action.next);\n\n    case BOOKMARKED_STATUSES_EXPAND_SUCCESS:\n      return appendToList(state, 'bookmarks', action.statuses, action.next);\n\n    case FAVOURITE_SUCCESS:\n      return prependOneToList(state, 'favourites', action.status);\n\n    case UNFAVOURITE_SUCCESS:\n      return removeOneFromList(state, 'favourites', action.status);\n\n    case BOOKMARK_SUCCESS:\n      return prependOneToList(state, 'bookmarks', action.status);\n\n    case UNBOOKMARK_SUCCESS:\n      return removeOneFromList(state, 'bookmarks', action.status);\n\n    case PINNED_STATUSES_FETCH_SUCCESS:\n      return normalizeList(state, 'pins', action.statuses, action.next);\n\n    case PIN_SUCCESS:\n      return prependOneToList(state, 'pins', action.status);\n\n    case UNPIN_SUCCESS:\n      return removeOneFromList(state, 'pins', action.status);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/status_lists.js"],"names":["FAVOURITED_STATUSES_FETCH_REQUEST","FAVOURITED_STATUSES_FETCH_SUCCESS","FAVOURITED_STATUSES_FETCH_FAIL","FAVOURITED_STATUSES_EXPAND_REQUEST","FAVOURITED_STATUSES_EXPAND_SUCCESS","FAVOURITED_STATUSES_EXPAND_FAIL","BOOKMARKED_STATUSES_FETCH_REQUEST","BOOKMARKED_STATUSES_FETCH_SUCCESS","BOOKMARKED_STATUSES_FETCH_FAIL","BOOKMARKED_STATUSES_EXPAND_REQUEST","BOOKMARKED_STATUSES_EXPAND_SUCCESS","BOOKMARKED_STATUSES_EXPAND_FAIL","PINNED_STATUSES_FETCH_SUCCESS","Map","ImmutableMap","List","ImmutableList","FAVOURITE_SUCCESS","UNFAVOURITE_SUCCESS","BOOKMARK_SUCCESS","UNBOOKMARK_SUCCESS","PIN_SUCCESS","UNPIN_SUCCESS","initialState","favourites","next","loaded","items","bookmarks","pins","normalizeList","state","listType","statuses","update","listMap","withMutations","map","set","item","id","appendToList","get","concat","prependOneToList","status","unshift","removeOneFromList","filter","statusLists","action","type","setIn"],"mappings":"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","sourcesContent":["import {\n  FAVOURITED_STATUSES_FETCH_REQUEST,\n  FAVOURITED_STATUSES_FETCH_SUCCESS,\n  FAVOURITED_STATUSES_FETCH_FAIL,\n  FAVOURITED_STATUSES_EXPAND_REQUEST,\n  FAVOURITED_STATUSES_EXPAND_SUCCESS,\n  FAVOURITED_STATUSES_EXPAND_FAIL,\n} from '../actions/favourites';\nimport {\n  BOOKMARKED_STATUSES_FETCH_REQUEST,\n  BOOKMARKED_STATUSES_FETCH_SUCCESS,\n  BOOKMARKED_STATUSES_FETCH_FAIL,\n  BOOKMARKED_STATUSES_EXPAND_REQUEST,\n  BOOKMARKED_STATUSES_EXPAND_SUCCESS,\n  BOOKMARKED_STATUSES_EXPAND_FAIL,\n} from '../actions/bookmarks';\nimport {\n  PINNED_STATUSES_FETCH_SUCCESS,\n} from '../actions/pin_statuses';\nimport { Map as ImmutableMap, List as ImmutableList } from 'immutable';\nimport {\n  FAVOURITE_SUCCESS,\n  UNFAVOURITE_SUCCESS,\n  BOOKMARK_SUCCESS,\n  UNBOOKMARK_SUCCESS,\n  PIN_SUCCESS,\n  UNPIN_SUCCESS,\n} from '../actions/interactions';\n\nconst initialState = ImmutableMap({\n  favourites: ImmutableMap({\n    next: null,\n    loaded: false,\n    items: ImmutableList(),\n  }),\n  bookmarks: ImmutableMap({\n    next: null,\n    loaded: false,\n    items: ImmutableList(),\n  }),\n  pins: ImmutableMap({\n    next: null,\n    loaded: false,\n    items: ImmutableList(),\n  }),\n});\n\nconst normalizeList = (state, listType, statuses, next) => {\n  return state.update(listType, listMap => listMap.withMutations(map => {\n    map.set('next', next);\n    map.set('loaded', true);\n    map.set('isLoading', false);\n    map.set('items', ImmutableList(statuses.map(item => item.id)));\n  }));\n};\n\nconst appendToList = (state, listType, statuses, next) => {\n  return state.update(listType, listMap => listMap.withMutations(map => {\n    map.set('next', next);\n    map.set('isLoading', false);\n    map.set('items', map.get('items').concat(statuses.map(item => item.id)));\n  }));\n};\n\nconst prependOneToList = (state, listType, status) => {\n  return state.update(listType, listMap => listMap.withMutations(map => {\n    map.set('items', map.get('items').unshift(status.get('id')));\n  }));\n};\n\nconst removeOneFromList = (state, listType, status) => {\n  return state.update(listType, listMap => listMap.withMutations(map => {\n    map.set('items', map.get('items').filter(item => item !== status.get('id')));\n  }));\n};\n\nexport default function statusLists(state = initialState, action) {\n  switch(action.type) {\n  case FAVOURITED_STATUSES_FETCH_REQUEST:\n  case FAVOURITED_STATUSES_EXPAND_REQUEST:\n    return state.setIn(['favourites', 'isLoading'], true);\n  case FAVOURITED_STATUSES_FETCH_FAIL:\n  case FAVOURITED_STATUSES_EXPAND_FAIL:\n    return state.setIn(['favourites', 'isLoading'], false);\n  case FAVOURITED_STATUSES_FETCH_SUCCESS:\n    return normalizeList(state, 'favourites', action.statuses, action.next);\n  case FAVOURITED_STATUSES_EXPAND_SUCCESS:\n    return appendToList(state, 'favourites', action.statuses, action.next);\n  case BOOKMARKED_STATUSES_FETCH_REQUEST:\n  case BOOKMARKED_STATUSES_EXPAND_REQUEST:\n    return state.setIn(['bookmarks', 'isLoading'], true);\n  case BOOKMARKED_STATUSES_FETCH_FAIL:\n  case BOOKMARKED_STATUSES_EXPAND_FAIL:\n    return state.setIn(['bookmarks', 'isLoading'], false);\n  case BOOKMARKED_STATUSES_FETCH_SUCCESS:\n    return normalizeList(state, 'bookmarks', action.statuses, action.next);\n  case BOOKMARKED_STATUSES_EXPAND_SUCCESS:\n    return appendToList(state, 'bookmarks', action.statuses, action.next);\n  case FAVOURITE_SUCCESS:\n    return prependOneToList(state, 'favourites', action.status);\n  case UNFAVOURITE_SUCCESS:\n    return removeOneFromList(state, 'favourites', action.status);\n  case BOOKMARK_SUCCESS:\n    return prependOneToList(state, 'bookmarks', action.status);\n  case UNBOOKMARK_SUCCESS:\n    return removeOneFromList(state, 'bookmarks', action.status);\n  case PINNED_STATUSES_FETCH_SUCCESS:\n    return normalizeList(state, 'pins', action.statuses, action.next);\n  case PIN_SUCCESS:\n    return prependOneToList(state, 'pins', action.status);\n  case UNPIN_SUCCESS:\n    return removeOneFromList(state, 'pins', action.status);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}