{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/components/short_number.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { toShortNumber, pluralReady, DECIMAL_UNITS } from '../utils/numbers';\nimport { FormattedMessage, FormattedNumber } from 'react-intl'; // @ts-check\n\n/**\n * @callback ShortNumberRenderer\n * @param {JSX.Element} displayNumber Number to display\n * @param {number} pluralReady Number used for pluralization\n * @returns {JSX.Element} Final render of number\n */\n\n/**\n * @typedef {object} ShortNumberProps\n * @property {number} value Number to display in short variant\n * @property {ShortNumberRenderer} [renderer]\n * Custom renderer for numbers, provided as a prop. If another renderer\n * passed as a child of this component, this prop won't be used.\n * @property {ShortNumberRenderer} [children]\n * Custom renderer for numbers, provided as a child. If another renderer\n * passed as a prop of this component, this one will be used instead.\n */\n\n/**\n * Component that renders short big number to a shorter version\n *\n * @param {ShortNumberProps} param0 Props for the component\n * @returns {JSX.Element} Rendered number\n */\n\nfunction ShortNumber(_ref) {\n  var value = _ref.value,\n      renderer = _ref.renderer,\n      children = _ref.children;\n  var shortNumber = toShortNumber(value);\n  var division = shortNumber[1]; // eslint-disable-next-line eqeqeq\n\n  if (children != null && renderer != null) {\n    console.warn('Both renderer prop and renderer as a child provided. This is a mistake and you really should fix that. Only renderer passed as a child will be used.');\n  } // eslint-disable-next-line eqeqeq\n\n\n  var customRenderer = children != null ? children : renderer;\n  var displayNumber = /*#__PURE__*/React.createElement(ShortNumberCounter, {\n    value: shortNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }); // eslint-disable-next-line eqeqeq\n\n  return customRenderer != null ? customRenderer(displayNumber, pluralReady(value, division)) : displayNumber;\n}\n\nShortNumber.propTypes = {\n  value: PropTypes.number.isRequired,\n  renderer: PropTypes.func,\n  children: PropTypes.func\n};\n/**\n * @typedef {object} ShortNumberCounterProps\n * @property {import('../utils/number').ShortNumber} value Short number\n */\n\n/**\n * Renders short number into corresponding localizable react fragment\n *\n * @param {ShortNumberCounterProps} param0 Props for the component\n * @returns {JSX.Element} FormattedMessage ready to be embedded in code\n */\n\nfunction ShortNumberCounter(_ref2) {\n  var value = _ref2.value;\n  var rawNumber = value[0],\n      unit = value[1],\n      _value$ = value[2],\n      maxFractionDigits = _value$ === void 0 ? 0 : _value$;\n  var count = /*#__PURE__*/React.createElement(FormattedNumber, {\n    value: rawNumber,\n    maximumFractionDigits: maxFractionDigits,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  });\n  var values = {\n    count,\n    rawNumber\n  };\n\n  switch (unit) {\n    case DECIMAL_UNITS.THOUSAND:\n      {\n        return /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"units.short.thousand\",\n          defaultMessage: \"{count}K\",\n          values: values,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 7\n          }\n        });\n      }\n\n    case DECIMAL_UNITS.MILLION:\n      {\n        return /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"units.short.million\",\n          defaultMessage: \"{count}M\",\n          values: values,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 7\n          }\n        });\n      }\n\n    case DECIMAL_UNITS.BILLION:\n      {\n        return /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"units.short.billion\",\n          defaultMessage: \"{count}B\",\n          values: values,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 7\n          }\n        });\n      }\n    // Not sure if we should go farther - @Sasha-Sorokin\n\n    default:\n      return count;\n  }\n}\n\nShortNumberCounter.propTypes = {\n  value: PropTypes.arrayOf(PropTypes.number)\n};\nexport default /*#__PURE__*/React.memo(ShortNumber);","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/components/short_number.js"],"names":["React","PropTypes","toShortNumber","pluralReady","DECIMAL_UNITS","FormattedMessage","FormattedNumber","ShortNumber","value","renderer","children","shortNumber","division","console","warn","customRenderer","displayNumber","propTypes","number","isRequired","func","ShortNumberCounter","rawNumber","unit","maxFractionDigits","count","values","THOUSAND","MILLION","BILLION","arrayOf","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { toShortNumber, pluralReady, DECIMAL_UNITS } from '../utils/numbers';\nimport { FormattedMessage, FormattedNumber } from 'react-intl';\n// @ts-check\n\n/**\n * @callback ShortNumberRenderer\n * @param {JSX.Element} displayNumber Number to display\n * @param {number} pluralReady Number used for pluralization\n * @returns {JSX.Element} Final render of number\n */\n\n/**\n * @typedef {object} ShortNumberProps\n * @property {number} value Number to display in short variant\n * @property {ShortNumberRenderer} [renderer]\n * Custom renderer for numbers, provided as a prop. If another renderer\n * passed as a child of this component, this prop won't be used.\n * @property {ShortNumberRenderer} [children]\n * Custom renderer for numbers, provided as a child. If another renderer\n * passed as a prop of this component, this one will be used instead.\n */\n\n/**\n * Component that renders short big number to a shorter version\n *\n * @param {ShortNumberProps} param0 Props for the component\n * @returns {JSX.Element} Rendered number\n */\nfunction ShortNumber({ value, renderer, children }) {\n  const shortNumber = toShortNumber(value);\n  const [, division] = shortNumber;\n\n  // eslint-disable-next-line eqeqeq\n  if (children != null && renderer != null) {\n    console.warn('Both renderer prop and renderer as a child provided. This is a mistake and you really should fix that. Only renderer passed as a child will be used.');\n  }\n\n  // eslint-disable-next-line eqeqeq\n  const customRenderer = children != null ? children : renderer;\n\n  const displayNumber = <ShortNumberCounter value={shortNumber} />;\n\n  // eslint-disable-next-line eqeqeq\n  return customRenderer != null\n    ? customRenderer(displayNumber, pluralReady(value, division))\n    : displayNumber;\n}\n\nShortNumber.propTypes = {\n  value: PropTypes.number.isRequired,\n  renderer: PropTypes.func,\n  children: PropTypes.func,\n};\n\n/**\n * @typedef {object} ShortNumberCounterProps\n * @property {import('../utils/number').ShortNumber} value Short number\n */\n\n/**\n * Renders short number into corresponding localizable react fragment\n *\n * @param {ShortNumberCounterProps} param0 Props for the component\n * @returns {JSX.Element} FormattedMessage ready to be embedded in code\n */\nfunction ShortNumberCounter({ value }) {\n  const [rawNumber, unit, maxFractionDigits = 0] = value;\n\n  const count = (\n    <FormattedNumber\n      value={rawNumber}\n      maximumFractionDigits={maxFractionDigits}\n    />\n  );\n\n  let values = { count, rawNumber };\n\n  switch (unit) {\n  case DECIMAL_UNITS.THOUSAND: {\n    return (\n      <FormattedMessage\n        id='units.short.thousand'\n        defaultMessage='{count}K'\n        values={values}\n      />\n    );\n  }\n  case DECIMAL_UNITS.MILLION: {\n    return (\n      <FormattedMessage\n        id='units.short.million'\n        defaultMessage='{count}M'\n        values={values}\n      />\n    );\n  }\n  case DECIMAL_UNITS.BILLION: {\n    return (\n      <FormattedMessage\n        id='units.short.billion'\n        defaultMessage='{count}B'\n        values={values}\n      />\n    );\n  }\n  // Not sure if we should go farther - @Sasha-Sorokin\n  default: return count;\n  }\n}\n\nShortNumberCounter.propTypes = {\n  value: PropTypes.arrayOf(PropTypes.number),\n};\n\nexport default React.memo(ShortNumber);\n"]},"metadata":{"react-intl":{"messages":[{"id":"units.short.thousand","defaultMessage":"{count}K"},{"id":"units.short.million","defaultMessage":"{count}M"},{"id":"units.short.billion","defaultMessage":"{count}B"}]}},"sourceType":"module"}