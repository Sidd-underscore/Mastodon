{"ast":null,"code":"// Wrapper to call requestIdleCallback() to schedule low-priority work.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API\n// for a good breakdown of the concepts behind this.\nimport Queue from 'tiny-queue';\nvar taskQueue = new Queue();\nvar runningRequestIdleCallback = false;\n\nfunction runTasks(deadline) {\n  while (taskQueue.length && deadline.timeRemaining() > 0) {\n    taskQueue.shift()();\n  }\n\n  if (taskQueue.length) {\n    requestIdleCallback(runTasks);\n  } else {\n    runningRequestIdleCallback = false;\n  }\n}\n\nfunction scheduleIdleTask(task) {\n  taskQueue.push(task);\n\n  if (!runningRequestIdleCallback) {\n    runningRequestIdleCallback = true;\n    requestIdleCallback(runTasks);\n  }\n}\n\nexport default scheduleIdleTask;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/util/schedule_idle_task.js"],"names":["Queue","taskQueue","runningRequestIdleCallback","runTasks","deadline","length","timeRemaining","shift","requestIdleCallback","scheduleIdleTask","task","push"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,IAAMC,SAAS,GAAG,IAAID,KAAJ,EAAlB;AACA,IAAIE,0BAA0B,GAAG,KAAjC;;AAEA,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC1B,SAAOH,SAAS,CAACI,MAAV,IAAoBD,QAAQ,CAACE,aAAT,KAA2B,CAAtD,EAAyD;AACvDL,IAAAA,SAAS,CAACM,KAAV;AACD;;AACD,MAAIN,SAAS,CAACI,MAAd,EAAsB;AACpBG,IAAAA,mBAAmB,CAACL,QAAD,CAAnB;AACD,GAFD,MAEO;AACLD,IAAAA,0BAA0B,GAAG,KAA7B;AACD;AACF;;AAED,SAASO,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9BT,EAAAA,SAAS,CAACU,IAAV,CAAeD,IAAf;;AACA,MAAI,CAACR,0BAAL,EAAiC;AAC/BA,IAAAA,0BAA0B,GAAG,IAA7B;AACAM,IAAAA,mBAAmB,CAACL,QAAD,CAAnB;AACD;AACF;;AAED,eAAeM,gBAAf","sourcesContent":["// Wrapper to call requestIdleCallback() to schedule low-priority work.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API\n// for a good breakdown of the concepts behind this.\n\nimport Queue from 'tiny-queue';\n\nconst taskQueue = new Queue();\nlet runningRequestIdleCallback = false;\n\nfunction runTasks(deadline) {\n  while (taskQueue.length && deadline.timeRemaining() > 0) {\n    taskQueue.shift()();\n  }\n  if (taskQueue.length) {\n    requestIdleCallback(runTasks);\n  } else {\n    runningRequestIdleCallback = false;\n  }\n}\n\nfunction scheduleIdleTask(task) {\n  taskQueue.push(task);\n  if (!runningRequestIdleCallback) {\n    runningRequestIdleCallback = true;\n    requestIdleCallback(runTasks);\n  }\n}\n\nexport default scheduleIdleTask;\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}