{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/components/autosuggest_input.js\";\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport AutosuggestAccountContainer from '../features/compose/containers/autosuggest_account_container';\nimport AutosuggestEmoji from './autosuggest_emoji';\nimport AutosuggestHashtag from './autosuggest_hashtag';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport classNames from 'classnames';\n\nvar textAtCursorMatchesToken = function textAtCursorMatchesToken(str, caretPosition, searchTokens) {\n  var word;\n  var left = str.slice(0, caretPosition).search(/\\S+$/);\n  var right = str.slice(caretPosition).search(/\\s/);\n\n  if (right < 0) {\n    word = str.slice(left);\n  } else {\n    word = str.slice(left, right + caretPosition);\n  }\n\n  if (!word || word.trim().length < 3 || searchTokens.indexOf(word[0]) === -1) {\n    return [null, null];\n  }\n\n  word = word.trim().toLowerCase();\n\n  if (word.length > 0) {\n    return [left + 1, word];\n  } else {\n    return [null, null];\n  }\n};\n\nvar AutosuggestInput = /*#__PURE__*/function (_ImmutablePureCompone) {\n  _inheritsLoose(AutosuggestInput, _ImmutablePureCompone);\n\n  function AutosuggestInput() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ImmutablePureCompone.call.apply(_ImmutablePureCompone, [this].concat(args)) || this;\n    _this.state = {\n      suggestionsHidden: true,\n      focused: false,\n      selectedSuggestion: 0,\n      lastToken: null,\n      tokenStart: 0\n    };\n\n    _this.onChange = function (e) {\n      var _textAtCursorMatchesT = textAtCursorMatchesToken(e.target.value, e.target.selectionStart, _this.props.searchTokens),\n          tokenStart = _textAtCursorMatchesT[0],\n          token = _textAtCursorMatchesT[1];\n\n      if (token !== null && _this.state.lastToken !== token) {\n        _this.setState({\n          lastToken: token,\n          selectedSuggestion: 0,\n          tokenStart\n        });\n\n        _this.props.onSuggestionsFetchRequested(token);\n      } else if (token === null) {\n        _this.setState({\n          lastToken: null\n        });\n\n        _this.props.onSuggestionsClearRequested();\n      }\n\n      _this.props.onChange(e);\n    };\n\n    _this.onKeyDown = function (e) {\n      var _this$props = _this.props,\n          suggestions = _this$props.suggestions,\n          disabled = _this$props.disabled;\n      var _this$state = _this.state,\n          selectedSuggestion = _this$state.selectedSuggestion,\n          suggestionsHidden = _this$state.suggestionsHidden;\n\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (e.which === 229 || e.isComposing) {\n        // Ignore key events during text composition\n        // e.key may be a name of the physical key even in this case (e.x. Safari / Chrome on Mac)\n        return;\n      }\n\n      switch (e.key) {\n        case 'Escape':\n          if (suggestions.size === 0 || suggestionsHidden) {\n            document.querySelector('.ui').parentElement.focus();\n          } else {\n            e.preventDefault();\n\n            _this.setState({\n              suggestionsHidden: true\n            });\n          }\n\n          break;\n\n        case 'ArrowDown':\n          if (suggestions.size > 0 && !suggestionsHidden) {\n            e.preventDefault();\n\n            _this.setState({\n              selectedSuggestion: Math.min(selectedSuggestion + 1, suggestions.size - 1)\n            });\n          }\n\n          break;\n\n        case 'ArrowUp':\n          if (suggestions.size > 0 && !suggestionsHidden) {\n            e.preventDefault();\n\n            _this.setState({\n              selectedSuggestion: Math.max(selectedSuggestion - 1, 0)\n            });\n          }\n\n          break;\n\n        case 'Enter':\n        case 'Tab':\n          // Select suggestion\n          if (_this.state.lastToken !== null && suggestions.size > 0 && !suggestionsHidden) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            _this.props.onSuggestionSelected(_this.state.tokenStart, _this.state.lastToken, suggestions.get(selectedSuggestion));\n          }\n\n          break;\n      }\n\n      if (e.defaultPrevented || !_this.props.onKeyDown) {\n        return;\n      }\n\n      _this.props.onKeyDown(e);\n    };\n\n    _this.onBlur = function () {\n      _this.setState({\n        suggestionsHidden: true,\n        focused: false\n      });\n    };\n\n    _this.onFocus = function () {\n      _this.setState({\n        focused: true\n      });\n    };\n\n    _this.onSuggestionClick = function (e) {\n      var suggestion = _this.props.suggestions.get(e.currentTarget.getAttribute('data-index'));\n\n      e.preventDefault();\n\n      _this.props.onSuggestionSelected(_this.state.tokenStart, _this.state.lastToken, suggestion);\n\n      _this.input.focus();\n    };\n\n    _this.setInput = function (c) {\n      _this.input = c;\n    };\n\n    _this.renderSuggestion = function (suggestion, i) {\n      var selectedSuggestion = _this.state.selectedSuggestion;\n      var inner, key;\n\n      if (suggestion.type === 'emoji') {\n        inner = /*#__PURE__*/React.createElement(AutosuggestEmoji, {\n          emoji: suggestion,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }\n        });\n        key = suggestion.id;\n      } else if (suggestion.type === 'hashtag') {\n        inner = /*#__PURE__*/React.createElement(AutosuggestHashtag, {\n          tag: suggestion,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }\n        });\n        key = suggestion.name;\n      } else if (suggestion.type === 'account') {\n        inner = /*#__PURE__*/React.createElement(AutosuggestAccountContainer, {\n          id: suggestion.id,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }\n        });\n        key = suggestion.id;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        role: \"button\",\n        tabIndex: \"0\",\n        key: key,\n        \"data-index\": i,\n        className: classNames('autosuggest-textarea__suggestions__item', {\n          selected: i === selectedSuggestion\n        }),\n        onMouseDown: _this.onSuggestionClick,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 7\n        }\n      }, inner);\n    };\n\n    return _this;\n  }\n\n  var _proto = AutosuggestInput.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.suggestions !== this.props.suggestions && nextProps.suggestions.size > 0 && this.state.suggestionsHidden && this.state.focused) {\n      this.setState({\n        suggestionsHidden: false\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        value = _this$props2.value,\n        suggestions = _this$props2.suggestions,\n        disabled = _this$props2.disabled,\n        placeholder = _this$props2.placeholder,\n        onKeyUp = _this$props2.onKeyUp,\n        autoFocus = _this$props2.autoFocus,\n        className = _this$props2.className,\n        id = _this$props2.id,\n        maxLength = _this$props2.maxLength;\n    var suggestionsHidden = this.state.suggestionsHidden;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autosuggest-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    }, placeholder), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      ref: this.setInput,\n      disabled: disabled,\n      placeholder: placeholder,\n      autoFocus: autoFocus,\n      value: value,\n      onChange: this.onChange,\n      onKeyDown: this.onKeyDown,\n      onKeyUp: onKeyUp,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      dir: \"auto\",\n      \"aria-autocomplete\": \"list\",\n      id: id,\n      className: className,\n      maxLength: maxLength,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autosuggest-textarea__suggestions \" + (suggestionsHidden || suggestions.isEmpty() ? '' : 'autosuggest-textarea__suggestions--visible'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }, suggestions.map(this.renderSuggestion)));\n  };\n\n  return AutosuggestInput;\n}(ImmutablePureComponent);\n\nAutosuggestInput.propTypes = {\n  value: PropTypes.string,\n  suggestions: ImmutablePropTypes.list,\n  disabled: PropTypes.bool,\n  placeholder: PropTypes.string,\n  onSuggestionSelected: PropTypes.func.isRequired,\n  onSuggestionsClearRequested: PropTypes.func.isRequired,\n  onSuggestionsFetchRequested: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onKeyUp: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  id: PropTypes.string,\n  searchTokens: PropTypes.arrayOf(PropTypes.string),\n  maxLength: PropTypes.number\n};\nAutosuggestInput.defaultProps = {\n  autoFocus: true,\n  searchTokens: ['@', ':', '#']\n};\nexport { AutosuggestInput as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/components/autosuggest_input.js"],"names":["React","AutosuggestAccountContainer","AutosuggestEmoji","AutosuggestHashtag","ImmutablePropTypes","PropTypes","ImmutablePureComponent","classNames","textAtCursorMatchesToken","str","caretPosition","searchTokens","word","left","slice","search","right","trim","length","indexOf","toLowerCase","AutosuggestInput","state","suggestionsHidden","focused","selectedSuggestion","lastToken","tokenStart","onChange","e","target","value","selectionStart","props","token","setState","onSuggestionsFetchRequested","onSuggestionsClearRequested","onKeyDown","suggestions","disabled","preventDefault","which","isComposing","key","size","document","querySelector","parentElement","focus","Math","min","max","stopPropagation","onSuggestionSelected","get","defaultPrevented","onBlur","onFocus","onSuggestionClick","suggestion","currentTarget","getAttribute","input","setInput","c","renderSuggestion","i","inner","type","id","name","selected","componentWillReceiveProps","nextProps","render","placeholder","onKeyUp","autoFocus","className","maxLength","display","isEmpty","map","propTypes","string","list","bool","func","isRequired","arrayOf","number","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AutosuggestAccountContainer from '../features/compose/containers/autosuggest_account_container';\nimport AutosuggestEmoji from './autosuggest_emoji';\nimport AutosuggestHashtag from './autosuggest_hashtag';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport classNames from 'classnames';\n\nconst textAtCursorMatchesToken = (str, caretPosition, searchTokens) => {\n  let word;\n\n  let left  = str.slice(0, caretPosition).search(/\\S+$/);\n  let right = str.slice(caretPosition).search(/\\s/);\n\n  if (right < 0) {\n    word = str.slice(left);\n  } else {\n    word = str.slice(left, right + caretPosition);\n  }\n\n  if (!word || word.trim().length < 3 || searchTokens.indexOf(word[0]) === -1) {\n    return [null, null];\n  }\n\n  word = word.trim().toLowerCase();\n\n  if (word.length > 0) {\n    return [left + 1, word];\n  } else {\n    return [null, null];\n  }\n};\n\nexport default class AutosuggestInput extends ImmutablePureComponent {\n\n  static propTypes = {\n    value: PropTypes.string,\n    suggestions: ImmutablePropTypes.list,\n    disabled: PropTypes.bool,\n    placeholder: PropTypes.string,\n    onSuggestionSelected: PropTypes.func.isRequired,\n    onSuggestionsClearRequested: PropTypes.func.isRequired,\n    onSuggestionsFetchRequested: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onKeyUp: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    autoFocus: PropTypes.bool,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    searchTokens: PropTypes.arrayOf(PropTypes.string),\n    maxLength: PropTypes.number,\n  };\n\n  static defaultProps = {\n    autoFocus: true,\n    searchTokens: ['@', ':', '#'],\n  };\n\n  state = {\n    suggestionsHidden: true,\n    focused: false,\n    selectedSuggestion: 0,\n    lastToken: null,\n    tokenStart: 0,\n  };\n\n  onChange = (e) => {\n    const [ tokenStart, token ] = textAtCursorMatchesToken(e.target.value, e.target.selectionStart, this.props.searchTokens);\n\n    if (token !== null && this.state.lastToken !== token) {\n      this.setState({ lastToken: token, selectedSuggestion: 0, tokenStart });\n      this.props.onSuggestionsFetchRequested(token);\n    } else if (token === null) {\n      this.setState({ lastToken: null });\n      this.props.onSuggestionsClearRequested();\n    }\n\n    this.props.onChange(e);\n  }\n\n  onKeyDown = (e) => {\n    const { suggestions, disabled } = this.props;\n    const { selectedSuggestion, suggestionsHidden } = this.state;\n\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (e.which === 229 || e.isComposing) {\n      // Ignore key events during text composition\n      // e.key may be a name of the physical key even in this case (e.x. Safari / Chrome on Mac)\n      return;\n    }\n\n    switch(e.key) {\n    case 'Escape':\n      if (suggestions.size === 0 || suggestionsHidden) {\n        document.querySelector('.ui').parentElement.focus();\n      } else {\n        e.preventDefault();\n        this.setState({ suggestionsHidden: true });\n      }\n\n      break;\n    case 'ArrowDown':\n      if (suggestions.size > 0 && !suggestionsHidden) {\n        e.preventDefault();\n        this.setState({ selectedSuggestion: Math.min(selectedSuggestion + 1, suggestions.size - 1) });\n      }\n\n      break;\n    case 'ArrowUp':\n      if (suggestions.size > 0 && !suggestionsHidden) {\n        e.preventDefault();\n        this.setState({ selectedSuggestion: Math.max(selectedSuggestion - 1, 0) });\n      }\n\n      break;\n    case 'Enter':\n    case 'Tab':\n      // Select suggestion\n      if (this.state.lastToken !== null && suggestions.size > 0 && !suggestionsHidden) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.props.onSuggestionSelected(this.state.tokenStart, this.state.lastToken, suggestions.get(selectedSuggestion));\n      }\n\n      break;\n    }\n\n    if (e.defaultPrevented || !this.props.onKeyDown) {\n      return;\n    }\n\n    this.props.onKeyDown(e);\n  }\n\n  onBlur = () => {\n    this.setState({ suggestionsHidden: true, focused: false });\n  }\n\n  onFocus = () => {\n    this.setState({ focused: true });\n  }\n\n  onSuggestionClick = (e) => {\n    const suggestion = this.props.suggestions.get(e.currentTarget.getAttribute('data-index'));\n    e.preventDefault();\n    this.props.onSuggestionSelected(this.state.tokenStart, this.state.lastToken, suggestion);\n    this.input.focus();\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.suggestions !== this.props.suggestions && nextProps.suggestions.size > 0 && this.state.suggestionsHidden && this.state.focused) {\n      this.setState({ suggestionsHidden: false });\n    }\n  }\n\n  setInput = (c) => {\n    this.input = c;\n  }\n\n  renderSuggestion = (suggestion, i) => {\n    const { selectedSuggestion } = this.state;\n    let inner, key;\n\n    if (suggestion.type === 'emoji') {\n      inner = <AutosuggestEmoji emoji={suggestion} />;\n      key   = suggestion.id;\n    } else if (suggestion.type ==='hashtag') {\n      inner = <AutosuggestHashtag tag={suggestion} />;\n      key   = suggestion.name;\n    } else if (suggestion.type === 'account') {\n      inner = <AutosuggestAccountContainer id={suggestion.id} />;\n      key   = suggestion.id;\n    }\n\n    return (\n      <div role='button' tabIndex='0' key={key} data-index={i} className={classNames('autosuggest-textarea__suggestions__item', { selected: i === selectedSuggestion })} onMouseDown={this.onSuggestionClick}>\n        {inner}\n      </div>\n    );\n  }\n\n  render () {\n    const { value, suggestions, disabled, placeholder, onKeyUp, autoFocus, className, id, maxLength } = this.props;\n    const { suggestionsHidden } = this.state;\n\n    return (\n      <div className='autosuggest-input'>\n        <label>\n          <span style={{ display: 'none' }}>{placeholder}</span>\n\n          <input\n            type='text'\n            ref={this.setInput}\n            disabled={disabled}\n            placeholder={placeholder}\n            autoFocus={autoFocus}\n            value={value}\n            onChange={this.onChange}\n            onKeyDown={this.onKeyDown}\n            onKeyUp={onKeyUp}\n            onFocus={this.onFocus}\n            onBlur={this.onBlur}\n            dir='auto'\n            aria-autocomplete='list'\n            id={id}\n            className={className}\n            maxLength={maxLength}\n          />\n        </label>\n\n        <div className={`autosuggest-textarea__suggestions ${suggestionsHidden || suggestions.isEmpty() ? '' : 'autosuggest-textarea__suggestions--visible'}`}>\n          {suggestions.map(this.renderSuggestion)}\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}