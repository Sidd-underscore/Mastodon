{"ast":null,"code":"import { STORE_HYDRATE } from 'mastodon/actions/store';\nimport { APP_LAYOUT_CHANGE } from 'mastodon/actions/app';\nimport { Map as ImmutableMap } from 'immutable';\nimport { layoutFromWindow } from 'mastodon/is_mobile';\nvar initialState = ImmutableMap({\n  streaming_api_base_url: null,\n  access_token: null,\n  layout: layoutFromWindow()\n});\nexport default function meta(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case STORE_HYDRATE:\n      return state.merge(action.state.get('meta'));\n\n    case APP_LAYOUT_CHANGE:\n      return state.set('layout', action.layout);\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/reducers/meta.js"],"names":["STORE_HYDRATE","APP_LAYOUT_CHANGE","Map","ImmutableMap","layoutFromWindow","initialState","streaming_api_base_url","access_token","layout","meta","state","action","type","merge","get","set"],"mappings":"AAAA,SAASA,aAAT,QAA8B,wBAA9B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,GAAG,IAAIC,YAAhB,QAAoC,WAApC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,IAAMC,YAAY,GAAGF,YAAY,CAAC;AAChCG,EAAAA,sBAAsB,EAAE,IADQ;AAEhCC,EAAAA,YAAY,EAAE,IAFkB;AAGhCC,EAAAA,MAAM,EAAEJ,gBAAgB;AAHQ,CAAD,CAAjC;AAMA,eAAe,SAASK,IAAT,CAAcC,KAAd,EAAoCC,MAApC,EAA4C;AAAA,MAA9BD,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtBL,YAAsB;AAAA;;AACzD,UAAOM,MAAM,CAACC,IAAd;AACA,SAAKZ,aAAL;AACE,aAAOU,KAAK,CAACG,KAAN,CAAYF,MAAM,CAACD,KAAP,CAAaI,GAAb,CAAiB,MAAjB,CAAZ,CAAP;;AACF,SAAKb,iBAAL;AACE,aAAOS,KAAK,CAACK,GAAN,CAAU,QAAV,EAAoBJ,MAAM,CAACH,MAA3B,CAAP;;AACF;AACE,aAAOE,KAAP;AANF;AAQD;AAAA","sourcesContent":["import { STORE_HYDRATE } from 'mastodon/actions/store';\nimport { APP_LAYOUT_CHANGE } from 'mastodon/actions/app';\nimport { Map as ImmutableMap } from 'immutable';\nimport { layoutFromWindow } from 'mastodon/is_mobile';\n\nconst initialState = ImmutableMap({\n  streaming_api_base_url: null,\n  access_token: null,\n  layout: layoutFromWindow(),\n});\n\nexport default function meta(state = initialState, action) {\n  switch(action.type) {\n  case STORE_HYDRATE:\n    return state.merge(action.state.get('meta'));\n  case APP_LAYOUT_CHANGE:\n    return state.set('layout', action.layout);\n  default:\n    return state;\n  }\n};\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}