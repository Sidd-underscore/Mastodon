{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/notifications/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandNotifications, scrollTopNotifications, loadPending, mountNotifications, unmountNotifications, markNotificationsAsRead } from '../../actions/notifications';\nimport { submitMarkers } from '../../actions/markers';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport NotificationContainer from './containers/notification_container';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport { createSelector } from 'reselect';\nimport { List as ImmutableList } from 'immutable';\nimport { debounce } from 'lodash';\nimport ScrollableList from '../../components/scrollable_list';\nimport LoadGap from '../../components/load_gap';\nimport Icon from 'mastodon/components/icon';\nimport compareId from 'mastodon/compare_id';\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"column.notifications\",\n    \"defaultMessage\": \"Notifications\"\n  },\n  markAsRead: {\n    \"id\": \"notifications.mark_as_read\",\n    \"defaultMessage\": \"Mark every notification as read\"\n  }\n});\nvar getExcludedTypes = createSelector([function (state) {\n  return state.getIn(['settings', 'notifications', 'shows']);\n}], function (shows) {\n  return ImmutableList(shows.filter(function (item) {\n    return !item;\n  }).keys());\n});\nvar getNotifications = createSelector([function (state) {\n  return state.getIn(['settings', 'notifications', 'quickFilter', 'show']);\n}, function (state) {\n  return state.getIn(['settings', 'notifications', 'quickFilter', 'active']);\n}, getExcludedTypes, function (state) {\n  return state.getIn(['notifications', 'items']);\n}], function (showFilterBar, allowedType, excludedTypes, notifications) {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(function (item) {\n      return item !== null && excludedTypes.includes(item.get('type'));\n    });\n  }\n\n  return notifications.filter(function (item) {\n    return item === null || allowedType === item.get('type');\n  });\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n    notifications: getNotifications(state),\n    isLoading: state.getIn(['notifications', 'isLoading'], true),\n    isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n    hasMore: state.getIn(['notifications', 'hasMore']),\n    numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n    lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n    canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(function (item) {\n      return item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0;\n    }),\n    needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner'])\n  };\n};\n\nvar Notifications = (_dec = connect(mapStateToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(Notifications, _React$PureComponent);\n\n  function Notifications() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handleLoadGap = function (maxId) {\n      _this.props.dispatch(expandNotifications({\n        maxId\n      }));\n    };\n\n    _this.handleLoadOlder = debounce(function () {\n      var last = _this.props.notifications.last();\n\n      _this.props.dispatch(expandNotifications({\n        maxId: last && last.get('id')\n      }));\n    }, 300, {\n      leading: true\n    });\n\n    _this.handleLoadPending = function () {\n      _this.props.dispatch(loadPending());\n    };\n\n    _this.handleScrollToTop = debounce(function () {\n      _this.props.dispatch(scrollTopNotifications(true));\n    }, 100);\n    _this.handleScroll = debounce(function () {\n      _this.props.dispatch(scrollTopNotifications(false));\n    }, 100);\n\n    _this.handlePin = function () {\n      var _this$props = _this.props,\n          columnId = _this$props.columnId,\n          dispatch = _this$props.dispatch;\n\n      if (columnId) {\n        dispatch(removeColumn(columnId));\n      } else {\n        dispatch(addColumn('NOTIFICATIONS', {}));\n      }\n    };\n\n    _this.handleMove = function (dir) {\n      var _this$props2 = _this.props,\n          columnId = _this$props2.columnId,\n          dispatch = _this$props2.dispatch;\n      dispatch(moveColumn(columnId, dir));\n    };\n\n    _this.handleHeaderClick = function () {\n      _this.column.scrollTop();\n    };\n\n    _this.setColumnRef = function (c) {\n      _this.column = c;\n    };\n\n    _this.handleMoveUp = function (id) {\n      var elementIndex = _this.props.notifications.findIndex(function (item) {\n        return item !== null && item.get('id') === id;\n      }) - 1;\n\n      _this._selectChild(elementIndex, true);\n    };\n\n    _this.handleMoveDown = function (id) {\n      var elementIndex = _this.props.notifications.findIndex(function (item) {\n        return item !== null && item.get('id') === id;\n      }) + 1;\n\n      _this._selectChild(elementIndex, false);\n    };\n\n    _this.handleMarkAsRead = function () {\n      _this.props.dispatch(markNotificationsAsRead());\n\n      _this.props.dispatch(submitMarkers({\n        immediate: true\n      }));\n    };\n\n    return _this;\n  }\n\n  var _proto = Notifications.prototype;\n\n  _proto.componentWillMount = function componentWillMount() {\n    this.props.dispatch(mountNotifications());\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    this.props.dispatch(scrollTopNotifications(false));\n    this.props.dispatch(unmountNotifications());\n  };\n\n  _proto._selectChild = function _selectChild(index, align_top) {\n    var container = this.column.node;\n    var element = container.querySelector(\"article:nth-of-type(\" + (index + 1) + \") .focusable\");\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n\n      element.focus();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props3 = this.props,\n        intl = _this$props3.intl,\n        notifications = _this$props3.notifications,\n        isLoading = _this$props3.isLoading,\n        isUnread = _this$props3.isUnread,\n        columnId = _this$props3.columnId,\n        multiColumn = _this$props3.multiColumn,\n        hasMore = _this$props3.hasMore,\n        numPending = _this$props3.numPending,\n        showFilterBar = _this$props3.showFilterBar,\n        lastReadId = _this$props3.lastReadId,\n        canMarkAsRead = _this$props3.canMarkAsRead,\n        needsNotificationPermission = _this$props3.needsNotificationPermission;\n    var pinned = !!columnId;\n    var emptyMessage = /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"empty_column.notifications\",\n      defaultMessage: \"You don't have any notifications yet. When other people interact with you, you will see it here.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 26\n      }\n    });\n    var scrollableContent = null;\n    var filterBarContainer = showFilterBar ? /*#__PURE__*/React.createElement(FilterBarContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 10\n      }\n    }) : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map(function (item, index) {\n        return item === null ? /*#__PURE__*/React.createElement(LoadGap, {\n          key: 'gap:' + notifications.getIn([index + 1, 'id']),\n          disabled: isLoading,\n          maxId: index > 0 ? notifications.getIn([index - 1, 'id']) : null,\n          onClick: _this2.handleLoadGap,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 9\n          }\n        }) : /*#__PURE__*/React.createElement(NotificationContainer, {\n          key: item.get('id'),\n          notification: item,\n          accountId: item.get('account'),\n          onMoveUp: _this2.handleMoveUp,\n          onMoveDown: _this2.handleMoveDown,\n          unread: lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 9\n          }\n        });\n      });\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n    var scrollContainer = /*#__PURE__*/React.createElement(ScrollableList, {\n      scrollKey: \"notifications-\" + columnId,\n      trackScroll: !pinned,\n      isLoading: isLoading,\n      showLoading: isLoading && notifications.size === 0,\n      hasMore: hasMore,\n      numPending: numPending,\n      prepend: needsNotificationPermission && /*#__PURE__*/React.createElement(NotificationsPermissionBanner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 49\n        }\n      }),\n      alwaysPrepend: true,\n      emptyMessage: emptyMessage,\n      onLoadMore: this.handleLoadOlder,\n      onLoadPending: this.handleLoadPending,\n      onScrollToTop: this.handleScrollToTop,\n      onScroll: this.handleScroll,\n      bindToDocument: !multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 7\n      }\n    }, scrollableContent);\n    var extraButton = null;\n\n    if (canMarkAsRead) {\n      extraButton = /*#__PURE__*/React.createElement(\"button\", {\n        \"aria-label\": intl.formatMessage(messages.markAsRead),\n        title: intl.formatMessage(messages.markAsRead),\n        onClick: this.handleMarkAsRead,\n        className: \"column-header__button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        id: \"check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      ref: this.setColumnRef,\n      label: intl.formatMessage(messages.title),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      icon: \"bell\",\n      active: isUnread,\n      title: intl.formatMessage(messages.title),\n      onPin: this.handlePin,\n      onMove: this.handleMove,\n      onClick: this.handleHeaderClick,\n      pinned: pinned,\n      multiColumn: multiColumn,\n      extraButton: extraButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ColumnSettingsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }\n    })), filterBarContainer, scrollContainer);\n  };\n\n  return Notifications;\n}(React.PureComponent), _class2.propTypes = {\n  columnId: PropTypes.string,\n  notifications: ImmutablePropTypes.list.isRequired,\n  showFilterBar: PropTypes.bool.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool,\n  isUnread: PropTypes.bool,\n  multiColumn: PropTypes.bool,\n  hasMore: PropTypes.bool,\n  numPending: PropTypes.number,\n  lastReadId: PropTypes.string,\n  canMarkAsRead: PropTypes.bool,\n  needsNotificationPermission: PropTypes.bool\n}, _class2.defaultProps = {\n  trackScroll: true\n}, _temp)) || _class) || _class);\nexport { Notifications as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/notifications/index.js"],"names":["React","connect","PropTypes","ImmutablePropTypes","Column","ColumnHeader","expandNotifications","scrollTopNotifications","loadPending","mountNotifications","unmountNotifications","markNotificationsAsRead","submitMarkers","addColumn","removeColumn","moveColumn","NotificationContainer","defineMessages","injectIntl","FormattedMessage","ColumnSettingsContainer","FilterBarContainer","createSelector","List","ImmutableList","debounce","ScrollableList","LoadGap","Icon","compareId","NotificationsPermissionBanner","messages","title","markAsRead","getExcludedTypes","state","getIn","shows","filter","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","includes","get","mapStateToProps","isLoading","isUnread","size","hasMore","numPending","lastReadId","canMarkAsRead","some","needsNotificationPermission","Notifications","handleLoadGap","maxId","props","dispatch","handleLoadOlder","last","leading","handleLoadPending","handleScrollToTop","handleScroll","handlePin","columnId","handleMove","dir","handleHeaderClick","column","scrollTop","setColumnRef","c","handleMoveUp","id","elementIndex","findIndex","_selectChild","handleMoveDown","handleMarkAsRead","immediate","componentWillMount","componentWillUnmount","cancel","index","align_top","container","node","element","querySelector","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","render","intl","multiColumn","pinned","emptyMessage","scrollableContent","filterBarContainer","map","scrollContainer","extraButton","formatMessage","PureComponent","propTypes","string","list","isRequired","bool","func","object","number","defaultProps","trackScroll"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport {\n  expandNotifications,\n  scrollTopNotifications,\n  loadPending,\n  mountNotifications,\n  unmountNotifications,\n  markNotificationsAsRead,\n} from '../../actions/notifications';\nimport { submitMarkers } from '../../actions/markers';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport NotificationContainer from './containers/notification_container';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport { createSelector } from 'reselect';\nimport { List as ImmutableList } from 'immutable';\nimport { debounce } from 'lodash';\nimport ScrollableList from '../../components/scrollable_list';\nimport LoadGap from '../../components/load_gap';\nimport Icon from 'mastodon/components/icon';\nimport compareId from 'mastodon/compare_id';\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  isLoading: state.getIn(['notifications', 'isLoading'], true),\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Notifications extends React.PureComponent {\n\n  static propTypes = {\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  componentWillMount() {\n    this.props.dispatch(mountNotifications());\n  }\n\n  componentWillUnmount () {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    this.props.dispatch(scrollTopNotifications(false));\n    this.props.dispatch(unmountNotifications());\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setColumnRef = c => {\n    this.column = c;\n  }\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  }\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  handleMarkAsRead = () => {\n    this.props.dispatch(markNotificationsAsRead());\n    this.props.dispatch(submitMarkers({ immediate: true }));\n  };\n\n  render () {\n    const { intl, notifications, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, showFilterBar, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = showFilterBar\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    const scrollContainer = (\n      <ScrollableList\n        scrollKey={`notifications-${columnId}`}\n        trackScroll={!pinned}\n        isLoading={isLoading}\n        showLoading={isLoading && notifications.size === 0}\n        hasMore={hasMore}\n        numPending={numPending}\n        prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n        alwaysPrepend\n        emptyMessage={emptyMessage}\n        onLoadMore={this.handleLoadOlder}\n        onLoadPending={this.handleLoadPending}\n        onScrollToTop={this.handleScrollToTop}\n        onScroll={this.handleScroll}\n        bindToDocument={!multiColumn}\n      >\n        {scrollableContent}\n      </ScrollableList>\n    );\n\n    let extraButton = null;\n\n    if (canMarkAsRead) {\n      extraButton = (\n        <button\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='check' />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setColumnRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='bell'\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={extraButton}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n        {filterBarContainer}\n        {scrollContainer}\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"column.notifications","defaultMessage":"Notifications"},{"id":"notifications.mark_as_read","defaultMessage":"Mark every notification as read"},{"id":"empty_column.notifications","defaultMessage":"You don't have any notifications yet. When other people interact with you, you will see it here."}]}},"sourceType":"module"}