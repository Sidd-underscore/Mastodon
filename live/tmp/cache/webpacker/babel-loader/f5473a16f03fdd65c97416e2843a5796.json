{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/components/block_modal.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { makeGetAccount } from '../../../selectors';\nimport Button from '../../../components/button';\nimport { closeModal } from '../../../actions/modal';\nimport { blockAccount } from '../../../actions/accounts';\nimport { initReport } from '../../../actions/reports';\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var getAccount = makeGetAccount();\n\n  var mapStateToProps = function mapStateToProps(state) {\n    return {\n      account: getAccount(state, state.getIn(['blocks', 'new', 'account_id']))\n    };\n  };\n\n  return mapStateToProps;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onConfirm(account) {\n      dispatch(blockAccount(account.get('id')));\n    },\n\n    onBlockAndReport(account) {\n      dispatch(blockAccount(account.get('id')));\n      dispatch(initReport(account));\n    },\n\n    onClose() {\n      dispatch(closeModal());\n    }\n\n  };\n};\n\nvar BlockModal = (_dec = connect(makeMapStateToProps, mapDispatchToProps), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(BlockModal, _React$PureComponent);\n\n  function BlockModal() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handleClick = function () {\n      _this.props.onClose();\n\n      _this.props.onConfirm(_this.props.account);\n    };\n\n    _this.handleSecondary = function () {\n      _this.props.onClose();\n\n      _this.props.onBlockAndReport(_this.props.account);\n    };\n\n    _this.handleCancel = function () {\n      _this.props.onClose();\n    };\n\n    _this.setRef = function (c) {\n      _this.button = c;\n    };\n\n    return _this;\n  }\n\n  var _proto = BlockModal.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.button.focus();\n  };\n\n  _proto.render = function render() {\n    var account = this.props.account;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-root__modal block-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block-modal__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"confirmations.block.message\",\n      defaultMessage: \"Are you sure you want to block {name}?\",\n      values: {\n        name: /*#__PURE__*/React.createElement(\"strong\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 31\n          }\n        }, \"@\", account.get('acct'))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block-modal__action-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleCancel,\n      className: \"block-modal__cancel-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"confirmation_modal.cancel\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleSecondary,\n      className: \"confirmation-modal__secondary-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"confirmations.block.block_and_report\",\n      defaultMessage: \"Block & Report\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleClick,\n      ref: this.setRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"confirmations.block.confirm\",\n      defaultMessage: \"Block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }))));\n  };\n\n  return BlockModal;\n}(React.PureComponent), _class2.propTypes = {\n  account: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onBlockAndReport: PropTypes.func.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  intl: PropTypes.object.isRequired\n}, _temp)) || _class) || _class);\nexport { BlockModal as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/ui/components/block_modal.js"],"names":["React","connect","PropTypes","injectIntl","FormattedMessage","makeGetAccount","Button","closeModal","blockAccount","initReport","makeMapStateToProps","getAccount","mapStateToProps","state","account","getIn","mapDispatchToProps","dispatch","onConfirm","get","onBlockAndReport","onClose","BlockModal","handleClick","props","handleSecondary","handleCancel","setRef","c","button","componentDidMount","focus","render","name","PureComponent","propTypes","object","isRequired","func","intl"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { makeGetAccount } from '../../../selectors';\nimport Button from '../../../components/button';\nimport { closeModal } from '../../../actions/modal';\nimport { blockAccount } from '../../../actions/accounts';\nimport { initReport } from '../../../actions/reports';\n\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = state => ({\n    account: getAccount(state, state.getIn(['blocks', 'new', 'account_id'])),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onConfirm(account) {\n      dispatch(blockAccount(account.get('id')));\n    },\n\n    onBlockAndReport(account) {\n      dispatch(blockAccount(account.get('id')));\n      dispatch(initReport(account));\n    },\n\n    onClose() {\n      dispatch(closeModal());\n    },\n  };\n};\n\nexport default @connect(makeMapStateToProps, mapDispatchToProps)\n@injectIntl\nclass BlockModal extends React.PureComponent {\n\n  static propTypes = {\n    account: PropTypes.object.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onBlockAndReport: PropTypes.func.isRequired,\n    onConfirm: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    this.button.focus();\n  }\n\n  handleClick = () => {\n    this.props.onClose();\n    this.props.onConfirm(this.props.account);\n  }\n\n  handleSecondary = () => {\n    this.props.onClose();\n    this.props.onBlockAndReport(this.props.account);\n  }\n\n  handleCancel = () => {\n    this.props.onClose();\n  }\n\n  setRef = (c) => {\n    this.button = c;\n  }\n\n  render () {\n    const { account } = this.props;\n\n    return (\n      <div className='modal-root__modal block-modal'>\n        <div className='block-modal__container'>\n          <p>\n            <FormattedMessage\n              id='confirmations.block.message'\n              defaultMessage='Are you sure you want to block {name}?'\n              values={{ name: <strong>@{account.get('acct')}</strong> }}\n            />\n          </p>\n        </div>\n\n        <div className='block-modal__action-bar'>\n          <Button onClick={this.handleCancel} className='block-modal__cancel-button'>\n            <FormattedMessage id='confirmation_modal.cancel' defaultMessage='Cancel' />\n          </Button>\n          <Button onClick={this.handleSecondary} className='confirmation-modal__secondary-button'>\n            <FormattedMessage id='confirmations.block.block_and_report' defaultMessage='Block & Report' />\n          </Button>\n          <Button onClick={this.handleClick} ref={this.setRef}>\n            <FormattedMessage id='confirmations.block.confirm' defaultMessage='Block' />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"confirmations.block.message","defaultMessage":"Are you sure you want to block {name}?"},{"id":"confirmation_modal.cancel","defaultMessage":"Cancel"},{"id":"confirmations.block.block_and_report","defaultMessage":"Block & Report"},{"id":"confirmations.block.confirm","defaultMessage":"Block"}]}},"sourceType":"module"}