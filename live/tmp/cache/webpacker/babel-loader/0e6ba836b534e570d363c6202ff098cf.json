{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { List as ImmutableList, Map as ImmutableMap, is } from 'immutable';\nimport { me } from '../initial_state';\n\nvar getAccountBase = function getAccountBase(state, id) {\n  return state.getIn(['accounts', id], null);\n};\n\nvar getAccountCounters = function getAccountCounters(state, id) {\n  return state.getIn(['accounts_counters', id], null);\n};\n\nvar getAccountRelationship = function getAccountRelationship(state, id) {\n  return state.getIn(['relationships', id], null);\n};\n\nvar getAccountMoved = function getAccountMoved(state, id) {\n  return state.getIn(['accounts', state.getIn(['accounts', id, 'moved'])]);\n};\n\nexport var makeGetAccount = function makeGetAccount() {\n  return createSelector([getAccountBase, getAccountCounters, getAccountRelationship, getAccountMoved], function (base, counters, relationship, moved) {\n    if (base === null) {\n      return null;\n    }\n\n    return base.merge(counters).withMutations(function (map) {\n      map.set('relationship', relationship);\n      map.set('moved', moved);\n    });\n  });\n};\n\nvar toServerSideType = function toServerSideType(columnType) {\n  switch (columnType) {\n    case 'home':\n    case 'notifications':\n    case 'public':\n    case 'thread':\n    case 'account':\n      return columnType;\n\n    default:\n      if (columnType.indexOf('list:') > -1) {\n        return 'home';\n      } else {\n        return 'public'; // community, account, hashtag\n      }\n\n  }\n};\n\nvar escapeRegExp = function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}; // $& means the whole matched string\n\n\nvar regexFromFilters = function regexFromFilters(filters) {\n  if (filters.size === 0) {\n    return null;\n  }\n\n  return new RegExp(filters.map(function (filter) {\n    var expr = escapeRegExp(filter.get('phrase'));\n\n    if (filter.get('whole_word')) {\n      if (/^[\\w]/.test(expr)) {\n        expr = \"\\\\b\" + expr;\n      }\n\n      if (/[\\w]$/.test(expr)) {\n        expr = expr + \"\\\\b\";\n      }\n    }\n\n    return expr;\n  }).join('|'), 'i');\n}; // Memoize the filter regexps for each valid server contextType\n\n\nvar makeGetFiltersRegex = function makeGetFiltersRegex() {\n  var memo = {};\n  return function (state, _ref) {\n    var contextType = _ref.contextType;\n    if (!contextType) return ImmutableList();\n    var serverSideType = toServerSideType(contextType);\n    var filters = state.get('filters', ImmutableList()).filter(function (filter) {\n      return filter.get('context').includes(serverSideType) && (filter.get('expires_at') === null || Date.parse(filter.get('expires_at')) > new Date());\n    });\n\n    if (!memo[serverSideType] || !is(memo[serverSideType].filters, filters)) {\n      var dropRegex = regexFromFilters(filters.filter(function (filter) {\n        return filter.get('irreversible');\n      }));\n      var regex = regexFromFilters(filters);\n      memo[serverSideType] = {\n        filters: filters,\n        results: [dropRegex, regex]\n      };\n    }\n\n    return memo[serverSideType].results;\n  };\n};\n\nexport var getFiltersRegex = makeGetFiltersRegex();\nexport var makeGetStatus = function makeGetStatus() {\n  return createSelector([function (state, _ref2) {\n    var id = _ref2.id;\n    return state.getIn(['statuses', id]);\n  }, function (state, _ref3) {\n    var id = _ref3.id;\n    return state.getIn(['statuses', state.getIn(['statuses', id, 'reblog'])]);\n  }, function (state, _ref4) {\n    var id = _ref4.id;\n    return state.getIn(['accounts', state.getIn(['statuses', id, 'account'])]);\n  }, function (state, _ref5) {\n    var id = _ref5.id;\n    return state.getIn(['accounts', state.getIn(['statuses', state.getIn(['statuses', id, 'reblog']), 'account'])]);\n  }, getFiltersRegex], function (statusBase, statusReblog, accountBase, accountReblog, filtersRegex) {\n    if (!statusBase) {\n      return null;\n    }\n\n    if (statusReblog) {\n      statusReblog = statusReblog.set('account', accountReblog);\n    } else {\n      statusReblog = null;\n    }\n\n    var dropRegex = (accountReblog || accountBase).get('id') !== me && filtersRegex[0];\n\n    if (dropRegex && dropRegex.test(statusBase.get('reblog') ? statusReblog.get('search_index') : statusBase.get('search_index'))) {\n      return null;\n    }\n\n    var regex = (accountReblog || accountBase).get('id') !== me && filtersRegex[1];\n    var filtered = regex && regex.test(statusBase.get('reblog') ? statusReblog.get('search_index') : statusBase.get('search_index'));\n    return statusBase.withMutations(function (map) {\n      map.set('reblog', statusReblog);\n      map.set('account', accountBase);\n      map.set('filtered', filtered);\n    });\n  });\n};\nexport var makeGetPictureInPicture = function makeGetPictureInPicture() {\n  return createSelector([function (state, _ref6) {\n    var id = _ref6.id;\n    return state.get('picture_in_picture').statusId === id;\n  }, function (state) {\n    return state.getIn(['meta', 'layout']) !== 'mobile';\n  }], function (inUse, available) {\n    return ImmutableMap({\n      inUse: inUse && available,\n      available\n    });\n  });\n};\n\nvar getAlertsBase = function getAlertsBase(state) {\n  return state.get('alerts');\n};\n\nexport var getAlerts = createSelector([getAlertsBase], function (base) {\n  var arr = [];\n  base.forEach(function (item) {\n    arr.push({\n      message: item.get('message'),\n      message_values: item.get('message_values'),\n      title: item.get('title'),\n      key: item.get('key'),\n      dismissAfter: 5000,\n      barStyle: {\n        zIndex: 200\n      }\n    });\n  });\n  return arr;\n});\nexport var makeGetNotification = function makeGetNotification() {\n  return createSelector([function (_, base) {\n    return base;\n  }, function (state, _, accountId) {\n    return state.getIn(['accounts', accountId]);\n  }], function (base, account) {\n    return base.set('account', account);\n  });\n};\nexport var getAccountGallery = createSelector([function (state, id) {\n  return state.getIn(['timelines', \"account:\" + id + \":media\", 'items'], ImmutableList());\n}, function (state) {\n  return state.get('statuses');\n}, function (state, id) {\n  return state.getIn(['accounts', id]);\n}], function (statusIds, statuses, account) {\n  var medias = ImmutableList();\n  statusIds.forEach(function (statusId) {\n    var status = statuses.get(statusId);\n    medias = medias.concat(status.get('media_attachments').map(function (media) {\n      return media.set('status', status).set('account', account);\n    }));\n  });\n  return medias;\n});","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/selectors/index.js"],"names":["createSelector","List","ImmutableList","Map","ImmutableMap","is","me","getAccountBase","state","id","getIn","getAccountCounters","getAccountRelationship","getAccountMoved","makeGetAccount","base","counters","relationship","moved","merge","withMutations","map","set","toServerSideType","columnType","indexOf","escapeRegExp","string","replace","regexFromFilters","filters","size","RegExp","filter","expr","get","test","join","makeGetFiltersRegex","memo","contextType","serverSideType","includes","Date","parse","dropRegex","regex","results","getFiltersRegex","makeGetStatus","statusBase","statusReblog","accountBase","accountReblog","filtersRegex","filtered","makeGetPictureInPicture","statusId","inUse","available","getAlertsBase","getAlerts","arr","forEach","item","push","message","message_values","title","key","dismissAfter","barStyle","zIndex","makeGetNotification","_","accountId","account","getAccountGallery","statusIds","statuses","medias","status","concat","media"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,IAAI,IAAIC,aAAjB,EAAgCC,GAAG,IAAIC,YAAvC,EAAqDC,EAArD,QAA+D,WAA/D;AACA,SAASC,EAAT,QAAmB,kBAAnB;;AAEA,IAAMC,cAAc,GAAW,SAAzBA,cAAyB,CAACC,KAAD,EAAQC,EAAR;AAAA,SAAeD,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaD,EAAb,CAAZ,EAA8B,IAA9B,CAAf;AAAA,CAA/B;;AACA,IAAME,kBAAkB,GAAO,SAAzBA,kBAAyB,CAACH,KAAD,EAAQC,EAAR;AAAA,SAAeD,KAAK,CAACE,KAAN,CAAY,CAAC,mBAAD,EAAsBD,EAAtB,CAAZ,EAAuC,IAAvC,CAAf;AAAA,CAA/B;;AACA,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACJ,KAAD,EAAQC,EAAR;AAAA,SAAeD,KAAK,CAACE,KAAN,CAAY,CAAC,eAAD,EAAkBD,EAAlB,CAAZ,EAAmC,IAAnC,CAAf;AAAA,CAA/B;;AACA,IAAMI,eAAe,GAAU,SAAzBA,eAAyB,CAACL,KAAD,EAAQC,EAAR;AAAA,SAAeD,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaF,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaD,EAAb,EAAiB,OAAjB,CAAZ,CAAb,CAAZ,CAAf;AAAA,CAA/B;;AAEA,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAOd,cAAc,CAAC,CAACO,cAAD,EAAiBI,kBAAjB,EAAqCC,sBAArC,EAA6DC,eAA7D,CAAD,EAAgF,UAACE,IAAD,EAAOC,QAAP,EAAiBC,YAAjB,EAA+BC,KAA/B,EAAyC;AAC5I,QAAIH,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,WAAOA,IAAI,CAACI,KAAL,CAAWH,QAAX,EAAqBI,aAArB,CAAmC,UAAAC,GAAG,EAAI;AAC/CA,MAAAA,GAAG,CAACC,GAAJ,CAAQ,cAAR,EAAwBL,YAAxB;AACAI,MAAAA,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBJ,KAAjB;AACD,KAHM,CAAP;AAID,GAToB,CAArB;AAUD,CAXM;;AAaP,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,UAAU,EAAI;AACrC,UAAQA,UAAR;AACA,SAAK,MAAL;AACA,SAAK,eAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,SAAL;AACE,aAAOA,UAAP;;AACF;AACE,UAAIA,UAAU,CAACC,OAAX,CAAmB,OAAnB,IAA8B,CAAC,CAAnC,EAAsC;AACpC,eAAO,MAAP;AACD,OAFD,MAEO;AACL,eAAO,QAAP,CADK,CACY;AAClB;;AAZH;AAcD,CAfD;;AAiBA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,MAAM;AAAA,SACzBA,MAAM,CAACC,OAAP,CAAe,qBAAf,EAAsC,MAAtC,CADyB;AAAA,CAA3B,C,CACiD;;;AAEjD,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO,EAAI;AAClC,MAAIA,OAAO,CAACC,IAAR,KAAiB,CAArB,EAAwB;AACtB,WAAO,IAAP;AACD;;AAED,SAAO,IAAIC,MAAJ,CAAWF,OAAO,CAACT,GAAR,CAAY,UAAAY,MAAM,EAAI;AACtC,QAAIC,IAAI,GAAGR,YAAY,CAACO,MAAM,CAACE,GAAP,CAAW,QAAX,CAAD,CAAvB;;AAEA,QAAIF,MAAM,CAACE,GAAP,CAAW,YAAX,CAAJ,EAA8B;AAC5B,UAAI,QAAQC,IAAR,CAAaF,IAAb,CAAJ,EAAwB;AACtBA,QAAAA,IAAI,WAASA,IAAb;AACD;;AAED,UAAI,QAAQE,IAAR,CAAaF,IAAb,CAAJ,EAAwB;AACtBA,QAAAA,IAAI,GAAMA,IAAN,QAAJ;AACD;AACF;;AAED,WAAOA,IAAP;AACD,GAdiB,EAcfG,IAde,CAcV,GAdU,CAAX,EAcO,GAdP,CAAP;AAeD,CApBD,C,CAsBA;;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,MAAIC,IAAI,GAAG,EAAX;AAEA,SAAO,UAAC/B,KAAD,QAA4B;AAAA,QAAlBgC,WAAkB,QAAlBA,WAAkB;AACjC,QAAI,CAACA,WAAL,EAAkB,OAAOtC,aAAa,EAApB;AAElB,QAAMuC,cAAc,GAAGlB,gBAAgB,CAACiB,WAAD,CAAvC;AACA,QAAMV,OAAO,GAAGtB,KAAK,CAAC2B,GAAN,CAAU,SAAV,EAAqBjC,aAAa,EAAlC,EAAsC+B,MAAtC,CAA6C,UAAAA,MAAM;AAAA,aAAIA,MAAM,CAACE,GAAP,CAAW,SAAX,EAAsBO,QAAtB,CAA+BD,cAA/B,MAAmDR,MAAM,CAACE,GAAP,CAAW,YAAX,MAA6B,IAA7B,IAAqCQ,IAAI,CAACC,KAAL,CAAWX,MAAM,CAACE,GAAP,CAAW,YAAX,CAAX,IAAwC,IAAIQ,IAAJ,EAAhI,CAAJ;AAAA,KAAnD,CAAhB;;AAEA,QAAI,CAACJ,IAAI,CAACE,cAAD,CAAL,IAAyB,CAACpC,EAAE,CAACkC,IAAI,CAACE,cAAD,CAAJ,CAAqBX,OAAtB,EAA+BA,OAA/B,CAAhC,EAAyE;AACvE,UAAMe,SAAS,GAAGhB,gBAAgB,CAACC,OAAO,CAACG,MAAR,CAAe,UAAAA,MAAM;AAAA,eAAIA,MAAM,CAACE,GAAP,CAAW,cAAX,CAAJ;AAAA,OAArB,CAAD,CAAlC;AACA,UAAMW,KAAK,GAAGjB,gBAAgB,CAACC,OAAD,CAA9B;AACAS,MAAAA,IAAI,CAACE,cAAD,CAAJ,GAAuB;AAAEX,QAAAA,OAAO,EAAEA,OAAX;AAAoBiB,QAAAA,OAAO,EAAE,CAACF,SAAD,EAAYC,KAAZ;AAA7B,OAAvB;AACD;;AACD,WAAOP,IAAI,CAACE,cAAD,CAAJ,CAAqBM,OAA5B;AACD,GAZD;AAaD,CAhBD;;AAkBA,OAAO,IAAMC,eAAe,GAAGV,mBAAmB,EAA3C;AAEP,OAAO,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAOjD,cAAc,CACnB,CACE,UAACQ,KAAD;AAAA,QAAUC,EAAV,SAAUA,EAAV;AAAA,WAAmBD,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaD,EAAb,CAAZ,CAAnB;AAAA,GADF,EAEE,UAACD,KAAD;AAAA,QAAUC,EAAV,SAAUA,EAAV;AAAA,WAAmBD,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaF,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaD,EAAb,EAAiB,QAAjB,CAAZ,CAAb,CAAZ,CAAnB;AAAA,GAFF,EAGE,UAACD,KAAD;AAAA,QAAUC,EAAV,SAAUA,EAAV;AAAA,WAAmBD,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaF,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaD,EAAb,EAAiB,SAAjB,CAAZ,CAAb,CAAZ,CAAnB;AAAA,GAHF,EAIE,UAACD,KAAD;AAAA,QAAUC,EAAV,SAAUA,EAAV;AAAA,WAAmBD,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaF,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaF,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaD,EAAb,EAAiB,QAAjB,CAAZ,CAAb,EAAsD,SAAtD,CAAZ,CAAb,CAAZ,CAAnB;AAAA,GAJF,EAKEuC,eALF,CADmB,EASnB,UAACE,UAAD,EAAaC,YAAb,EAA2BC,WAA3B,EAAwCC,aAAxC,EAAuDC,YAAvD,EAAwE;AACtE,QAAI,CAACJ,UAAL,EAAiB;AACf,aAAO,IAAP;AACD;;AAED,QAAIC,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,GAAGA,YAAY,CAAC7B,GAAb,CAAiB,SAAjB,EAA4B+B,aAA5B,CAAf;AACD,KAFD,MAEO;AACLF,MAAAA,YAAY,GAAG,IAAf;AACD;;AAED,QAAMN,SAAS,GAAG,CAACQ,aAAa,IAAID,WAAlB,EAA+BjB,GAA/B,CAAmC,IAAnC,MAA6C7B,EAA7C,IAAmDgD,YAAY,CAAC,CAAD,CAAjF;;AACA,QAAIT,SAAS,IAAIA,SAAS,CAACT,IAAV,CAAec,UAAU,CAACf,GAAX,CAAe,QAAf,IAA2BgB,YAAY,CAAChB,GAAb,CAAiB,cAAjB,CAA3B,GAA8De,UAAU,CAACf,GAAX,CAAe,cAAf,CAA7E,CAAjB,EAA+H;AAC7H,aAAO,IAAP;AACD;;AAED,QAAMW,KAAK,GAAO,CAACO,aAAa,IAAID,WAAlB,EAA+BjB,GAA/B,CAAmC,IAAnC,MAA6C7B,EAA7C,IAAmDgD,YAAY,CAAC,CAAD,CAAjF;AACA,QAAMC,QAAQ,GAAIT,KAAK,IAAIA,KAAK,CAACV,IAAN,CAAWc,UAAU,CAACf,GAAX,CAAe,QAAf,IAA2BgB,YAAY,CAAChB,GAAb,CAAiB,cAAjB,CAA3B,GAA8De,UAAU,CAACf,GAAX,CAAe,cAAf,CAAzE,CAA3B;AAEA,WAAOe,UAAU,CAAC9B,aAAX,CAAyB,UAAAC,GAAG,EAAI;AACrCA,MAAAA,GAAG,CAACC,GAAJ,CAAQ,QAAR,EAAkB6B,YAAlB;AACA9B,MAAAA,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmB8B,WAAnB;AACA/B,MAAAA,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBiC,QAApB;AACD,KAJM,CAAP;AAKD,GAjCkB,CAArB;AAmCD,CApCM;AAsCP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AAC3C,SAAOxD,cAAc,CAAC,CACpB,UAACQ,KAAD;AAAA,QAAUC,EAAV,SAAUA,EAAV;AAAA,WAAmBD,KAAK,CAAC2B,GAAN,CAAU,oBAAV,EAAgCsB,QAAhC,KAA6ChD,EAAhE;AAAA,GADoB,EAEpB,UAACD,KAAD;AAAA,WAAWA,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,QAAT,CAAZ,MAAoC,QAA/C;AAAA,GAFoB,CAAD,EAGlB,UAACgD,KAAD,EAAQC,SAAR;AAAA,WAAsBvD,YAAY,CAAC;AACpCsD,MAAAA,KAAK,EAAEA,KAAK,IAAIC,SADoB;AAEpCA,MAAAA;AAFoC,KAAD,CAAlC;AAAA,GAHkB,CAArB;AAOD,CARM;;AAUP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAApD,KAAK;AAAA,SAAIA,KAAK,CAAC2B,GAAN,CAAU,QAAV,CAAJ;AAAA,CAA3B;;AAEA,OAAO,IAAM0B,SAAS,GAAG7D,cAAc,CAAC,CAAC4D,aAAD,CAAD,EAAkB,UAAC7C,IAAD,EAAU;AACjE,MAAI+C,GAAG,GAAG,EAAV;AAEA/C,EAAAA,IAAI,CAACgD,OAAL,CAAa,UAAAC,IAAI,EAAI;AACnBF,IAAAA,GAAG,CAACG,IAAJ,CAAS;AACPC,MAAAA,OAAO,EAAEF,IAAI,CAAC7B,GAAL,CAAS,SAAT,CADF;AAEPgC,MAAAA,cAAc,EAAEH,IAAI,CAAC7B,GAAL,CAAS,gBAAT,CAFT;AAGPiC,MAAAA,KAAK,EAAEJ,IAAI,CAAC7B,GAAL,CAAS,OAAT,CAHA;AAIPkC,MAAAA,GAAG,EAAEL,IAAI,CAAC7B,GAAL,CAAS,KAAT,CAJE;AAKPmC,MAAAA,YAAY,EAAE,IALP;AAMPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE;AADA;AANH,KAAT;AAUD,GAXD;AAaA,SAAOV,GAAP;AACD,CAjBsC,CAAhC;AAmBP,OAAO,IAAMW,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACvC,SAAOzE,cAAc,CAAC,CACpB,UAAC0E,CAAD,EAAI3D,IAAJ;AAAA,WAAyBA,IAAzB;AAAA,GADoB,EAEpB,UAACP,KAAD,EAAQkE,CAAR,EAAWC,SAAX;AAAA,WAAyBnE,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaiE,SAAb,CAAZ,CAAzB;AAAA,GAFoB,CAAD,EAGlB,UAAC5D,IAAD,EAAO6D,OAAP,EAAmB;AACpB,WAAO7D,IAAI,CAACO,GAAL,CAAS,SAAT,EAAoBsD,OAApB,CAAP;AACD,GALoB,CAArB;AAMD,CAPM;AASP,OAAO,IAAMC,iBAAiB,GAAG7E,cAAc,CAAC,CAC9C,UAACQ,KAAD,EAAQC,EAAR;AAAA,SAAeD,KAAK,CAACE,KAAN,CAAY,CAAC,WAAD,eAAyBD,EAAzB,aAAqC,OAArC,CAAZ,EAA2DP,aAAa,EAAxE,CAAf;AAAA,CAD8C,EAE9C,UAAAM,KAAK;AAAA,SAAUA,KAAK,CAAC2B,GAAN,CAAU,UAAV,CAAV;AAAA,CAFyC,EAG9C,UAAC3B,KAAD,EAAQC,EAAR;AAAA,SAAeD,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,EAAaD,EAAb,CAAZ,CAAf;AAAA,CAH8C,CAAD,EAI5C,UAACqE,SAAD,EAAYC,QAAZ,EAAsBH,OAAtB,EAAkC;AACnC,MAAII,MAAM,GAAG9E,aAAa,EAA1B;AAEA4E,EAAAA,SAAS,CAACf,OAAV,CAAkB,UAAAN,QAAQ,EAAI;AAC5B,QAAMwB,MAAM,GAAGF,QAAQ,CAAC5C,GAAT,CAAasB,QAAb,CAAf;AACAuB,IAAAA,MAAM,GAAGA,MAAM,CAACE,MAAP,CAAcD,MAAM,CAAC9C,GAAP,CAAW,mBAAX,EAAgCd,GAAhC,CAAoC,UAAA8D,KAAK;AAAA,aAAIA,KAAK,CAAC7D,GAAN,CAAU,QAAV,EAAoB2D,MAApB,EAA4B3D,GAA5B,CAAgC,SAAhC,EAA2CsD,OAA3C,CAAJ;AAAA,KAAzC,CAAd,CAAT;AACD,GAHD;AAKA,SAAOI,MAAP;AACD,CAb8C,CAAxC","sourcesContent":["import { createSelector } from 'reselect';\nimport { List as ImmutableList, Map as ImmutableMap, is } from 'immutable';\nimport { me } from '../initial_state';\n\nconst getAccountBase         = (state, id) => state.getIn(['accounts', id], null);\nconst getAccountCounters     = (state, id) => state.getIn(['accounts_counters', id], null);\nconst getAccountRelationship = (state, id) => state.getIn(['relationships', id], null);\nconst getAccountMoved        = (state, id) => state.getIn(['accounts', state.getIn(['accounts', id, 'moved'])]);\n\nexport const makeGetAccount = () => {\n  return createSelector([getAccountBase, getAccountCounters, getAccountRelationship, getAccountMoved], (base, counters, relationship, moved) => {\n    if (base === null) {\n      return null;\n    }\n\n    return base.merge(counters).withMutations(map => {\n      map.set('relationship', relationship);\n      map.set('moved', moved);\n    });\n  });\n};\n\nconst toServerSideType = columnType => {\n  switch (columnType) {\n  case 'home':\n  case 'notifications':\n  case 'public':\n  case 'thread':\n  case 'account':\n    return columnType;\n  default:\n    if (columnType.indexOf('list:') > -1) {\n      return 'home';\n    } else {\n      return 'public'; // community, account, hashtag\n    }\n  }\n};\n\nconst escapeRegExp = string =>\n  string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n\nconst regexFromFilters = filters => {\n  if (filters.size === 0) {\n    return null;\n  }\n\n  return new RegExp(filters.map(filter => {\n    let expr = escapeRegExp(filter.get('phrase'));\n\n    if (filter.get('whole_word')) {\n      if (/^[\\w]/.test(expr)) {\n        expr = `\\\\b${expr}`;\n      }\n\n      if (/[\\w]$/.test(expr)) {\n        expr = `${expr}\\\\b`;\n      }\n    }\n\n    return expr;\n  }).join('|'), 'i');\n};\n\n// Memoize the filter regexps for each valid server contextType\nconst makeGetFiltersRegex = () => {\n  let memo = {};\n\n  return (state, { contextType }) => {\n    if (!contextType) return ImmutableList();\n\n    const serverSideType = toServerSideType(contextType);\n    const filters = state.get('filters', ImmutableList()).filter(filter => filter.get('context').includes(serverSideType) && (filter.get('expires_at') === null || Date.parse(filter.get('expires_at')) > (new Date())));\n\n    if (!memo[serverSideType] || !is(memo[serverSideType].filters, filters)) {\n      const dropRegex = regexFromFilters(filters.filter(filter => filter.get('irreversible')));\n      const regex = regexFromFilters(filters);\n      memo[serverSideType] = { filters: filters, results: [dropRegex, regex] };\n    }\n    return memo[serverSideType].results;\n  };\n};\n\nexport const getFiltersRegex = makeGetFiltersRegex();\n\nexport const makeGetStatus = () => {\n  return createSelector(\n    [\n      (state, { id }) => state.getIn(['statuses', id]),\n      (state, { id }) => state.getIn(['statuses', state.getIn(['statuses', id, 'reblog'])]),\n      (state, { id }) => state.getIn(['accounts', state.getIn(['statuses', id, 'account'])]),\n      (state, { id }) => state.getIn(['accounts', state.getIn(['statuses', state.getIn(['statuses', id, 'reblog']), 'account'])]),\n      getFiltersRegex,\n    ],\n\n    (statusBase, statusReblog, accountBase, accountReblog, filtersRegex) => {\n      if (!statusBase) {\n        return null;\n      }\n\n      if (statusReblog) {\n        statusReblog = statusReblog.set('account', accountReblog);\n      } else {\n        statusReblog = null;\n      }\n\n      const dropRegex = (accountReblog || accountBase).get('id') !== me && filtersRegex[0];\n      if (dropRegex && dropRegex.test(statusBase.get('reblog') ? statusReblog.get('search_index') : statusBase.get('search_index'))) {\n        return null;\n      }\n\n      const regex     = (accountReblog || accountBase).get('id') !== me && filtersRegex[1];\n      const filtered  = regex && regex.test(statusBase.get('reblog') ? statusReblog.get('search_index') : statusBase.get('search_index'));\n\n      return statusBase.withMutations(map => {\n        map.set('reblog', statusReblog);\n        map.set('account', accountBase);\n        map.set('filtered', filtered);\n      });\n    },\n  );\n};\n\nexport const makeGetPictureInPicture = () => {\n  return createSelector([\n    (state, { id }) => state.get('picture_in_picture').statusId === id,\n    (state) => state.getIn(['meta', 'layout']) !== 'mobile',\n  ], (inUse, available) => ImmutableMap({\n    inUse: inUse && available,\n    available,\n  }));\n};\n\nconst getAlertsBase = state => state.get('alerts');\n\nexport const getAlerts = createSelector([getAlertsBase], (base) => {\n  let arr = [];\n\n  base.forEach(item => {\n    arr.push({\n      message: item.get('message'),\n      message_values: item.get('message_values'),\n      title: item.get('title'),\n      key: item.get('key'),\n      dismissAfter: 5000,\n      barStyle: {\n        zIndex: 200,\n      },\n    });\n  });\n\n  return arr;\n});\n\nexport const makeGetNotification = () => {\n  return createSelector([\n    (_, base)             => base,\n    (state, _, accountId) => state.getIn(['accounts', accountId]),\n  ], (base, account) => {\n    return base.set('account', account);\n  });\n};\n\nexport const getAccountGallery = createSelector([\n  (state, id) => state.getIn(['timelines', `account:${id}:media`, 'items'], ImmutableList()),\n  state       => state.get('statuses'),\n  (state, id) => state.getIn(['accounts', id]),\n], (statusIds, statuses, account) => {\n  let medias = ImmutableList();\n\n  statusIds.forEach(statusId => {\n    const status = statuses.get(statusId);\n    medias = medias.concat(status.get('media_attachments').map(media => media.set('status', status).set('account', account)));\n  });\n\n  return medias;\n});\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}