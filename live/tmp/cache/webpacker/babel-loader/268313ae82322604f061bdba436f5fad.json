{"ast":null,"code":"var _jsxFileName = \"/home/runner/Mastodon/live/app/javascript/mastodon/features/direct_timeline/index.js\",\n    _dec,\n    _class,\n    _class2,\n    _temp;\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { mountConversations, unmountConversations, expandConversations } from '../../actions/conversations';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connectDirectStream } from '../../actions/streaming';\nimport ConversationsListContainer from './containers/conversations_list_container';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"column.direct\",\n    \"defaultMessage\": \"Direct messages\"\n  }\n});\nvar DirectTimeline = (_dec = connect(), _dec(_class = injectIntl(_class = (_temp = _class2 = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(DirectTimeline, _React$PureComponent);\n\n  function DirectTimeline() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handlePin = function () {\n      var _this$props = _this.props,\n          columnId = _this$props.columnId,\n          dispatch = _this$props.dispatch;\n\n      if (columnId) {\n        dispatch(removeColumn(columnId));\n      } else {\n        dispatch(addColumn('DIRECT', {}));\n      }\n    };\n\n    _this.handleMove = function (dir) {\n      var _this$props2 = _this.props,\n          columnId = _this$props2.columnId,\n          dispatch = _this$props2.dispatch;\n      dispatch(moveColumn(columnId, dir));\n    };\n\n    _this.handleHeaderClick = function () {\n      _this.column.scrollTop();\n    };\n\n    _this.setRef = function (c) {\n      _this.column = c;\n    };\n\n    _this.handleLoadMore = function (maxId) {\n      _this.props.dispatch(expandConversations({\n        maxId\n      }));\n    };\n\n    return _this;\n  }\n\n  var _proto = DirectTimeline.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var dispatch = this.props.dispatch;\n    dispatch(mountConversations());\n    dispatch(expandConversations());\n    this.disconnect = dispatch(connectDirectStream());\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.props.dispatch(unmountConversations());\n\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        intl = _this$props3.intl,\n        hasUnread = _this$props3.hasUnread,\n        columnId = _this$props3.columnId,\n        multiColumn = _this$props3.multiColumn;\n    var pinned = !!columnId;\n    return /*#__PURE__*/React.createElement(Column, {\n      bindToDocument: !multiColumn,\n      ref: this.setRef,\n      label: intl.formatMessage(messages.title),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ColumnHeader, {\n      icon: \"envelope\",\n      active: hasUnread,\n      title: intl.formatMessage(messages.title),\n      onPin: this.handlePin,\n      onMove: this.handleMove,\n      onClick: this.handleHeaderClick,\n      pinned: pinned,\n      multiColumn: multiColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ConversationsListContainer, {\n      trackScroll: !pinned,\n      scrollKey: \"direct_timeline-\" + columnId,\n      timelineId: \"direct\",\n      onLoadMore: this.handleLoadMore,\n      emptyMessage: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"empty_column.direct\",\n        defaultMessage: \"You don't have any direct messages yet. When you send or receive one, it will show up here.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return DirectTimeline;\n}(React.PureComponent), _class2.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  columnId: PropTypes.string,\n  intl: PropTypes.object.isRequired,\n  hasUnread: PropTypes.bool,\n  multiColumn: PropTypes.bool\n}, _temp)) || _class) || _class);\nexport { DirectTimeline as default };","map":{"version":3,"sources":["/home/runner/Mastodon/live/app/javascript/mastodon/features/direct_timeline/index.js"],"names":["React","connect","PropTypes","Column","ColumnHeader","mountConversations","unmountConversations","expandConversations","addColumn","removeColumn","moveColumn","defineMessages","injectIntl","FormattedMessage","connectDirectStream","ConversationsListContainer","messages","title","DirectTimeline","handlePin","props","columnId","dispatch","handleMove","dir","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","maxId","componentDidMount","disconnect","componentWillUnmount","render","intl","hasUnread","multiColumn","pinned","formatMessage","PureComponent","propTypes","func","isRequired","string","object","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { mountConversations, unmountConversations, expandConversations } from '../../actions/conversations';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connectDirectStream } from '../../actions/streaming';\nimport ConversationsListContainer from './containers/conversations_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Direct messages' },\n});\n\nexport default @connect()\n@injectIntl\nclass DirectTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n\n    dispatch(mountConversations());\n    dispatch(expandConversations());\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentWillUnmount () {\n    this.props.dispatch(unmountConversations());\n\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandConversations({ maxId }));\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='envelope'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        />\n\n        <ConversationsListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n        />\n      </Column>\n    );\n  }\n\n}\n"]},"metadata":{"react-intl":{"messages":[{"id":"column.direct","defaultMessage":"Direct messages"},{"id":"empty_column.direct","defaultMessage":"You don't have any direct messages yet. When you send or receive one, it will show up here."}]}},"sourceType":"module"}